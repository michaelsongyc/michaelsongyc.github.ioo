[{"categories":["生活"],"content":"大道至简 加油，把刷题变成打游戏一样的兴趣。 天道酬勤，凡事感激. 编程能力就像任何其他技能一样，也是一个可以通过 刻意练习 大大提高的。 大多数经典面试题目都有多种解决方案。 为了达到最佳的练习效果，我们强烈建议您至少将此清单里的题目练习两遍，如果可以的话，三遍会更好。 在第二遍练习时，你可能会发现一些新的技巧或新的方法。 到第三遍的时候，你会发现你的代码要比第一次提交时更加简洁。 如果你达到了这样的效果，那么恭喜你，你已经掌握了正确的练习方法！ 记住：刻意练习并不意味着寻找答案并记住它，这种练习方法不是长久之计。 在没有参考答案情况下，越能自主解决问题，才越能提高自身能力。 ","date":"2022-08-16","objectID":"/posts/life/sentence/:1:0","tags":["励志"],"title":"心灵鸡汤","uri":"/posts/life/sentence/"},{"categories":["生活"],"content":"北大通知书 假如北大在你高一的时候就给你发了一张录取通知书，但是要想得到它的话，你需要在高中三年满足以下六个条件，你答应还是不答应？ 第一，每天早晨05:40起床，唤醒大脑，坚持晨读。 第二，每天坚持背50个单词。 第三，每天坚持复习昨天学过的内容。 第四，每周末坚持整理本周的数理化错题。 第五，经常思考学过的知识点，它背后的逻辑没有掌握好，就去重新学习。 第六，每天抽时间做体育锻炼。 等到三年以后，你只要满足以上条件，那这张录取通知书就生效，你愿意答应吗？ 我想你心中已经有了答案，但其实如果你三年能够坚持做到这六点事儿，完全可以自己考上北大。 ","date":"2022-08-16","objectID":"/posts/life/sentence/:2:0","tags":["励志"],"title":"心灵鸡汤","uri":"/posts/life/sentence/"},{"categories":["leetcode"],"content":"一、数据结构的存储方式 数据结构的存储方式只有两种：数组（顺序存储）和链表（链式存储） 这句话怎么理解，不是还有散列表、栈、队列、堆、树、图等等各种数据结构吗？ 我们分析问题，一定要有递归的思想，自顶向下，从抽象到具体。你上来就列出这么多，那些都属于「上层建筑」，而数组和链表才是「结构基础」。因为那些多样化的数据结构，究其源头，都是在链表或者数组上的特殊操作，API 不同而已。 比如说「队列」、「栈」这两种数据结构既可以使用链表也可以使用数组实现。用数组实现，就要处理扩容缩容的问题；用链表实现，没有这个问题，但需要更多的内存空间存储节点指针。 「图」的两种表示方法，邻接表就是链表，邻接矩阵就是二维数组。邻接矩阵判断连通性迅速，并可以进行矩阵运算解决一些问题，但是如果图比较稀疏的话很耗费空间。邻接表比较节省空间，但是很多操作的效率上肯定比不过邻接矩阵。 「散列表」就是通过散列函数把键映射到一个大数组里。而且对于解决散列冲突的方法，拉链法需要链表特性，操作简单，但需要额外的空间存储指针；线性探查法就需要数组特性，以便连续寻址，不需要指针的存储空间，但操作稍微复杂些。 「树」，用数组实现就是「堆」，因为「堆」是一个完全二叉树，用数组存储不需要节点指针，操作也比较简单；用链表实现就是很常见的那种「树」，因为不一定是完全二叉树，所以不适合用数组存储。为此，在这种链表「树」结构之上，又衍生出各种巧妙的设计，比如二叉搜索树、AVL 树、红黑树、区间树、B 树等等，以应对不同的问题。 了解 Redis 数据库的朋友可能也知道，Redis 提供列表、字符串、集合等等几种常用数据结构，但是对于每种数据结构，底层的存储方式都至少有两种，以便于根据存储数据的实际情况使用合适的存储方式。 综上，数据结构种类很多，甚至你也可以发明自己的数据结构，但是底层存储无非数组或者链表，二者的优缺点如下： 数组由于是紧凑连续存储,可以随机访问，通过索引快速找到对应元素，而且相对节约存储空间。但正因为连续存储，内存空间必须一次性分配够，所以说数组如果要扩容，需要重新分配一块更大的空间，再把数据全部复制过去，时间复杂度 O(N)；而且你如果想在数组中间进行插入和删除，每次必须搬移后面的所有数据以保持连续，时间复杂度 O(N)。 链表因为元素不连续，而是靠指针指向下一个元素的位置，所以不存在数组的扩容问题；如果知道某一元素的前驱和后驱，操作指针即可删除该元素或者插入新元素，时间复杂度 O(1)。但是正因为存储空间不连续，你无法根据一个索引算出对应元素的地址，所以不能随机访问；而且由于每个元素必须存储指向前后元素位置的指针，会消耗相对更多的储存空间。 二、数据结构的基本操作 对于任何数据结构，其基本操作无非遍历 + 访问，再具体一点就是：增删查改。 数据结构种类很多，但它们存在的目的都是在不同的应用场景，尽可能高效地增删查改。话说这不就是数据结构的使命么？ 如何遍历 + 访问？我们仍然从最高层来看，各种数据结构的遍历 + 访问无非两种形式：线性的和非线性的。 线性就是 for/while 迭代为代表，非线性就是递归为代表。再具体一步，无非以下几种框架： 数组遍历框架，典型的线性迭代结构： void traverse(int[] arr) { for (int i = 0; i \u003c arr.length; i++) { // 迭代访问 arr[i] } } 链表遍历框架，兼具迭代和递归结构： /* 基本的单链表节点 */ class ListNode { int val; ListNode next; } void traverse(ListNode head) { for (ListNode p = head; p != null; p = p.next) { // 迭代访问 p.val } } void traverse(ListNode head) { // 递归访问 head.val traverse(head.next); } 二叉树遍历框架，典型的非线性递归遍历结构： /* 基本的二叉树节点 */ class TreeNode { int val; TreeNode left, right; } void traverse(TreeNode root) { traverse(root.left); traverse(root.right); } 你看二叉树的递归遍历方式和链表的递归遍历方式，相似不？再看看二叉树结构和单链表结构，相似不？如果再多几条叉，N 叉树你会不会遍历？ 二叉树框架可以扩展为 N 叉树的遍历框架： /* 基本的 N 叉树节点 */ class TreeNode { int val; TreeNode[] children; } void traverse(TreeNode root) { for (TreeNode child : root.children) traverse(child); } N 叉树的遍历又可以扩展为图的遍历，因为图就是好几 N 叉棵树的结合体。你说图是可能出现环的？这个很好办，用个布尔数组 visited 做标记就行了，这里就不写代码了。 所谓框架，就是套路。不管增删查改，这些代码都是永远无法脱离的结构，你可以把这个结构作为大纲，根据具体问题在框架上添加代码就行了，下面会具体举例。 三、算法刷题指南 首先要明确的是，数据结构是工具，算法是通过合适的工具解决特定问题的方法。也就是说，学习算法之前，最起码得了解那些常用的数据结构，了解它们的特性和缺陷。 所以我建议的刷题顺序是： 1、先学习像数组、链表这种基本数据结构的常用算法，比如单链表翻转，前缀和数组，二分搜索等。 因为这些算法属于会者不难难者不会的类型，难度不大，学习它们不会花费太多时间。而且这些小而美的算法经常让你大呼精妙，能够有效培养你对算法的兴趣。 2、学会基础算法之后，不要急着上来就刷回溯算法、动态规划这类笔试常考题，而应该先刷二叉树，先刷二叉树，先刷二叉树，重要的事情说三遍。 为什么要先刷二叉树呢，因为二叉树是最容易培养框架思维的，而且大部分算法技巧，本质上都是树的遍历问题。 刷二叉树看到题目没思路？根据很多读者的问题，其实大家不是没思路，只是没有理解我们说的「框架」是什么。 不要小看这几行破代码，几乎所有二叉树的题目都是一套这个框架就出来了： void traverse(TreeNode root) { // 前序位置 traverse(root.left); // 中序位置 traverse(root.right); // 后序位置 } 比如说我随便拿几道题的解法出来，不用管具体的代码逻辑，只要看看框架在其中是如何发挥作用的就行。 力扣第 124 题，难度困难，让你求二叉树中最大路径和，主要代码如下： 比如说我随便拿几道题的解法出来，不用管具体的代码逻辑，只要看看框架在其中是如何发挥作用的就行。 力扣第 124 题，难度困难，让你求二叉树中最大路径和，主要代码如下： int res = Integer.MIN_VALUE; int oneSideMax(TreeNode root) { if (root == null) return 0; int left = max(0, oneSideMax(root.left)); int right = max(0, oneSideMax(root.right)); // 后序位置 res = Math.max(res, left + right + root.val); return Math.max(left, right) + root.val; } 注意递归函数的位置，这就是个后序遍历嘛，无非就是把 traverse 函数名字改成 oneSideMax 了。 力扣第 105 题，难度中等，让你根据前序遍历和中序遍历的结果还原一棵二叉树，很经典的问题吧，主要代码如下： TreeNode build(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd) { // 前序位置，寻找左右子树的索引 if (preStart \u003e preEnd) { return null; } int rootVal = preorder[preStart]; int index = 0; for (int i = inStart; i \u003c= inEnd; i++) { if (inorder[i] == rootVal) { index = i; break; } } int leftSize = index - inStart; TreeNode root = new TreeNode(rootVal); // 递归构造左右子树 root.left = build(preorder, preStart + 1, preStart + leftSize, inorder, inStart, index - 1); root.right = build(preorder, preStart + leftSize + 1, preEnd, inorder, index + 1, inEnd); return root; } 不要看这个函数的参数很多，只是为了控制数组索引而已。注意找递归函数 build 的位置，本质上该算法也就是一个前序遍历，因为它在前序遍历的位置加了一坨代码逻辑。 力扣第 230 题，难度中等，寻找二叉搜索树中的第 k 小的元素，","date":"2022-08-18","objectID":"/posts/tech/leetcode/algorithm/:0:0","tags":["算法","leetcode"],"title":"算法概述","uri":"/posts/tech/leetcode/algorithm/"},{"categories":["Tech"],"content":"leetcode leetcode-labuladong (109k) labuladong-算法讲解 宫水三叶-blog leetcode-宫水三叶 github-宫水三叶 ","date":"2022-08-18","objectID":"/posts/tech/github/github/:0:0","tags":["github"],"title":"Github","uri":"/posts/tech/github/github/"},{"categories":["读书笔记"],"content":" 查理就是如此独特的人，他的独特性既表现在他的思想上，也表现在他的人格上。 比如说，查理思考问题总是从逆向开始。如果要明白人生如何得到幸福，查理首先是研究人生如何才能变得痛苦；要研究企业如何做强做大，查理首先研究企业是如何衰败的；大部分人更关心如何在股市投资上成功，查理最关心的是为什么在股市投资上大部分人都失败了。 他的这种思考方法来源于下面这句农夫谚语中所蕴含的哲理：我只想知道将来我会死在什么地方，这样我就就=不去那儿了。”这也是逆向思维的典型例子。 查理对理性有更苛刻的定义。正是这样的“理性”，让查理具有敏說独到的眼光和洞察力，即使对于完全陌生的领域，他也能一眼看到事物的本质。巴菲特就把查理的这个特点称作“两分钟效应”- 他说查理比世界上任何人更能在最短时间之内把一个复杂商业的本质说清楚。 芒格推崇的几个重要的投资原则： ● 逆向思维，凡事总是反过来想； ● 拥有良好的性格，毫不焦躁地持有看好的股票，并保持浓厚的兴趣去提高自己的能力； ● 在自己的“能力圈”中做投资，并不断拓展自己的能力圈； ● 等待好的投资机会出现，一旦出现，倾全力集中投资。 〝我这辈子遇到的聪明人（来自各行各业的聪明人）没有不每天阅读的没有，一个都没有。沃伦读书之多，我读书之多，可能会让你感到吃惊。我的孩子们都笑话我。他们觉得我是一本长了两条腿的书。” 查理论吸引客户：“关健是把手头的事情做好……把手头的事情做好。把已经拥有的客户照顾好，其他的自然会来找你。 查理有把事情彻底弄清楚的欲望。他遇事喜欢穷根究底，无论该事跟他有密切关系与否。任何引起他注意的事情，他都想对其有更多的认识，更多的了解，弄清楚那到底是怎么回事。 “多元思维模型” – “你必须知道重要学科的重要理论，并经常使用它们—-要全部都用上，而不是只用几种。大多数人都只使用学过的一个学科的思维模型，比如说经济学，试图用一种方法来解决所有问题。你知道谚语是怎么说的：“在手里拿着铁锤的人看来，世界就像一颗钉子。”这是处理问题的一种笨办法。 我们看很多书。我认识的聪明人没有不看很多书的。但光看书还不够：你必须拥有一种能够掌握思想和做合理事情的性格。大多数人无法掌握正确的思想，或者不知道该怎么应用它们。 求学之道无坦途，问艺之路无捷径。 -安东尼•特罗洛普 “五何”原则一一你必须说明何人因何故在何时何地做了何事。如果你在布劳恩公司里面写一封信或指示某人去做某事，但没有告诉他原因，那么你可能会被解雇。实际上，你只要犯两次这种错误，就会被解雇。 你们也许会问，这有那么重要吗？嗯，这也跟心理学的原理有关。如果你能够将一堆模式的知识组合起来，回答一个又一个为什么，你就能够更好地思考：同样道理，如果你告诉人们事情的时候，总是告诉他们原因，他们就能更深刻地理解你说的话，就会要加重视你说的话，也会更倾向于听从你说的话。就算他们不理解你的理由，他们也会更倾向于听你的语。 正如你想要从问一个又一个的“为什么”开始获得普世的智慧一样，你在跟别人交流沟通时，也应该把原因讲清楚。就算答案很浅显，你把“为什么”讲清仍是一种明智的做法。 遇到好机会，就全力出击。就是这么简单。 ","date":"2022-07-29","objectID":"/posts/book/poor_charlie_book/:0:0","tags":["理财"],"title":"[读书笔记] 《穷查理宝典》","uri":"/posts/book/poor_charlie_book/"},{"categories":["生活"],"content":"当六月份看到朋友发的招募贴时，随即决定给自己放一次长假，让自己从持续多年的忙碌状态中抽离出来，腾出几天时间，给自己来一场心灵的放松、灵魂的洗礼和体力的马拉松。 2022.7.8 - 2022.7.17，来阿里四年，给自己休的第一次长假。 ","date":"2022-07-22","objectID":"/posts/travel/xinjiang/:0:0","tags":["新疆"],"title":"新疆旅行-北疆","uri":"/posts/travel/xinjiang/"},{"categories":["生活"],"content":"行程计划 7.8： 杭州出发； 7.9： 尹宁 伊力特酒厂、六星街、伊犁河；（美食） 7.10：尹宁7点发车（1.5小时车程）、紫仙镇薰衣草庄园（1小时）、（1小时车程）果子沟（1.5小时）、午餐、赛里木湖（落日）（9小时左右）、（1.5小时车程）住清水河镇（预计12点多了）； 7.11：清水河镇8点出发附近看免费薰衣草（1小时），（6.5小时车程）前往夏塔旅游风景区，进景区入住，有时间可以游玩下（星空）； 7.12：6点早起，早餐后徒步夏塔古道（20公里左右，原路往返，也许还有日出）、17点左右出景区晚饭、（3小时）驱车住特克斯、八卦城； 7.13：早起，（8点前）喀拉峻（8小时）、阔克苏大峡谷（4h）、（4小时车程）住那拉提； 7.14：（8点）那拉提风景区（一整天），住那拉提； 7.15：坐车到巴音（2.5小时），巴音天鹅湖、九曲十八弯（落日）、住巴音；（大巴车返回伊宁） 7.16：换5座或7座车，完整独库公路+s101国防公路（百里丹霞，走一段，不然吃不消），到乌鲁木齐； 7.17：返杭； ","date":"2022-07-22","objectID":"/posts/travel/xinjiang/:1:0","tags":["新疆"],"title":"新疆旅行-北疆","uri":"/posts/travel/xinjiang/"},{"categories":["生活"],"content":"DAY1 [周五] 2022.7.8, 头天晚上和同事一起吃夜宵到凌晨一点，聊得很嗨，晚上回家后又解决几个工作问题，本打算熬下夜直接去机场，谁知凌晨两点多，收到航空公司航班延迟起飞的信息， 果断睡觉； 早上起床后，收拾行李，刚好赶上早高峰，预估打车的话会堵车，测算地铁到机场的站总数后（地铁时间相对能准确预测），果断选择做地铁去机场； 最终一个半小时准时到达机场，和小伙伴汇合，完美; 11:55起飞，14:55到达兰州中川机场，机场吃了碗拉州拉面，本以为到达兰州本土，味道会有些不一样，结果证明期望过高，味道可能还不如个别面馆； 航班原计划19:35起飞，上飞机后，因为天气原因，硬生生拖到20:45才起飞（小插曲，上飞机后，有些累，就立马闭眼补觉，后来醒了看了下外面，哇塞，落地了，这么快，爽！； 然后在停顿了几秒，懵懵的看了下周围，脑袋瞬间清晰，瓦特… 这都一觉睡醒了，飞机还没起飞！！！），最终23:35到达伊宁。 目前还属于疫情管控时期，到新疆前需要提前申报行程，不然有可能落地后被原地劝返； 今天的时间基本全花在路途中。 凌晨两点吃晚饭； ","date":"2022-07-22","objectID":"/posts/travel/xinjiang/:2:0","tags":["新疆"],"title":"新疆旅行-北疆","uri":"/posts/travel/xinjiang/"},{"categories":["生活"],"content":"DAY2[周六] 今日安排：伊力特酒厂、六星街、伊犁河、喀赞其民宿旅游区。 早餐七点起床，吃早餐； 借助花姐独特的人脉关系，有幸拜访伊力特酒厂，了解到酒厂的历史发展轨迹，由几代人共同的心血才铸就而成，心中五味杂陈。品尝了红冰、白冰葡萄酒，酸甜可口，让人垂涎三尺。 了解到了北纬45°生命线，独特的地理气候，最终生长出优质的瓜果粮食。品尝了内部迎宾特供伊力特45°白酒，味道纯正，不辛辣，后劲也不大，超出预期；午饭吃了羊肉包、羊肉，没有疝气，味道鲜美，怒赞！ 在六星街，看到新疆本土大叔悠闲的用手风琴演奏本土轻音乐，音调轻缓优美，让人瞬间放松，忘记一切凡尘琐事，享受生活。 六星街-公路咖啡 自东向西流的伊犁河，以及晚上九点悬挂半空的大太阳. （以东部地区同学对东八区的时间理解，在这里有些颠覆认知） 伊犁河 ","date":"2022-07-22","objectID":"/posts/travel/xinjiang/:3:0","tags":["新疆"],"title":"新疆旅行-北疆","uri":"/posts/travel/xinjiang/"},{"categories":["生活"],"content":"DAY3 [周日] 今日安排：紫仙镇薰衣草庄园、果子沟、赛里木湖。 凌晨2点睡觉，早晨7点吃早餐； 7月中薰衣草已经花谢，薰衣草庄园里并没有看到成片的花海，听当地人说，最好6月中旬来。 果子沟全长4.4千米，大桥长700米。 塔里木湖【强烈推荐去！】 大西洋的最后一滴眼泪，让人沉醉； 围着赛里木湖转了一圈，感受到它的独特，海天一色的蓝，一望无际的湖面，让人内心平静； 坐在长廊中间，眺望眼前的赛里木湖，心无杂念，凡尘种种，皆为过往；远处挺拔的雪山和蓝天白云，造就出了当地人民心中的“净海”。 ","date":"2022-07-22","objectID":"/posts/travel/xinjiang/:4:0","tags":["新疆"],"title":"新疆旅行-北疆","uri":"/posts/travel/xinjiang/"},{"categories":["生活"],"content":"DAY4[周一] 今日安排：油菜花田、入住夏塔旅游风景区； 早7点起床，“温州包子\"早餐店吃早点； 去夏塔旅游风景区途中，遇到油菜花田，犹豫天气不太好，不好出片，如果天气不错，效果会很棒； 入住夏塔小木屋，晚上是真的冷，好在有电热毯，相对舒服的睡了半宿。 ","date":"2022-07-22","objectID":"/posts/travel/xinjiang/:5:0","tags":["新疆"],"title":"新疆旅行-北疆","uri":"/posts/travel/xinjiang/"},{"categories":["生活"],"content":"DAY5[周二] 今日安排：徒步夏塔古道（20公里左右）、特克斯、八卦城； 早上五点半起床，六点出发徒步，目的地雪山； ","date":"2022-07-22","objectID":"/posts/travel/xinjiang/:6:0","tags":["新疆"],"title":"新疆旅行-北疆","uri":"/posts/travel/xinjiang/"},{"categories":["生活"],"content":"DAY6[周三] 今日安排：喀拉峻草原、阔克苏大峡谷（4h） 喀拉峻草原\u0026\u0026阔克苏大峡谷，高山草原(7月这里的草，有些泛黄)，视野辽阔，山风吹过很冷，不过可以抱只小羊，相当暖和。 ","date":"2022-07-22","objectID":"/posts/travel/xinjiang/:7:0","tags":["新疆"],"title":"新疆旅行-北疆","uri":"/posts/travel/xinjiang/"},{"categories":["生活"],"content":"DAY7[周四] 今日安排：那拉提风景区 ","date":"2022-07-22","objectID":"/posts/travel/xinjiang/:8:0","tags":["新疆"],"title":"新疆旅行-北疆","uri":"/posts/travel/xinjiang/"},{"categories":["生活"],"content":"DAY8[周五] 今日安排：巴音天鹅湖、九曲十八弯（落日） 天鹅湖里有几只天鹅，但湖水味道呛人，过敏者慎入； 九曲十八弯，如果遇到落日，会更美；这里的山风吹得让人由内而外的发冷，山上有个小超市，买了包泡面，店主赠送开水，价钱合理，吃饱取暖，完美； ","date":"2022-07-22","objectID":"/posts/travel/xinjiang/:9:0","tags":["新疆"],"title":"新疆旅行-北疆","uri":"/posts/travel/xinjiang/"},{"categories":["生活"],"content":"DAY9[周六] 今日安排：独库公路+s101国防公路，到乌鲁木齐 路上偶遇彩虹，有点超出预期； 一路上听说会经历春夏秋冬，途中遇到的几个小雪山，和预期中的差距蛮大，不过能近距离看到，也算不错。整条独库路是有些绕，不建议新手自驾； 独库公路-雪山 独库公路 ","date":"2022-07-22","objectID":"/posts/travel/xinjiang/:10:0","tags":["新疆"],"title":"新疆旅行-北疆","uri":"/posts/travel/xinjiang/"},{"categories":["生活"],"content":"DAY10[周日] 因为预定酒店比较找，酒店有赠送整点接送服务，所以早晨6点半起床，7点出门，7点一刻到机场，机场吃了点八宝粥，8:25乌鲁木齐起飞，中途郑州中转1小时，然后14：55到达杭州萧山。 ","date":"2022-07-22","objectID":"/posts/travel/xinjiang/:11:0","tags":["新疆"],"title":"新疆旅行-北疆","uri":"/posts/travel/xinjiang/"},{"categories":["生活"],"content":"费用 去新机票：2217 返杭机票：2225 酒店+交通：3500\u003e 部分景点门票: 132+145+132+115+150+135 上述共计：8751； ","date":"2022-07-22","objectID":"/posts/travel/xinjiang/:12:0","tags":["新疆"],"title":"新疆旅行-北疆","uri":"/posts/travel/xinjiang/"},{"categories":["生活"],"content":" 方向 一到两个 方向/赛道，不要多。 知识分享、知识付费 （Java）– 起网名，中文、简单、便于搜索； 资料 自媒体-1 自媒体-2 自媒体-3 ","date":"2022-06-05","objectID":"/posts/life/parttime/wemeida/:0:0","tags":["生活"],"title":"自媒体","uri":"/posts/life/parttime/wemeida/"},{"categories":["todo"],"content":" 所有的行业-》提供产品，服务消费者，教培行业[知识付费] 每天都在重复、传授、吸收知识。– 如教师行业 知识星球。 知识是掌握路径： 学习 -\u003e 听，学、练习、掌握 -\u003e 遗忘 -》 使用前，在此学习。 如果你像日常三餐、睡觉一样的频率和规律 去反复学习同一拨知识，你的掌握水平会高于其他人。 ","date":"2022-06-03","objectID":"/posts/thinking/mine-thinking/:0:0","tags":["learning"],"title":"mine-thinking","uri":"/posts/thinking/mine-thinking/"},{"categories":["Tech"],"content":" github java Guide-1 java Guide-2 java Guide-git 1、不要沉迷框架，修炼内功 2、提高英语阅读能力【google translate】 3、职场从来不缺普通的程序员 4、工作之外有自己感兴趣的东西 5、学会规划自己的时间，时间管理【be foucused、番茄todo】 6、学会安排自己的任务【Trello】 7、学会使用工具提升工作效率 8、 学会休息，注意健康 对业务和产品比较敏感。 提升技术的深度、技术的广度、对业务和产品敏感的个人。 用最快的方式，提高自己的核心竞争力。 ","date":"2022-06-02","objectID":"/posts/tech/collection-material/:0:0","tags":["learning"],"title":"collection_material","uri":"/posts/tech/collection-material/"},{"categories":["Tech"],"content":"内网-这些年-姐妹篇 Tools Arthas-Java monitor Collection Robin的博客 横云断岭的博客 横云断岭 github 代码随想录 \u0026\u0026 刷题网站 githhub-demo 代码随想录 - github刷题整理- 适合2/3刷 github-刷题集合（含leecode） ","date":"2022-06-02","objectID":"/posts/tech/collection-material/:1:0","tags":["learning"],"title":"collection_material","uri":"/posts/tech/collection-material/"},{"categories":["Tech"],"content":"Mac ","date":"2022-05-01","objectID":"/posts/tech/setup/install-software-collection/:0:0","tags":["install"],"title":"Mac下开发工具安装","uri":"/posts/tech/setup/install-software-collection/"},{"categories":["Tech"],"content":"Tool Charles ","date":"2022-05-01","objectID":"/posts/tech/setup/install-software-collection/:1:0","tags":["install"],"title":"Mac下开发工具安装","uri":"/posts/tech/setup/install-software-collection/"},{"categories":["Tech"],"content":"DB mac-mysql安装-参考-1 mac-mysql安装-参考-2 mac-python3 安装-参考 mac-Homebrew 安装-参考 ","date":"2022-05-01","objectID":"/posts/tech/setup/install-software-collection/:2:0","tags":["install"],"title":"Mac下开发工具安装","uri":"/posts/tech/setup/install-software-collection/"},{"categories":["Tech"],"content":"github 自动部署, refer to : Hugo 白话文 | GitHub Action 自动部署 基于 Github Action 自动构建 Hugo 博客 ","date":"2022-03-13","objectID":"/posts/tech/github/githubaction/:0:0","tags":["github","hugo"],"title":"Github Pages Action","uri":"/posts/tech/github/githubaction/"},{"categories":["Tech"],"content":"document ","date":"2022-03-13","objectID":"/posts/tech/github/githubaction/:1:0","tags":["github","hugo"],"title":"Github Pages Action","uri":"/posts/tech/github/githubaction/"},{"categories":["读书笔记"],"content":" 案例背景 中国正处在一个至关重要的十字路口上。制造廉价产品已使中国有了很大的发展，但上升的劳动力成本、环境问题、收人不平等以及对创新的需求都意味着重要的不是制造更廉价的产品，而是更好地进行产品营销。只有这样，中国才能赚更多的钱，才能在员工收人、环境保护和其他方面进行更大的投人。这意味着中国需要更好地掌握如何在顾客和潜在顾客的心智中建立品牌和认知，如何应对国内及国际上无处不在的竞争. 这也正是我的许多书能够发挥作用的地方。它们都是关于如何通过在众多竞争者中实现差昇化来定位自己的品牌；它们都是关于如何保持简单、如何运用常识以及如何寻求显而易见又强有力的概念。总的来讲，无论你想要销售什么，它们都会告诉你如何成为一个更好的营销者。 我的中国合伙人邓德隆先生正将其中的很多理论在中国加以运用，他甚至为企业家开设了 “定位”培训课程。但是，中国如果要建立自己的品牌，正如你们在日本、韩国和世界其他地方所看到的那些品牌，你们依然有很长的路要走。 但有一件事很明了：继续“制造更廉价的产品”只会死路一条，因为其他国家会想办法把价格压得更低。 新生产工具：定位 在此背景下，为组织准确定义成果的新生产工具一定位(positioning），在1969年被杰克•特芳特发明出来，掀起了第三次生产力革命。在谈到为何选择“定位”一词来命名这一新工具时，特劳特曾说：“《韦氏词典》对战略的定义是针对敌人（竞争对手）确立最具优势的位置 （position)。这正好是定位要做的工作。” 在顾客心智中针对竞争对手确定最具优势的位置，从而使品牌胜出竟争赢得优先选择，这就是企业需全力以赴抵达的成果，也是企业赖以存在的唯一理由。正如德鲁克在评价泰勒“四步工作法”时说：“泰勒的方法听起来没什么了不起有效的方法常常如此。其实这套方法花了泰勒整整20年的时间去试验，才整理发展出来。”这段话用来描述特劳特与定位同样适用。 定位四步工作法 第一步，分析整个外部环境，确定“我们的竞年对手是谁，竞争对手的价值是什么”（这与德鲁克在回答管理第一问“我们的业务是什么，应该是什么”时问的 “我们的顾客是谁，顾客的价值是什么”相反，因过多的选择、 有限的心智，决定了经营方式已从顾客导向转向了竞年导向）。 第二步，避开竞年对手在顾客心智中的强势，或是利用其强势中蕴含的弱点，确立品牌的优势位置-定位。 第三步，为这一定位寻求一个可靠的证明——信任状。 第四步，将这一定位整合进企业内部运营的方方面面，特别是传播上要有足够多的资源，以将这一定位植人顾客的心智 ","date":"2021-08-21","objectID":"/posts/book/life_orientation/:0:0","tags":["规划"],"title":"[读书笔记] 《人生定位》","uri":"/posts/book/life_orientation/"},{"categories":["生活"],"content":"海南outing ","date":"2021-07-13","objectID":"/posts/travel/wanning/:0:0","tags":["海南","万宁","三亚"],"title":"万宁Outing","uri":"/posts/travel/wanning/"},{"categories":["Tech"],"content":"思维导图 ","date":"2020-05-29","objectID":"/posts/tech/tools/tools-paint/:0:0","tags":["作图（paint）"],"title":"常用作图工具(工作\u0026\u0026生活)","uri":"/posts/tech/tools/tools-paint/"},{"categories":["Tech"],"content":"xmind UML ","date":"2020-05-29","objectID":"/posts/tech/tools/tools-paint/:1:0","tags":["作图（paint）"],"title":"常用作图工具(工作\u0026\u0026生活)","uri":"/posts/tech/tools/tools-paint/"},{"categories":["Tech"],"content":"plantUML Official website demo ","date":"2020-05-29","objectID":"/posts/tech/tools/tools-paint/:2:0","tags":["作图（paint）"],"title":"常用作图工具(工作\u0026\u0026生活)","uri":"/posts/tech/tools/tools-paint/"},{"categories":["Tech"],"content":"IDEA plant plugins idea plugin 流程图 ","date":"2020-05-29","objectID":"/posts/tech/tools/tools-paint/:3:0","tags":["作图（paint）"],"title":"常用作图工具(工作\u0026\u0026生活)","uri":"/posts/tech/tools/tools-paint/"},{"categories":["Tech"],"content":"Omni全家桶 OmniGraffle Mac平台的流程图绘制软件，相当于windows平台的visio OmniPlan 工期规划甘特图的工具 ","date":"2020-05-29","objectID":"/posts/tech/tools/tools-paint/:4:0","tags":["作图（paint）"],"title":"常用作图工具(工作\u0026\u0026生活)","uri":"/posts/tech/tools/tools-paint/"},{"categories":["Tech"],"content":"Gliffy diagrams ","date":"2020-05-29","objectID":"/posts/tech/tools/tools-paint/:5:0","tags":["作图（paint）"],"title":"常用作图工具(工作\u0026\u0026生活)","uri":"/posts/tech/tools/tools-paint/"},{"categories":["Tech"],"content":" Chart github: Python3 chart ","date":"2019-12-05","objectID":"/posts/tech/python/python3/:0:0","tags":["python"],"title":"python3","uri":"/posts/tech/python/python3/"},{"categories":["Tech"],"content":"hugo介绍 desc Hug Hugo 几年前的影响力是不如 hexo 的，但现在越来越多的人从 hexo 迁移到了 Hugo，Hugo使用人数也多了起来，GitHub 上 Hugo 项目有 56.2k 个 star，已远远超过了 hexo，因此你也不用太担心 Hugo 会不会太小众化的问题，但是 Hugo 上的主题选择会更少一些，其中最受欢迎的是 wowchemy，但也仅有 6.1k 个star，而本站采用的是 LoveIt 主题，它的 star 就更少了，才 1.6k 个。当然，如果你是搞前端开发的，或者乐意自己写主题，那这些就不重要了。 ","date":"2019-08-13","objectID":"/posts/tech/hugo/hugo-build-blog/:1:0","tags":["hugo","博客"],"title":"Hugo搭建博客(How to build a blog quickly?)","uri":"/posts/tech/hugo/hugo-build-blog/"},{"categories":["Tech"],"content":"Hugo优点： 速度快 Hugo 采用 Go 语言编写，它的速度用作者的话来形容就是世界上最快的构建网站工具。并且 Hugo 是即时渲染的，这意味着你可以边写边改样式，直到你满意为止。即使是你写了几百篇文章，它也能在几秒之内全部渲染完成。 The world’s fastest framework for building websites 配置更为简单 你需要安装只是 Hugo，不像 hexo 还得安装 Node.js。并且Hugo 中是不区分站点和主题的配置文件的，Hugo 中只有一个位于站点根目录下的 config.toml 配置文件，你只用在这里面进行修改就可以了。 方便自定义 你可以在不修改主题文件的前提下方便地定制主题。在 Hugo 中，如果你想要定制主题，你只需在站点目录下新建相应的文件即可。这是非常利于主题的维护的，你只需使用 Git 的 submodule 的方式安装 Hugo 的主题，然后更新时只需直接在站点根目录下敲一条命令回车即可，非常方便！ ","date":"2019-08-13","objectID":"/posts/tech/hugo/hugo-build-blog/:2:0","tags":["hugo","博客"],"title":"Hugo搭建博客(How to build a blog quickly?)","uri":"/posts/tech/hugo/hugo-build-blog/"},{"categories":["Tech"],"content":"缺点： 主题比较少，很可能大家都是用的同一个主题，并且主题作者更新会更少一点。 总结：如果你喜欢 DIY，我建议使用 Hugo。如果你是个专业博主，写了很多文章需要渲染，我建议使用 Hugo！ 环境准备 ","date":"2019-08-13","objectID":"/posts/tech/hugo/hugo-build-blog/:3:0","tags":["hugo","博客"],"title":"Hugo搭建博客(How to build a blog quickly?)","uri":"/posts/tech/hugo/hugo-build-blog/"},{"categories":["Tech"],"content":"1.安装 hugo 自动安装（依赖网速，可能会非常慢） 在终端中输入 brew install hugo 安装。 安装成功后可输入 hugo version 查看版本信息。 手工安装 首先，请前往 GitHub 上下载最新版的 Hugo 压缩包，Releases · gohugoio/hugo (github.com)，建议选择 extended 版本，这将更有利于后续的 DIY 操作！ 下载完成后解压到一个你认为合适的位置，然后把 hugo.exe 所在的文件夹添加至环境变量中的 Path 中即可。 ","date":"2019-08-13","objectID":"/posts/tech/hugo/hugo-build-blog/:4:0","tags":["hugo","博客"],"title":"Hugo搭建博客(How to build a blog quickly?)","uri":"/posts/tech/hugo/hugo-build-blog/"},{"categories":["Tech"],"content":"2.创建新网址 hugo new site quickstart 其中quickstart更改为用户名.github.io-creator（用户名为 github 用户名，需要小写） 使用code 用户名.github.io-creator使用 vscode 查看目录 ","date":"2019-08-13","objectID":"/posts/tech/hugo/hugo-build-blog/:5:0","tags":["hugo","博客"],"title":"Hugo搭建博客(How to build a blog quickly?)","uri":"/posts/tech/hugo/hugo-build-blog/"},{"categories":["Tech"],"content":"3.添加一个主题 在 quickstart 目录下打开新的终端，输入 git init git clone https://github.com/olOwOlo/hugo-theme-even themes/even 把 \\themes\\LoveIt\\exampleSite目录下的config.toml复制下来，替换掉 站点根目录 下的同名文件。 然后对这个文件进行一些自定义修改。 然后进入根目录下的archetypes文件夹中，修改default.md文件为下面的内容（这个文件是模板文件，通过指令创建的文章将以模板为基础内容） title: \"{{ replace .Name \"-\" \" \" | title }}\" date: {{ .Date }} tags: [\"\"] categories: [\"\"] toc: enable: true description: draft: true 其中title表示文章标题，date为生成文章当时的时间，tags为标签，categories为目录，toc enable为启用文章目录（需要自己在文章中生成），description为文章摘要，draft表示是否为草稿（写完了文章把这里改为 false 即可）， 为 LoveIt 主题的摘要标识符，该标识符上方的内容为文章摘要，如果上方为空，则采用 frontmatter 中设置的descriptions为文章摘要。 添加文件 现在开始撰写文章 hugo new posts/my-first-post.md 并将draft：ture更改为draft：false。 注意: 对于even这个主题，应该使用 post 而不是 posts，即 hugo new post/some-content.md 构建页面 写完了文章进行网页的构建 hugo server -D -e production -D表示草稿也要渲染，-serve表示启动一个本地服务器，即时渲染，方便修改。 hugo serve 的默认运行环境是 development, 而 hugo 的默认运行环境是 production。 由于本地 development 环境的限制, 评论系统**, **CDN 和 fingerprint 不会在 development 环境下启用。 你可以使用 hugo serve -e production 命令来开启这些特性。 值得一提的是不论输入的是server还是serve都是一样的。 在浏览器中前往它给出的 http://localhost:1313 就能看到你刚生成的博客了。 当你运行 hugo serve 时, 当文件内容更改时, 页面会随着更改自动刷新. 现在再输入指令 hugo -D 这会生成一个 public 目录, 其中包含你网站的所有静态内容和资源. 现在可以将其部署在任何 Web 服务器上。 确认无误后就要把它发到公网上了，这里采用 GitHub pages 进行部署（当然，也有很多种方法也能达成这一目的） 启动 Hugo 服务器 hugo server -D -D 代表草稿态 ","date":"2019-08-13","objectID":"/posts/tech/hugo/hugo-build-blog/:6:0","tags":["hugo","博客"],"title":"Hugo搭建博客(How to build a blog quickly?)","uri":"/posts/tech/hugo/hugo-build-blog/"},{"categories":["Tech"],"content":"上传至 github Refer 参考 ","date":"2019-08-13","objectID":"/posts/tech/hugo/hugo-build-blog/:7:0","tags":["hugo","博客"],"title":"Hugo搭建博客(How to build a blog quickly?)","uri":"/posts/tech/hugo/hugo-build-blog/"},{"categories":["Tech"],"content":"知识点 用hugo生成的网站包含以下文件和文件夹： archetypes: 储存.md的模板文件，该文件夹的优先级高于themes下的archetypes文件夹 config.toml: 配置文件 content: 储存网站的所有内容 data: 储存数据文件供模板调用 layouts: 储存.html模板，该文件夹的优先级高于主题下的layouts文件夹 static: 储存图片、css、js等静态文件，该目录下的文件会直接拷贝到/public，该文件夹的优先级高于主题下的/static文件夹 themes: 储存主题 public: 执行hugo命令后，储存生成的静态文件 ","date":"2019-08-13","objectID":"/posts/tech/hugo/hugo-build-blog/:8:0","tags":["hugo","博客"],"title":"Hugo搭建博客(How to build a blog quickly?)","uri":"/posts/tech/hugo/hugo-build-blog/"},{"categories":["Tech"],"content":"Hugo置顶文章 Hugo 置顶文章很简单，只需要将以下放在文章头部即可置顶 --- weight: 1 --- ","date":"2019-08-13","objectID":"/posts/tech/hugo/hugo-build-blog/:9:0","tags":["hugo","博客"],"title":"Hugo搭建博客(How to build a blog quickly?)","uri":"/posts/tech/hugo/hugo-build-blog/"},{"categories":["Tech"],"content":"command #查看版本 hugo version #版本和环境详细信息 hugo env #创建新站点 hugo new site \"mysite\" #创建文章 hugo new index.md 在content/文件夹可以看到，此时多了一个markdown格式的文件index.md，打开文件可以看到时间和文件名等信息已经自动加到文件开头，包括创建时间，页面名，是否为草稿等。 #编译生成静态文件 hugo Hugo将编译所有文件并输出到public目录 #编译生成静态文件并启动web服务 hugo server ","date":"2019-08-13","objectID":"/posts/tech/hugo/hugo-build-blog/:9:1","tags":["hugo","博客"],"title":"Hugo搭建博客(How to build a blog quickly?)","uri":"/posts/tech/hugo/hugo-build-blog/"},{"categories":["Tech"],"content":"具体的解决方案如下： 苹果-\u003e系统偏好设置-\u003e最下边点mysql 在弹出页面中 关闭mysql服务（点击stop mysql server） 进入终端输入：cd /usr/local/mysql/bin/ 回车后 登录管理员权限 sudo su 输入mac的管理员密码 回车后输入以下命令来禁止mysql验证功能 ./mysqld_safe –skip-grant-tables \u0026 回车后mysql会自动重启（偏好设置中mysql的状态会变成running） 输入命令 ./mysql 输入命令 FLUSH PRIVILEGES; 输入命令 SET PASSWORD FOR ‘root’@’localhost’ = PASSWORD(‘你的新密码’); 至此，密码已经修改成功，可以登录啦！ ","date":"2019-06-16","objectID":"/posts/tech/setup/mac-reset-mysql-pwd/:0:0","tags":["install","mysql"],"title":"Mac下Mysql重置密码","uri":"/posts/tech/setup/mac-reset-mysql-pwd/"},{"categories":["Tech"],"content":" markdown-it-demo Refer markdown grammar Markdown，写博客当然要用这个。在线编辑器，所见即所得地编写。 ","date":"2019-03-04","objectID":"/posts/tech/tools/markdown/:0:0","tags":["markdown"],"title":"markdown","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"标题 markdown总支持1~6六级标题，通过在一行之前加上不同数量的井号来表示。 # 这是 H1 # ## 这是 H2 ## ### 这是 H3 ### … ","date":"2019-03-04","objectID":"/posts/tech/tools/markdown/:1:0","tags":["markdown"],"title":"markdown","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"段落 非常自然，一行文字就是一个段落。 w1 ","date":"2019-03-04","objectID":"/posts/tech/tools/markdown/:2:0","tags":["markdown"],"title":"markdown","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"文本样式 字体样式常用的有粗体、斜体、删除线等。 *斜体字* 对应 斜体字 **粗体字** 对应 粗体字 ~~删除线~~ 对应 删除线 行内代码 对应 行内代码 还有一些样式原生不支持，但是可以通过html间接支持。 可以使用星号*或下划线_指定粗体或者斜体。 这是斜体 这也是斜体 这是粗体 这是粗体+斜体 *这是斜体* _这也是斜体_ **这是粗体** ***这是粗体+斜体*** ` 行内代码 ` ","date":"2019-03-04","objectID":"/posts/tech/tools/markdown/:3:0","tags":["markdown"],"title":"markdown","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"引用 通过在行首加上大于号\u003e来添加引用格式。 DD DD 引用可以嵌套： w 引用可以嵌套： \u003ew \u003e \u003e引用可以嵌套： 也可以嵌套其他格式： ","date":"2019-03-04","objectID":"/posts/tech/tools/markdown/:4:0","tags":["markdown"],"title":"markdown","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"列表 无序列表使用星号、加号或是减号作为列表标记： Red Green Blue 等同于 Red Green Blue 和 Red Green Blue - Red - Green - Blue 有序列表则使用数字接着一个英文句点： Bird McHale Parish 数字并不会影响输出的 HTML 结果，也就是说上面的例子等同于： Bird McHale Parish ","date":"2019-03-04","objectID":"/posts/tech/tools/markdown/:5:0","tags":["markdown"],"title":"markdown","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"内联代码 用反引号` 来标记内联代码，它们会解释成标签 \u003ccode\u003e标签\u003c/code\u003e 如果代码的内容中有反引号，请用两个反引号包裹。 代码中的\u0026、\u003c、\u003e符号都会自动转义，请放心使用。 ` eee ` eee 还有一种是github的风格，代码段的前后用三个反引号 ``` 独占一行来标记。 ww ","date":"2019-03-04","objectID":"/posts/tech/tools/markdown/:6:0","tags":["markdown"],"title":"markdown","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"分隔线 你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： * * * *** ***** - - - --------------------------------------- ","date":"2019-03-04","objectID":"/posts/tech/tools/markdown/:7:0","tags":["markdown"],"title":"markdown","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"超链接 an example an example [an example](http://example.com/) [an example](http://example.com/ \"Optional Title\") 会被解释为 \u003ca href='https://www.google.com/'\u003egoogle\u003c/a\u003e \u003ca href='https://www.google.com/' title=\"Optional Title\"\u003egoogle\u003c/a\u003e ","date":"2019-03-04","objectID":"/posts/tech/tools/markdown/:8:0","tags":["markdown"],"title":"markdown","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"转义 markdown支持在以下字符前面插入反斜杠，插入之后，将不再解析这些字符，而是原样输出。 \\ 反斜线 ` 反引号 * 星号 _ 底线 {} 花括号 [] 方括号 () 括弧 # 井字号 + 加号 - 减号 . 英文句点 ! 惊叹号 ","date":"2019-03-04","objectID":"/posts/tech/tools/markdown/:9:0","tags":["markdown"],"title":"markdown","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"表格 Item Value Qty Computer $1600 5 Phone $12 12 Pipe $1 234 | Item | Value | Qty | | :------- | ----: | :---: | | Computer | $1600 | 5 | | Phone | $12 | 12 | | Pipe | $1 | 234 | title1 title2 v1 v2 要注意第二行的冒号决定了居左居右还是居中，如果你不加冒号，默认是居左的。 另外可以把第一行去掉，做成没有表头的表格，但第二行始终是要有的。 ","date":"2019-03-04","objectID":"/posts/tech/tools/markdown/:10:0","tags":["markdown"],"title":"markdown","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"TOC TOC = Table of content ， 将内容制作成导航 hexo toc 快速生成markdown目录TOC 快速生成markdown目录TOC，页内跳转 ","date":"2019-03-04","objectID":"/posts/tech/tools/markdown/:11:0","tags":["markdown"],"title":"markdown","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"checkbox checkbox - [ ] checkbox 图片 ","date":"2019-03-04","objectID":"/posts/tech/tools/markdown/:12:0","tags":["markdown"],"title":"markdown","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"内联 ![Alt text](/path/img.jpg) 会被解释为 \u003cimg src='/path/to/img.jpg'/\u003e 这种格式显示图片不能控制对齐和大小，需要的话可以采取raw html的方法： \u003cp align=\"center\"\u003e \u003cimg src=\"https://i.loli.net/2021/01/31/4ZHoWduI59fiqJY.png\" width=\"100\" /\u003e \u003c/p\u003e 自适配图片 引用方式如下： 独库公路-雪山 ","date":"2019-03-04","objectID":"/posts/tech/tools/markdown/:13:0","tags":["markdown"],"title":"markdown","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"外联 ![图片](https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png) ","date":"2019-03-04","objectID":"/posts/tech/tools/markdown/:14:0","tags":["markdown"],"title":"markdown","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. ","date":"2019-03-03","objectID":"/posts/tech/hugo/tools-hexo/:0:0","tags":["hugo"],"title":"hexo demo","uri":"/posts/tech/hugo/tools-hexo/"},{"categories":["Tech"],"content":"Quick Start ","date":"2019-03-03","objectID":"/posts/tech/hugo/tools-hexo/:1:0","tags":["hugo"],"title":"hexo demo","uri":"/posts/tech/hugo/tools-hexo/"},{"categories":["Tech"],"content":"Create a new post $ hexo new \"My New Post\" More info: Writing ","date":"2019-03-03","objectID":"/posts/tech/hugo/tools-hexo/:1:1","tags":["hugo"],"title":"hexo demo","uri":"/posts/tech/hugo/tools-hexo/"},{"categories":["Tech"],"content":"Run server $ hexo server More info: Server ","date":"2019-03-03","objectID":"/posts/tech/hugo/tools-hexo/:1:2","tags":["hugo"],"title":"hexo demo","uri":"/posts/tech/hugo/tools-hexo/"},{"categories":["Tech"],"content":"Generate static files $ hexo generate More info: Generating ","date":"2019-03-03","objectID":"/posts/tech/hugo/tools-hexo/:1:3","tags":["hugo"],"title":"hexo demo","uri":"/posts/tech/hugo/tools-hexo/"},{"categories":["Tech"],"content":"Deploy to remote sites $ hexo deploy More info: Deployment ","date":"2019-03-03","objectID":"/posts/tech/hugo/tools-hexo/:1:4","tags":["hugo"],"title":"hexo demo","uri":"/posts/tech/hugo/tools-hexo/"},{"categories":["Java","多线程"],"content":" 并发: 一个处理器同时处理多个任务。有效解决了单CPU下的多任务问题； 并行: 多个处理器或者是多核的处理器同时处理多个不同的任务.[ 能够并行执行任务的基础就是多核CPU ] 前者是逻辑上的同时发生（simultaneous），而后者是物理上的同时发生． 并发性(concurrency)，又称共行性，是指能处理多个同时性活动的能力，并发事件之间不一定要同一时刻发生。 并行(parallelism)是指同时发生的两个并发事件，具有并发的含义，而并发则不一定并行。 来个比喻：并发和并行的区别就是 一个人同时吃三个馒头 和 三个人同时吃三个馒头。 并发与并行的区别 下图反映了一个包含8个操作的任务在一个有两核心的CPU中创建四个线程运行的情况。 假设每个核心有两个线程，那么每个CPU中两个线程会交替并发，两个CPU之间的操作会并行运算。 单就一个CPU而言两个线程可以解决线程阻塞造成的不流畅问题，其本身运行效率并没有提高； 多CPU的并行运算才真正解决了运行效率问题，这也正是并发和并行的区别。 双核四线程运行示意图 ","date":"2018-10-25","objectID":"/posts/tech/java/concurrencyparall/:0:0","tags":["并行\u0026\u0026并发"],"title":"并行\u0026\u0026并发","uri":"/posts/tech/java/concurrencyparall/"},{"categories":["Java","多线程"],"content":"Refer 参考 ","date":"2018-10-25","objectID":"/posts/tech/java/concurrencyparall/:1:0","tags":["并行\u0026\u0026并发"],"title":"并行\u0026\u0026并发","uri":"/posts/tech/java/concurrencyparall/"},{"categories":["Java"],"content":"Java基础概括 ","date":"2018-06-19","objectID":"/posts/tech/java/java-node/:1:0","tags":["Java学习随笔"],"title":"Java","uri":"/posts/tech/java/java-node/"},{"categories":["Java"],"content":"大图 ","date":"2018-06-19","objectID":"/posts/tech/java/java-node/:1:1","tags":["Java学习随笔"],"title":"Java","uri":"/posts/tech/java/java-node/"},{"categories":["Java"],"content":"Java ","date":"2018-06-19","objectID":"/posts/tech/java/java-node/:1:2","tags":["Java学习随笔"],"title":"Java","uri":"/posts/tech/java/java-node/"},{"categories":["Java"],"content":"设计模式 \u0026\u0026 算法 ","date":"2018-06-19","objectID":"/posts/tech/java/java-node/:1:3","tags":["Java学习随笔"],"title":"Java","uri":"/posts/tech/java/java-node/"},{"categories":["Java"],"content":"框架 \u0026\u0026 spring ","date":"2018-06-19","objectID":"/posts/tech/java/java-node/:1:4","tags":["Java学习随笔"],"title":"Java","uri":"/posts/tech/java/java-node/"},{"categories":["Java"],"content":"中间件 \u0026\u0026 其他 ","date":"2018-06-19","objectID":"/posts/tech/java/java-node/:1:5","tags":["Java学习随笔"],"title":"Java","uri":"/posts/tech/java/java-node/"},{"categories":["Java"],"content":"Java ","date":"2018-06-19","objectID":"/posts/tech/java/java-node/:2:0","tags":["Java学习随笔"],"title":"Java","uri":"/posts/tech/java/java-node/"},{"categories":["Java"],"content":"document Oracle Java tutorial ","date":"2018-06-19","objectID":"/posts/tech/java/java-node/:2:1","tags":["Java学习随笔"],"title":"Java","uri":"/posts/tech/java/java-node/"},{"categories":["Java"],"content":"List public class ArrayList\u003cE\u003e extends AbstractList\u003cE\u003e implements List\u003cE\u003e, RandomAccess, Cloneable, java.io.Serializable{} public class LinkedList\u003cE\u003e extends AbstractSequentialList\u003cE\u003e implements List\u003cE\u003e, Deque\u003cE\u003e, Cloneable, java.io.Serializable{} public class CopyOnWriteArrayList\u003cE\u003e implements List\u003cE\u003e, RandomAccess, Cloneable, java.io.Serializable {} List list = Collections.synchronizedList(new ArrayList(...)); ","date":"2018-06-19","objectID":"/posts/tech/java/java-node/:2:2","tags":["Java学习随笔"],"title":"Java","uri":"/posts/tech/java/java-node/"},{"categories":["Java"],"content":"Map ","date":"2018-06-19","objectID":"/posts/tech/java/java-node/:2:3","tags":["Java学习随笔"],"title":"Java","uri":"/posts/tech/java/java-node/"},{"categories":["Java"],"content":"Java 泛型（generics） Java Genrics is one of the most important features introduced in Java 5. What does the syntax mean in Java? Here \u003cE\u003e denotes the type parameter of Node class .The type parameter defines that it can refer to any type (like String, Integer, Employee etc.). Java generics have type parameter naming conventions like following: Java Generic Type Naming convention helps us understanding code easily and having a naming convention is one of the best practices of Java programming language. So generics also comes with its own naming conventions. Usually, type parameter names are single, uppercase letters to make it easily distinguishable from java variables. The most commonly used type parameter names are: E - Element (used extensively by the Java Collections Framework, for example ArrayList, Set etc.) K - Key (Used in Map) N - Number T - Type V - Value (Used in Map) S,U,V etc. - 2nd, 3rd, 4th types For example take the following scenerio public class Node\u003cE\u003e{ E elem; Node\u003cE\u003e next, previous; } class Test{ Node\u003cString\u003e obj = new Node\u003c\u003e(); } You can use generics with Interface,method and constructor too. For more about generics visit these: https://www.javatpoint.com/generics-in-java Generics in Java Generics was added in Java 5 to provide compile-time type checking and removing risk of ClassCastException that was common while working with collection classes. The whole collection framework was re-written to use generics for type-safety. Let’s see how generics help us using collection classes safely. List list = new ArrayList(); list.add(\"abc\"); list.add(new Integer(5)); //OK for(Object obj : list){ //type casting leading to ClassCastException at runtime String str=(String) obj; } Above code compiles fine but throws ClassCastException at runtime because we are trying to cast Object in the list to String whereas one of the element is of type Integer. After Java 5, we use collection classes like below. List\u003cString\u003e list1 = new ArrayList\u003cString\u003e(); // java 7 ? List\u003cString\u003e list1 = new ArrayList\u003c\u003e(); list1.add(\"abc\"); //list1.add(new Integer(5)); //compiler error for(String str : list1){ //no type casting needed, avoids ClassCastException } Notice that at the time of list creation, we have specified that the type of elements in the list will be String. So if we try to add any other type of object in the list, the program will throw compile-time error. Also notice that in for loop, we don’t need typecasting of the element in the list, hence removing the ClassCastException at runtime. https://www.journaldev.com/1663/java-generics-example-method-class-interface Why do we use Generics in Java? Generics provide strong compile-time type checking and reduces risk of ClassCastException and explicit casting of objects. What is T in Generics? We use to create a generic class, interface, and method. The T is replaced with the actual type when we use it. How does Generics work in Java? Generic code ensures type safety. The compiler uses type-erasure to remove all type parameters at the compile time to reduce the overload at runtime. refer reter 2 ","date":"2018-06-19","objectID":"/posts/tech/java/java-node/:2:4","tags":["Java学习随笔"],"title":"Java","uri":"/posts/tech/java/java-node/"},{"categories":["Java"],"content":"Java Annotations refer Java 1.5 introduced annotations and now it’s heavily used in Java EE frameworks like Hibernate, Jersey, and Spring. Java Annotation is metadata about the program embedded in the program itself. It can be parsed by the annotation parsing tool or by the compiler. We can also specify annotation availability to either compile time only or till runtime. import java.lang.annotation.Documented; import java.lang.annotation.ElementType; import java.lang.annotation.Inherited; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Documented @Target(ElementType.METHOD) @Inherited @Retention(RetentionPolicy.RUNTIME) public @interface MethodInfo{ String author() default \"Pankaj\"; String date(); int revision() default 1; String comments(); } ","date":"2018-06-19","objectID":"/posts/tech/java/java-node/:2:5","tags":["Java学习随笔"],"title":"Java","uri":"/posts/tech/java/java-node/"},{"categories":["Java"],"content":"todo ","date":"2018-06-19","objectID":"/posts/tech/java/java-node/:3:0","tags":["Java学习随笔"],"title":"Java","uri":"/posts/tech/java/java-node/"},{"categories":["Java"],"content":"java 链表 java ListNode 链表 ","date":"2018-06-19","objectID":"/posts/tech/java/java-node/:3:1","tags":["Java学习随笔"],"title":"Java","uri":"/posts/tech/java/java-node/"}]