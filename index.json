[{"categories":["生活"],"content":"视角 ","date":"2021-01-03","objectID":"/posts/life/sentence/:1:0","tags":["励志"],"title":"心灵鸡汤","uri":"/posts/life/sentence/"},{"categories":["生活"],"content":"邓宁-克鲁格心理效应 能力欠缺的人在自己欠考虑的决定的基础上得出错误结论，但是无法正确认识到自身的不足，辨别错误行为，是一种认知偏差现象。这些能力欠缺者们沉浸在自我营造的虚幻的优势之中，常常高估自己的能力水平，却无法客观评价他人的能力。 邓宁-克鲁格心理效应 知识加经验是开悟之路的关键 ","date":"2021-01-03","objectID":"/posts/life/sentence/:1:1","tags":["励志"],"title":"心灵鸡汤","uri":"/posts/life/sentence/"},{"categories":["生活"],"content":"随笔 世上只有一种真正的英雄主义，就是认清了生活的真相后依然热爱生活。 - 罗曼·罗兰的《米开朗基罗传》 生活，就是抱最大的期望，尽最大的努力，做最坏的打算，持最好的心态，记住该记住的，忘记该忘记的。 不要沉迷框架，修炼内功 提高英语阅读能力【google translate】 职场从来不缺普通的程序员 工作之外有自己感兴趣的东西 学会规划自己的时间，时间管理【be foucused、番茄todo】 学会安排自己的任务【Trello】 学会使用工具提升工作效率 学会休息，注意健康 对业务和产品比较敏感。 提升技术的深度、技术的广度、对业务和产品敏感的个人。 用最快的方式，提高自己的核心竞争力。 ","date":"2021-01-03","objectID":"/posts/life/sentence/:2:0","tags":["励志"],"title":"心灵鸡汤","uri":"/posts/life/sentence/"},{"categories":["生活"],"content":"大道至简 加油，把刷题变成打游戏一样的兴趣。 天道酬勤，凡事感激. 编程能力就像任何其他技能一样，也是一个可以通过刻意练习大大提高。 大多数经典面试题目都有多种解决方案。 为了达到最佳的练习效果，我们强烈建议您至少将此清单里的题目练习两遍，如果可以的话，三遍会更好。 在第二遍练习时，你可能会发现一些新的技巧或新的方法。 到第三遍的时候，你会发现你的代码要比第一次提交时更加简洁。 如果你达到了这样的效果，那么恭喜你，你已经掌握了正确的练习方法！ 记住：刻意练习并不意味着寻找答案并记住它，这种练习方法不是长久之计。 在没有参考答案情况下，越能自主解决问题，才越能提高自身能力。 ","date":"2021-01-03","objectID":"/posts/life/sentence/:3:0","tags":["励志"],"title":"心灵鸡汤","uri":"/posts/life/sentence/"},{"categories":["生活"],"content":"北大通知书 假如北大在你高一的时候就给你发了一张录取通知书，但是要想得到它的话，你需要在高中三年满足以下六个条件，你答应还是不答应？ 第一，每天早晨05:40起床，唤醒大脑，坚持晨读。 第二，每天坚持背50个单词。 第三，每天坚持复习昨天学过的内容。 第四，每周末坚持整理本周的数理化错题。 第五，经常思考学过的知识点，它背后的逻辑没有掌握好，就去重新学习。 第六，每天抽时间做体育锻炼。 等到三年以后，你只要满足以上条件，那这张录取通知书就生效，你愿意答应吗？ 我想你心中已经有了答案，但其实如果你三年能够坚持做到这六点事儿，完全可以自己考上北大。 ","date":"2021-01-03","objectID":"/posts/life/sentence/:4:0","tags":["励志"],"title":"心灵鸡汤","uri":"/posts/life/sentence/"},{"categories":["读书笔记"],"content":"关于书 《小狗钱钱-孩子和家长共同成长的金融读物》 [德]博多•舍费尔 著；王钟欣 余茜译 四川少年儿童出版社 引导孩子正确认识财富、创造财富的“金钱童话” ","date":"2022-12-11","objectID":"/posts/book/small_dog_money/:1:0","tags":["读书笔记"],"title":"[读书笔记]《小狗钱钱》","uri":"/posts/book/small_dog_money/"},{"categories":["读书笔记"],"content":"关于作者 博多•舍费尔 1960年9月10日出生在德国科隆。 16岁时移民美国。在加州一所高等学校毕业后，他先后在美国旧金山和墨西哥学习法律，之后在不同公司中担任各种重要职务。 26岁时他遭遇了个人经济危机-他的贸易公司陷人了财务危机，债台高筑。在财务顾问的帮助下，他开始实施个人发展战路。用不到4年的时间，他就摆脱了债务，并获得了源源不断的利息收人。 他决定把自己的理财经验与更多的人一起分享：他的著作被翻译成十几种语言在全球各地广为传播，并创下了 110周稳居德国图书排行榜首位的记录；他每年在欧洲各地的巡回演讲吸引了数十万人的热情参与。 他已经帮助成千上万的欧洲人在个人财务问题上取得了巨大的进步，成为欧洲第一理财大师，拥有“欧洲巴菲特”和“欧洲第一金钱教练”的美誉。 ","date":"2022-12-11","objectID":"/posts/book/small_dog_money/:2:0","tags":["读书笔记"],"title":"[读书笔记]《小狗钱钱》","uri":"/posts/book/small_dog_money/"},{"categories":["读书笔记"],"content":"前言 全书以一个小女孩和一个会说话的狗狗\"钱钱\"之间的故事为引线，叙述了关于理财的一些思维方法； 天下难事必作于易，天下大事必作于细; -《道德经》老子 天下间的难事一定是由容易的事情演变而成的，天下的大事一定是从细小处开始累积的。 类似，不积跬步，无以至千里；不积小流，无以成江海。 ","date":"2022-12-11","objectID":"/posts/book/small_dog_money/:3:0","tags":["读书笔记"],"title":"[读书笔记]《小狗钱钱》","uri":"/posts/book/small_dog_money/"},{"categories":["读书笔记"],"content":"财富法则 列举其中最重要的一些原则，这也是本书的线索。当你在故事中再次读到这些原则的时候，你的记忆就会加深，也会有更强烈的行动力。 一开始，必须明确金钱对你的意义。 确立最重要的目标。为什么我们必须特别强调在我们“长长的愿望清单中”的某几个目标？ 为什么梦想储蓄罐和梦想相册很重要？我们的潜意识如何支持看我们？我们为此需满足哪些前提条件？ 为什么仅有较高的收人绝不可能解决我们的财务难题？ 如何使我们不放弃已经作出的决定–想象的艺术。 总会有一些人想要阻止我们实现自己的目标，阻力然至经常来自我们的来成朋友，但还是有一些不让自己迷失的方法 为什么一本成功日记能促使我们的收人不断地增加？为什么自信是最关键的因素？ 人们如何将自己最大的爱好作为职业，并由此再次大幅度提高自己的收入？ 重要性和紧迫性之间有什么区别？如何保证在任何情况下都不偏离制订的目标？ 付诸实施的关键：72小时规定 如何以轻松的方式挣到许多钱？ 关于如何处理债务的4个忠告。 一只下金蛋的鹅的故事–人们如何量入为出 如何正确使用银行并使之成为一种乐趣？ 幸福的本质以及我们如何才能获得更多的幸福。 爱钱有什么不对吗？保险箱里留多少现金比较合适？ “金钱是‘中性’的”指的是什么意恩？钱与幸福之间有什么联系？ 归还我们的一部分所得是十分重要的。（做慈善和公益事业，） 对待恐惧的最佳方式。成功日记所起的作用。 增加金钱的最有效途径之一：投资俱乐部。保证成功的5条规定。 白手起家的魔法。 适用于所有投资的了条最重要的规定。 什么是股票？股票是如何运作的？收益是如何产生的？ 你是否造合股票投资？ 为什么偶尔放弃熟悉的环境、从事我们畏惧的事情很重要？ 怎样确保每年获得12%以上的利息？近乎完美的投资形式和投资战略是什么？ 为什么股票基金是保险的，而且可以为你带来丰厚的利润？挑选保险的基金的 3个注意事项。 投资基金为什么很简单？ 在投资基金的情况下，你的钱变成了什么-利滚利的力量 浮动利率：如何乎衡风险和赢利。 如何轻松地计算利息与复利？ 当汇率下跌时应 当做什么？如何在这种情况下获得高额利润？ 用基金获得可靠的高利润的前提。 通货膨胀的真正含义以及如何轻松计算出它对财产的影响。如何使通货膨胀成为你最好的朋友—当你正确选择投资对象时。 金钱对我们生活中的其他领域会产生什么影响？当我们更多地研究金钱这个题目时，将会发生怎样的变化？ ","date":"2022-12-11","objectID":"/posts/book/small_dog_money/:3:1","tags":["读书笔记"],"title":"[读书笔记]《小狗钱钱》","uri":"/posts/book/small_dog_money/"},{"categories":["读书笔记"],"content":"一切皆有可能 只需要一点思想的火花就足以让你走上富裕的道路。可是在这里，我还想提醒你注意一个令人惊讶的事实，在某种程度一旦丰厚的资产开始流动，其上也作为一个预先的提醒-速度之快和数量之大都可能让你吃惊： 以前它们都藏到哪里去了？ 这个现象还纠正了广为流传的错误观点一人们只能通过多年艰苦的工作才能实现富裕。财富应该是某种思想观点、某种以富裕为导向的信仰的产品。只要满足了这些前提条件，那么这一切比大多数人想象的都要简单得多。 ","date":"2022-12-11","objectID":"/posts/book/small_dog_money/:3:2","tags":["读书笔记"],"title":"[读书笔记]《小狗钱钱》","uri":"/posts/book/small_dog_money/"},{"categories":["读书笔记"],"content":"忽视是一种认输 大多数人对自己的财务状况关心得不够。在这方面，他们像一个了岁的孩子，只会闭上眼睛想：反正现在看不见它了。财务问题始终存在，如果我们对它不闻不问，它就会变成一种消极力量，降低我们的生活质量。忽视财务问题，就是放弃成功的机会。 财务自曲是今天每个人都可能实现的目标，当然这需要我们拥有進求自己真正想要的生活的勇气。正如一向名言所说：“并非國难使我们放弃，而是因为我们放奔，才显得如此困难。 ","date":"2022-12-11","objectID":"/posts/book/small_dog_money/:3:3","tags":["读书笔记"],"title":"[读书笔记]《小狗钱钱》","uri":"/posts/book/small_dog_money/"},{"categories":["读书笔记"],"content":"明确目标，并经常查看目标 1.明年夏天参加交换学生项目去美国，提高自己的英语水平。 2.一台笔记本电脑。 3.帮爸爸妈妈还清债务，让他们不再那么伤心， “很好的愿望，你做了很聪明的选择。〞钱钱兴奋地说，“我要祝贺你！” 我心里洋滥着自豪感。可是我还是不明白做这个练习到底有什么意义。钱钱又一次看出了我的想法，马上回答说：“大多数人并不清楚自己想要的是什么，他们只知道，自己想得到更多的东西。你可以把自己的生活想象成一家很大的邮购公司如果你给一家邮购公司写信说 ‘请给我奇一些好东西来’，你肯定什么都得不到。我们的愿望也是一样。我们必领确切地知道自自己心里渴望的是什么才行。” 我有点怀疑：“是不是只要我明确知道自己想要什么，就真的能实现呢？ “当然你还要为此付出努力，”钱钱答道，“但是至少你已经迈出了关键的第一步。 “是因为我写下了自己的愿望吗？”我问道。 “是的。”钱钱说，“从现在开始，你必须每天都把这张写着自己的愿望的单子从头到尾看一遍，它会不断地提醒你自己想得到什么，那么你就会密切关注一切可以帮助你实现这些愿望的机遇了。” “我想知道，这种方法会不会有效？” 我有些怀疑的问到。 “如果你带者这样一种态度来做这件事的话，我的方法肯定发挥不了作用。但是只要你做3件事，就可以轻易改变白己的想法。 第一，我建议你拿一本相册作为你的梦想相册。收集一些与自己的愿望有关的照片，把它们贴在相册里。我们要通过图片来思考。 就是说，不借助文宇。”钱钱，“当你想到加利福尼亚的时候，你的脑海里浮现出的是‘加利福尼亚，这几个字，还是某一幅画面？” 钱钱说得有道理，我的眼前立刻浮现出迪士尼乐园、旧金山和好菜坞的画面。 “那我到哪里去找这些照片呢？” 我问钱钱。 钱钱用一种奇怪的眼神看着我，好像在嘲笑我似的。 “好吧，”我赶紧说，“笔记本电脑的照片我可以从广告里剪不来，头于美国的照片我也许可以向交换学生机构要。可是尽管如此，我还是不太明白为什么要做这些。 有的时候我们不需要完全明白这种方法为什么有效，也不必管它是怎样起作用的，关键是它有效。” 我想起钱钱剛才说过，只要做到了什事，我就会相信自己的愿望真的可以实现。 第一件事就是准备一本相册，贴满与我的梦想有关的照片。那么另外的两件事是什么呢？ 我立即得到了回答：“第二件你可以做的事，就是每天看八遍相册，然后想象着，你已经在美国了，已经拥有笔记本电脑了还要想象你替爸爸还清债务后自豪的神情。 我诧异地说：“这和做梦是一样的呀！可是妈妈总是告诉我，不要做白日梦。” 钱钱耐心地解释道：“人们把这种行为称作 ‘视觉化’。成功的人之所以成功，就是因为他们一直梦想着自己成功的那一天不停地想象着自己实现了理想时的情形。当然，人不能停留在梦想里，你妈妈要对你说的是这一层意思。” 我觉得这一切都显得很可笑。这跟我设想中的关于金钱的第一课完全不同。 “这就叫学习”钱钱的回答，“学习就是认识新观念和新想法的过程。假如人们始终以同一种思维方式來思考问题的话，那么始终只会得到同祥的结果。 因为我对你讲述的许多内容是你以前从未接触过的，所以我建议你，在你还没有做之前，不要轻易下结论。没有想象力的人是很难成就大事的。我们对一件事投入的精力越多，成功的可能性也越大。 ","date":"2022-12-11","objectID":"/posts/book/small_dog_money/:4:0","tags":["读书笔记"],"title":"[读书笔记]《小狗钱钱》","uri":"/posts/book/small_dog_money/"},{"categories":["读书笔记"],"content":"我该到哪里去挣钱？ “我给你讲一个有趣味的放事，一个名叫达瑞的美国男孩，他在17的时候就已经挣到了几百万马克，而他其实只不过是一个非常普通的男孩。但是在讲故事之前，我先要告诉你一个非常重要的道理： 你是否能挣到钱，最关键的并不是你有没有好点子，也不是你有多聪明，而是你的自信程度。” “我的自信程度？”我重复着钱钱的话，又问道，“这和挣钱有什么关系呢？” 钱钱一脸严肃地直立起来，它是在向我表明，这是非常重要的内容：“你的自信程度决定了你是否相信自己的能力，是否相信你自己。假如你根本不相信你能做到的话，那么你就根本不会动手去做， 假如你不开始去做，那么你就什么也得不到。\" 这就是自信。 ","date":"2022-12-11","objectID":"/posts/book/small_dog_money/:4:1","tags":["读书笔记"],"title":"[读书笔记]《小狗钱钱》","uri":"/posts/book/small_dog_money/"},{"categories":["读书笔记"],"content":"如何树立自信？ “我不觉得自己特别自信。” 〝那没关系，”钱钱说，“自信是很容易树立的。你想知道应该怎样做吗？” “当然了。，我赶紧回答。 “那么我可以告诉你。你去准备一个本子，给它取名叫 ‘成功日记’，然后把所有做成功的事情记录进去。你最好每天都做这件事，每次都写至少5条你的个人成果，任何小事都可以。 开始的时候也许你觉得不太容易，可能会问自己，这件或那件事情是否真的可以算作成果。在这种情况下，你的回答应该是肯定的。过于自信比不够自信要好得多。” 钱钱想了一会儿，然后接着说：“你最好立即开始做这项工作。我们一会儿晚饭后再见。到那时我会给你讲达瑞的故事。 我很想立即听到达瑞的故事，可是我越来越信任钱钱了相信它的安排是有道理的。看上去似乎所有的事情都在它的掌握之中，所以我同意了。我们一起散步回家。 一回到家，我就钻进自己的房间。我拿出一本旧的练习本， 这是我以前的化学作业本。我把写了字的几张纸撕掉，然后在本子的封面上贴了一张新的标签，写上“成功日记” 我写下今天的日期，准备开始我的第一篇成功日记。我目不转睛地盯着面前的白纸，我昨天都做成什么事了呢？想了好一会儿，除了淮备梦想储蓄罐这件事，我什么都想不起来了。 〝故事是这样开始的。在达瑞8岁的时候，有一天，他想去看电影但是没有钱。他面临一个基本的问题，是问爸爸妈妈要钱还是自己挣钱。最后他选择了后者。他自己调制了一种汽水，把它放在街边，向过路的行人出售。可那时正是寒冷的冬天，没有人来买，只有两个人例外他的爸爸和妈妈。 “他偶然得到了一个机会，可以与一位非常成功的商人谈话。当他对商人讲述了自己的‘破产史’后，商人给了他两个重要的建议：第一，为别人解决一个难题，那么你就能赚到许多钱；第二，把精力集中在你知道的、能做的和拥有的东西上。 “这两个建议很关键。因为对于一个8岁的男孩而言，他不会做的事情有很多。于是他一边沿着大街小巷漫步，一边不停地思考人们会有什么难题，他又该如何利用这个机会为他们解决难题。 “这其实很不容易。好点子似乎都躲起来了，他什么办法都想不出来。但是有一天，他的爸爸无意中给他指出了一条路。吃早饭时，爸爸让达瑞去取报纸。这里必领补充一点，美国的送报员总是把报纸塞进花园篱笆上挂着的报箱里。假如你想穿着睡衣舒舒服服地一边吃早饭一边看报的话，就必领先离开温暖的房间，冒着寒风到房子的人口处去取。即使在天气不好的时候也是如此。 “情况顺景的时候，人人都能赚到线。只有在逆境中，一切才能见分销。\" 钱我对我点了点头，说：“困难总是在不断地出现。尽管如此，你每天还是要不间断地去做对你的未来意义重大的事情。你为此花费的时间不会超过10分钟，但是就是这10分钟会让一切变得不同。大多数人总是在现有的水平上停滞不前，就是因为他们没有拿出这10分钟。他们总是期望情况能向有利于自己的方向转变，但是他们忽视了一点，那就是他们首先必须改变自己\" 钱钱停了停，又接着说：“这10分钟就是你用来改变自己的最好机会。你最好现在大声地发誓，从现在开始会不间断地记录你的成功日记，并且不间断地设想你的末來。而且不论在什么情况下，每天都坚持这么做。。 我举起右手宣暂：我要从现在开始，每天记录我的成功，并不间断地设想我的未来，我发誓。 〝第二点，”钱钱说，“在—切进展非常顺利的情况下，你也应该做这些事情。”我疑恐不解地望着它。它这么说是什么意思呢？ “你有成干上万件事情可能让你分心，因此你每天应该在固定的时间里，有规律的做这些事情。” 一个规律，“当你决定做一件事情的时候，你必须在72小时之内完成，否则你很可能永远不会再做了。\" 我要在72小时内完成我決定要做的事情。 “大多数人都认为工作肯定是一件艰苦而令人不愉快的，他向我解释道，“其实只有做自己喜欢的事情的人，才能真正获得成功。\" ","date":"2022-12-11","objectID":"/posts/book/small_dog_money/:4:2","tags":["读书笔记"],"title":"[读书笔记]《小狗钱钱》","uri":"/posts/book/small_dog_money/"},{"categories":["读书笔记"],"content":"资产管理 “我以前的主人金先生有一家理财咨询公司。这家公司的作用就是教人们学会如何管理他们的财产。”钱钱意味深长地说。 金先生自己只为非常富有的顾容当顾问，但是他公司野许多工作人员会为那些在财务上遇到重大难题的普通人提供帮助。因为我可以到处跑，所以我常常听到他们的谈话。 从根本上说，那些陷人债务的人只要听从4个忠告就可以解决负债问题一切都很简单， 欠债的人应当毁掉所有的信用卡。 “因为大多数人在使用信用卡的时候，会比使用现金时花的钱要多得多。 在许可范国内按最低的分期付款数目标准支付。 将扣除生活费后剩下的钱的一半存起来，剩下的一半用于支付消费货款。最好根本不申请消费货款。 这个忠告是针对消费货款的。消费货款是与住房无关的贷款。假如人们为了购置新的汽车、家具、电视机或其他用于生活的商品而贷款，就是消费贷款。这时候贷款的人应当遵守的一个原则，就是将不用于生活的那部分钱的一半存起来，另一半用于偿还贷款。 所有的消费贷款都是不明智的。聪明的做法是只把以前积攒起来的财富用于支出。 这真的有必要吗？ 债务人都应该在自己的钱包里贴一张纸条，上面写着，这真有必要吗’。这样的话，当他站在收银合前的时候，就会想到不应该花太多的钱。 “幸运其实只是充分准备加上努力工作的结果\" 一个人挣钱的多少是和他的自信心联系在一起的。另外，他的精力究竟是集中在自己的能力范围之内，还是放到了他力所不能及的事情上，这也是很重要的一点。没有我的成功日记本，我就不会去思考自己适合在哪些方面赚钱。 你可以做一个有能力帮助别人的人，而别人也会相信你，愿意接受你的帮助。 ","date":"2022-12-11","objectID":"/posts/book/small_dog_money/:5:0","tags":["读书笔记"],"title":"[读书笔记]《小狗钱钱》","uri":"/posts/book/small_dog_money/"},{"categories":["读书笔记"],"content":"如何投资 和钱有关的绝大多数课程，你在和别人的谈话中都已经学过了。这些人本身都很富有，是最好的老师。 你现在只差一门重要的课程，就是怎样投资。 确定自己希望获得财务上的成功。 自信，有想法，做自己喜欢做的事。 把钱分成日常开销、梦想目标和金鹅账户三部分 进行明智的投资。 享受生活。 投资俱乐部规定： 每月聚会一次。 出席会议是每个成员的义务。 每人都要交出一定数额的现金。 不得将该钱取出，因为我们希望“鹅”长大。 所有的决策由全体成员共同作出。 聪明的商人可不会让自己的钱只躺在银行里睡大觉，这样做根本没有什么利息。 如果你没有做今天这件事情，你就永远不会知道，给自己一些压力之后，你能够做到些什么。一个人觉得最引以为自豪的事情，往往是那些做起来最艰难的事情。这一点你千万不要忘记。 ","date":"2022-12-11","objectID":"/posts/book/small_dog_money/:6:0","tags":["读书笔记"],"title":"[读书笔记]《小狗钱钱》","uri":"/posts/book/small_dog_money/"},{"categories":["读书笔记"],"content":"投资风险 最好的办法就是，我们把钱投在一只大型的基金上，5~10年之内根本不去看它。然后，等我们再去查看它的行情的时候，肯定已经得到了丰厚的利润。 金先生对我说过的一句话：不要为失去的东西而忧伤，而要对拥有它的时光心存感激。 ","date":"2022-12-11","objectID":"/posts/book/small_dog_money/:7:0","tags":["读书笔记"],"title":"[读书笔记]《小狗钱钱》","uri":"/posts/book/small_dog_money/"},{"categories":["读书笔记"],"content":"关于书 《断舍离.心灵篇》 山下英子; 王珊译 广西科学技术出版社 ","date":"2022-12-10","objectID":"/posts/book/throw/:1:0","tags":["读书笔记"],"title":"[读书笔记]《断舍离》","uri":"/posts/book/throw/"},{"categories":["读书笔记"],"content":"三种扔不掉东西的人 ","date":"2022-12-10","objectID":"/posts/book/throw/:2:0","tags":["读书笔记"],"title":"[读书笔记]《断舍离》","uri":"/posts/book/throw/"},{"categories":["读书笔记"],"content":"逃避现实型 真麻烦； 这种类型的人太忙碌，几乎没什么时间待在家里，所以也没办法收拾屋子。多数情況下，这种人都是对家庭有所不满， 不愿意待在家里，所以就找各种各样的事，让自己忙碌起来。加上家里乱七八糟的，所以就更不想待在家里了。慢慢地，在这样的恶性循环里越陷越深。 ","date":"2022-12-10","objectID":"/posts/book/throw/:2:1","tags":["读书笔记"],"title":"[读书笔记]《断舍离》","uri":"/posts/book/throw/"},{"categories":["读书笔记"],"content":"执着过去型 真可惜； 这种类型的人，即便是现在己经不会再用的过去的东西，也非得收着不可。相册、奖杯等等，统统当作命根子似的保管起来。 他们多半隐含着对过去幸福时光的留恋。从不想面对现实这一层意义上来看，与逃避现实型也有相通之处。 ","date":"2022-12-10","objectID":"/posts/book/throw/:2:2","tags":["读书笔记"],"title":"[读书笔记]《断舍离》","uri":"/posts/book/throw/"},{"categories":["读书笔记"],"content":"担忧未来型 也许有天会用到； 这种类型的人致力于投资不知何时会发生的未来的不安要素。这类人的特点是过分地囤积纸巾等日用品，要是没了这些就会觉得困扰、焦虑不安。 在三种类型当中，这一类的人最多。 ","date":"2022-12-10","objectID":"/posts/book/throw/:2:3","tags":["读书笔记"],"title":"[读书笔记]《断舍离》","uri":"/posts/book/throw/"},{"categories":["读书笔记"],"content":"断舍离 概念 “断舍离”的概念非常简单： “断”，断绝想买回家但实际上并不需要的东西， “舍”，舍弃家里的那些泛滥的破烂， “离”，脱离对物品的执念，处在游刃有余的自在空间。 ","date":"2022-12-10","objectID":"/posts/book/throw/:3:0","tags":["读书笔记"],"title":"[读书笔记]《断舍离》","uri":"/posts/book/throw/"},{"categories":["读书笔记"],"content":"以自我为轴心 通过斩 “断”不必要的物品的流入，“舍〞去形同废物的物品，我们就能从物品的拘束中脱 “离”出来。“断”与“舍”这两种行动（doing ）的交替重复，会带来 “离” (being）的状态。到了这时，无论是身体还是精神，都会产生巨大的变化。 “俯瞰力”就是此时应运而生的“观点”变化。 我们会从以物品为轴心的短视点，转变成以 “我” 为轴心来正确掌握空间（整体性）， 并进一步发展成为更深刻的洞察、更高远的观点以及更广阔的视野，俯瞰力就是这样的。 最重要的是要把空间里物品的总量减少到能让住在里面的我们觉得舒适的程度。这也就是说，要重新检讨放在家里的物品与我们的关系，取回那些被物品夺走的空间和能量。 如果是一直过着那种对物品的量没有意识、毫无自觉的生活，那么家里的物品就会不断地增加再增加。 明明家是自己的，却往往会以他人为思考的轴心来保存物品，这是每个人都有可能出现的问题。 断舍离的着重点是以自我为轴心，考虑“自己会使用吗”，以此来做物品的筛选工作。 ","date":"2022-12-10","objectID":"/posts/book/throw/:3:1","tags":["读书笔记"],"title":"[读书笔记]《断舍离》","uri":"/posts/book/throw/"},{"categories":["读书笔记"],"content":"做减法，让生命发光发热 “断“、“舍”、“离”这三个汉宇，全都有减法的含义。 这几个字是智慧的体现，也是文化的精髓。 失去原本应当拥有的智慧，一路做着加法走来的现代人，现在到了应当学习“崇尚不足的精神”、〝减法的解决法”这些智慧的时候。 ","date":"2022-12-10","objectID":"/posts/book/throw/:4:0","tags":["读书笔记"],"title":"[读书笔记]《断舍离》","uri":"/posts/book/throw/"},{"categories":["读书笔记"],"content":"读者反馈 ","date":"2022-12-10","objectID":"/posts/book/throw/:5:0","tags":["读书笔记"],"title":"[读书笔记]《断舍离》","uri":"/posts/book/throw/"},{"categories":["读书笔记"],"content":"扔掉看得见的东西，改变看不见的学问 “断舍离”具体如何指导生活，我举个简单的例子。在超市购物时，面对一样物品，我们不是思考“在搞促销活动耶，多买多划算啊” “这个东西真便宜”、“这样子真好看”，而是思考“我现在需要吗”、〝这个东西适合我吗”。要不要扔掉某物或者送给其他人也是如此，不是思考 “还没坏，还能用，所以留下来” 、“扔掉好可惜啊”，而是思考“我现在要用吗”、“我还很喜欢吗” ，我不需要的东西就果断地断舍离。 作者山下英子一再强调〝断舍离” 的主角是自己而不是物品，核心是让人思考 “物品和自己的关系”，而时间轴永远是现在。这不单单是一种家居整理、收纳术，而是活在当下的人生整理观。 通过学习和实践断舍离，人们将不断重新审视自己与物品的关系，致力于将身边所有 “不需要、不合适、不舒服” 的东西替换为 “需要、合适、舒服”的东西， 改变居住环境，改善生活面貌。断舍离的意 义不单单在于此，它是一种健康的生活方式，一种独特的思考法则，甚至是一种心灵的修行术。从关注物品转换为关注自我，通过物品来认识、发现、肯定白我，重新认识这个世界，改变肉眼看得见的世果，从而改善看不见的精神世界，让人从外在到内在，都彻底焕然一新。 书中举了一些有意思的例子。 有亲人过世十年仍无法走出悲伤的女士，以断舍离为契机，扔掉旧物，接受亲人过世这一痛苦事实。 一个老师，在冰箱里囤积了大量食物，有的食物甚至冰冻了好几年，原来是她当初当班主任工作压力过大导致她国积食物。 让我印象深刻的是阳子小姐的故事。她是位三十多岁的单身女性，原本就擅长整理，听了断舍离的讲座后更加干劲十足，扔了许多不需要的东西，包含不少社科类的书，但是装满言情小说的一箱书， 始终无法扔掉，书中所写的内容都是没有结果的恋爱。此时，她突然发现，这些书就是自己过去恋爱经历的写照。她总是和那些绝对不会有结果的人谈恋爱。在她的潜意识中， 似乎栖息着一个拒绝婚姻的自己。于是，她当机立断，将这一箱子书断舍离掉，自己也慢慢试着不再排斥婚姻。 ","date":"2022-12-10","objectID":"/posts/book/throw/:5:1","tags":["读书笔记"],"title":"[读书笔记]《断舍离》","uri":"/posts/book/throw/"},{"categories":["读书笔记"],"content":"扔东西的学问 你经常收拾屋子吗？你收拾屋子的时候，什么东西是你丟也丢不掉的呢？ 每一年，我都要买很多很多的衣服、书籍、小物品⋯很多衣服穿过一次便再末上过身，很多东西用过一次就遗忘在了小角落。 日积月累，我被愈来愈多的物件包围，喜怒哀乐都浸泡其中。不是没想过整理，只是很多时侯它们承载过一段回忆让我不知从何下手；不是没想过丢弃无用的东西， 但转念又觉得可惜，不如放着或许以后能用到。手是，这些东西虽然“不需要、不适合、不舒服”，可还是扔不掉， 直留在家中，理由就是执念。但却忽略了东西真正的价值应该是有用。我们总活在过去或未来，而偏偏忽视了最重要的当下 “只有对当下的自己合适且必需，也确实在用的东西，才该留在自己的空间里。”用时间轴看物品，是本书令我受益匪浅的一个观点。 这和我们在这个年代经历的物化是一样的。面对我借由消费来肯定自己的存在感，可是我消费的东西回过头来吞嗾自己的这种优虑。 这时候，我们是被物品车着鼻子走的人， 我们因为物品而萌生喜怒哀乐各种情绪。欲望是需要被穻越的，书中所提出的〝断舍离”的概念则将主角锁定在自己， 考虑的是自己还需不需要它。而“扔了很可惜，还是留下来吧”这种想法，就是拿物品当主角。 从一定程度上来说，一个人所使用的物品，能够反映出自我形象。了解自己，放下过去的自己，就能发挥出自己的潜能。这些都不是有意为之，而是自然而然地实现。而这种筛选物品的工作，也具有改变自己与他人关系的奇妙力量。 和物品成为好朋友，和自己喜欢的东西生活在一起，这就是断舍离的最终阶段。用关系轴看物品，是本书另一让我拍案称奇的观点。 生活处处充满着哲学，断舍离就是“扔东西”的学问。收拾屋子这一件看起来再平凡不过的事情却是一种磨砺感应能力的技术。 而扔掉家里的一件垃圾，这一个简单的动作竟也能磨砺你的内在智慧。书中讲述了 “断舍离”这一哲学价值观应用到人生中的案例。 阳子是个三十多岁的单身女人，通过断舍离，她终于明白自己为什么一直谈着没有希望的恋爱而结不了婚。 香织本来对生活感到茫然，连看电视也只是不断换台。 后来毅然将40英寸液晶电视断舍离，整个人从此豁然开朗。 亲人突然离世的胜美，十年来都无法接受亲人已死的事实。家中一团糟的厨房代表了她十年来的悲伤感叹，终于她决定断舍离，连续三天把堆积了十年的东西都消灭干净，房间焕然一新，痛苦好像也彻底殆尽了。原来，重要的回忆， 放在心里就好。 生活中，我们总是背负了太多垃圾在前行。我不禁感叹：〝原来人生中有那么多的东西是应该舍弃却因舍不得而被牵绊着的啊。〞让自己回到清简的日子，给之前的生活做减法再做减法，将身边 “不需要、不合适、不舒服”的东西替换成， “需要、合适、舒服”的东西。同理，就如张德芬在《断舍离》的序言里所说的：“想要幸福，我们需要先放下对幸福的执念。 ”断掉负面的思考，割舍眼前既有的幸福进而投资出更多的幸福，驱家要求更多的幸福欲求。这便是我从书中读到的智慧。 我有多久没有整理白己的人生了？ 合上书，我决定就从此刻开始收拾我的房间！ ","date":"2022-12-10","objectID":"/posts/book/throw/:5:2","tags":["读书笔记"],"title":"[读书笔记]《断舍离》","uri":"/posts/book/throw/"},{"categories":["读书笔记"],"content":"最简单的生活之道-从你的衣柜开始 因为对物品占有的原始本能或担忧未来，大多数人常常会毫无意识地储存一大堆自己或许并不怎么用或者根本用不上的物品。 绝大多数人的思维模式是–某个物品，我买下来了于是我就拥有它了，通过不断增加的对物质的占有，借此得到感官上的满足（通常情况下，这一类人潜意识会觉得，人生的幸福是通过不停地做加法得来的）。 事实上，这样想的人，常常是反被这些身外之物占有了。例奶，某人买了车，初心是想给自己带来方便（极少部分人还有一点从众炫耀的意识），但是买了车之后， 需要执照、维护、保险、加油、停车位、朋友借车、担心被损坏或被盗等等，反而占用了自己大量的精力和时间，从时间成本和经济成本上并不见得划算。有人会说买车之后更方便了， 比如说出去游玩的时候之类的，是的，但是人们有多少时间是出去玩的呢？更多的时候，正是因为有车才促使了自己要出门的次数，也就是说这并非是必要的出门，而是附加滋生出来的成本- 这类似于购买了智能手机后，我们表面上是拥有了手机，实际上反过来被手机占用了大最的时间。原本这些时间是可以用来做更多更丰富的事情的，反而被无意义的消耗和浪费了。 另外的情况就是自己根本就不需要的东西，却因为从众或炫耀而购买，正如我们常说的“活在了别人的眼里”，这种时候从某种意义上来说，是别人拥有了你的东西，而不是你自己所拥有。 因此，在你购买或拥有某些物品的时候，是你占有了车、房、手机、电视机、游戏机，还是你被这此东西反过来占有了？ 同理，一些感情方面上的需求也如此，有些人觉得自己过得不好是因为自己孤身一人的原因，认为“等有个人陪、结婚成家、有了孩子之后，生活就会更好更幸福一些” 一开始自己所认为的这些需要，并非是自己所设想的那样，最终却被恋爱家庭婚姻孩子等反过来牵绊了，动弹不得，成为人生烦恼的重要来源. 在《断舍离》一书中，作者山下英子提到， 一此家庭主妇因为贪图便宜或是担忧末来，常常会购买和储存一大堆用不上的东西。比如，明明家里有不锈钢的勺子，两三个就足够一整个家庭使用了，但是遇到商场或餐厅赠送的塑料勺子还是一股脑地带回家 堆积起来。 另外，一些人明明家里有更高档的器具，如高级杯子、高级不锈钢器皿，却因为“怕损坏、太可惜了、平时用没必要、这是有客人来的时候用的”等理由放着不用， 仍旧让类似用途的廉价物品像废水一样流进家里，堆积起来占用空间不说，因为“都拿回来了，不管怎样还是用一用吧，不然怪可惜的”的想法， 迫使自己一直用这些廉价甚至劣质的东西。作者说，大多数这样做的人，从心理层面上来说有很严重的自卑和自我否定的心态，觉得自己配不上高档货，自己只能在舍不得丢掉的便宜货里面打转，不得不说是很悲哀的。 关于物质，它所仅仅展示出来的是表象，常常反映出来的是心灵的状态，储存或占用自己并不需要的东西、在明明拥有更好的选择的情况 下却使用低廉的物品、让为数众多的用不上的废物充斥自己的生活空间等等行为， 说来就是极其不自信的心态造成的。从心理形成机制上来说，通常源自童年的物质匮乏或自卑心态造成的，继而深远地影响到了成年后的生活。 对物质的占有欲近乎贪婪，但却以节约等借口购买便宜的东西，使用低劣的物品。面对物质时，拥有严重的自卑心态，捡了芝麻，丢了西瓜，让用不上、不必要的劣质产品包围堵塞自己的居家佳所， 又反过来让心灵变得更加拥堵不堪，无法快乐自在的生活。 佛说，所有对身外之物甚至身内之物的执念，皆是因为看不清、看不开所造成的。世间事通常是有舍有得，而世人总会忘记这一点，只愿获得而鲜有人愿意舍弃。 一个杯子，杯内毫无一物的时候，是它能装载最多东西的时候； 较之成人，小孩子生活得更快乐，也是因为他们的心灵更像是白纸一般，简单干净无欲无念无车无挂。 “空” 代表着无限，放下欲念，才能拥有更广阔的空间。 许多真正的佛教徒，都过着深居简出的生活，越是修为高深的僧人，通常居佳之处也简单到极致，生活清简并没有使他们的生活更糟糕，反倒有了常人所没有的平静与宽容。 说到这里，或许有人要误认为我是在规劝大家要像僧人一样节俭清苦，实际上并不是，我本凡人，我们不如来看看文学家村上春树在关于买车这件事情上是怎么说的： “自己不买车，原因是一年到头根本用不了几次，自己生性懒散，觉得打理那个东西实在是麻烦，要出门，坐车的土新千线都可以，买车完全实在没有必要。” 最重要的是要知道自己的需要，而不是随波逐流，埋没于自己的欲念中。 说了这么多，简单来说无非就是：生活很简单，以“自己是否需要”为中心来考虑问题，择优选择生活中的一切需要，仅保留当下能够用到的，即可。 想来自己是此方法的受益者： 清理了卧室衣柜内一半以上的衣服，不管新的旧的好的坏的现在不穿的不喜欢的看着不舒服的全部扔掉，衣柜顿时变得很清爽； 扔掉了不怎么穿的一堆鞋子，满满的鞋架变空了，只剩下自己喜欢的鞋子； 朋友送的各种布满灰尘的物件和礼物，现在用得上的留下，用不上的就送给需要的朋友； 把手机上用不上不常用的软件，应用、游戏、电子书等等，管它喜欢的或是不喜欢的， 精简删除到最少，相册清空、图片清空、视频清空，手机运行更快更流畅了； 把工作电脑上收藏的堆得像瀑布一般的网页、储存的一大批看过的电影、不可能有时间看的一堆学习资料、一堆过期的工作文件等等，一股脑删除； 把QQ、电话簿、微信等上的联系人，不常联系、不再联系、不认识不喜欢的，全部删除，只剩自己喜欢或喜欢自己的人，发现自己真心的良师益友就那么几个也就足矣； 下定决心和并不爱的人说再见，虽有歉意和不舍，但相信分开以后，各自都能过得更好，等等。 从整理衣柜开始，当我理解到幸福的生活应该是在做减法之后，内心像是有很多杂质也一并清除了心中获得前所末有的宁静。我想在未来，应该还有更多的东西等着我去清理，比如已经困扰我许久的纷扰杂乱的工作， 再如已经堆满了各种新书和旧书的书架——对于我这爱书狂人，我想这应该是不小的考验—尤其在对待自己钟爱的事物上，放弃舍弃挣脱，才能真正根治我们心中根深蒂固的执念，脱离欲望的苦海。 刚刚开始去做这一切的时候，可惜、犹豫、难舍等感情会一直在头脑中盘旋斗争，常常扔掉的东西又拿回来，总感觉实在是无法舍弃，总感觉扔掉很可惜。 但是，如果最终狠下心舍弃后，会发现其实也还好，本来就用不上或者不好的东西，与其它们在阴暗的角落滋生灰尘，那和扔掉又有什么区别呢。 想来，活于世间，就没有什么无法舍弃的东西。一切执念，都只是我们自己为自己的头脑拷上的柳锁而已。 试想，一场跑步比赛，一个负重奔跑的人，怎会可能有一个双手空空轻松上阵的人轻松呢。从普通的成功几率来算，谁取胜的可能性更大？ 我们的物质和意识之间有种看不见的关联，清除物质，只为心灵让出空间–这很简单，从你的房间衣柜开始， 无论高档低廉无论有特殊意义还是无意义，勇敢地和那些你不能用、用不上、不喜欢的东西说再见！ 当你觉得有点\"可惜\"和\"难以取舍\"的时候，告诉自己要做更优秀更自信的自己，你的精力和时间不该浪费在这些不好的废物上，最后，洒脱潇洒地扔掉它。 最后，我们只需记住：占有绝非是拥有，放下才能拥有更多。 ","date":"2022-12-10","objectID":"/posts/book/throw/:5:3","tags":["读书笔记"],"title":"[读书笔记]《断舍离》","uri":"/posts/book/throw/"},{"categories":["读书笔记"],"content":"效率 效能，单位时间内产生的生产价值；提高效能意味着 使用相对少的时间，产生相对大的生产价值。 效率，在产生效能过程中的使用的方式方法等。 大到机构、公司、经济体，小到团队、个人等，提升效率，方可产生最大效能； 在这个竞争越来越激烈的时代，谁能提供生产效率，谁就可以早一步，抢先占领市场，降低被淘汰的风险。 对于个人，无论读书、工作、学习，均需要提高效率；竞争无处不在，我们需要用相对短的时间，学习更多的知识，提升自己的综合能力，才能走的更长远。 ","date":"2022-12-10","objectID":"/posts/book/how_to_read_book/:1:0","tags":["读书笔记"],"title":"[读书笔记] 如何阅读一本书","uri":"/posts/book/how_to_read_book/"},{"categories":["读书笔记"],"content":"《如何有效阅读一本书》 ","date":"2022-12-10","objectID":"/posts/book/how_to_read_book/:2:0","tags":["读书笔记"],"title":"[读书笔记] 如何阅读一本书","uri":"/posts/book/how_to_read_book/"},{"categories":["读书笔记"],"content":"关于书 《如何有效阅读一本书》 [日本] 奥野宣之 ","date":"2022-12-10","objectID":"/posts/book/how_to_read_book/:2:1","tags":["读书笔记"],"title":"[读书笔记] 如何阅读一本书","uri":"/posts/book/how_to_read_book/"},{"categories":["读书笔记"],"content":"前言 “—味读下去”等于没有读过 至今为止，你读过那么多书，到底记住了多少内容呢？ 如果有人问你最喜欢哪本书，你也许能回答对方一个书名，说“我还是学生的时候读过这本书，它对我有很大的帮助”，而当对方问起下面的问题，你会怎样回答呢？ 这本书讲了什么内容？ 你最喜欢书的哪一部分？ 这本书对你有什么影响？ 它的优点又在哪里？ 再认真回想一下，你会发现读书确实是件很难的事情： 人的记忆力是有限的，回想不起具体内容也情有可原，但是，你读书时有没有留下些随笔或者笔记呢？ 通过做笔记吸取书中营养 之所以说这种方法很简单，是因为你只需要准备一本笔记本。一本随处可见的笔记本可以帮你找到想读的书辅助你的阅读，记录你阅读中的发现，或是回忆过去读过的内容。 一本笔记本可以把读书生活的点点滴滴管理得井井有条。 就是这么简单。概括来说，需要记录的就是这些： 要买什么书 要注意书中的哪个部分 想到了什么 把以上几个问题写在笔记本上，然后保存起来，时常拿出来看看，慢慢养成习惯。这看起来是件很简单的事情，但很少有人能真正做到。只要坚持下去，觉得自己 “记忆力不好”的人也能准确地记住书中的内容，而“想要再读一遍那段文字” 的人也可以迅速找到喜欢的段落。 笔记本是读书的助手，可以把读到的信息以准确的形式转变为你思想中的一部分。多读法和速读法也许也能达到这种效果，但这种读书方法很复杂； 想不起来以前读过一本怎样的书、书里有什么名言；也许你无法理解、吸收书里的内容，这些问题都可以通过做笔记来改善， 本书所讲的读书方法句括以下四方面内容： 如何选书：怎样选择自己真正想读的书 如何购书：怎样买到对自己真正有益的书 如何读书：怎样加深理解、深入思考 如何活用：怎样运用从书中获得的知识在这样的过程后，书里的内容才会真正成为自己的东西。 看到这里，你会不会觉得我是在要求你“把所有的事情记在笔记本上”呢？其实并没有那么麻烦。举个例子接下来我会提到把想买的书记在 “购书清单”上、把读后购书选书 书的堆放与收纳：把没读过、没做过读书笔记的书都堆起来，读过的就放在普通书架上； ","date":"2022-12-10","objectID":"/posts/book/how_to_read_book/:2:2","tags":["读书笔记"],"title":"[读书笔记] 如何阅读一本书","uri":"/posts/book/how_to_read_book/"},{"categories":["读书笔记"],"content":"让读书体验更充实的几个技巧 ","date":"2022-12-10","objectID":"/posts/book/how_to_read_book/:2:3","tags":["读书笔记"],"title":"[读书笔记] 如何阅读一本书","uri":"/posts/book/how_to_read_book/"},{"categories":["读书笔记"],"content":"写读书笔记的 几 款实用文具 ","date":"2022-12-10","objectID":"/posts/book/how_to_read_book/:2:4","tags":["读书笔记"],"title":"[读书笔记] 如何阅读一本书","uri":"/posts/book/how_to_read_book/"},{"categories":["读书笔记"],"content":"《如何练就阅读力》 ","date":"2022-12-10","objectID":"/posts/book/how_to_read_book/:3:0","tags":["读书笔记"],"title":"[读书笔记] 如何阅读一本书","uri":"/posts/book/how_to_read_book/"},{"categories":["读书笔记"],"content":"关于书 -《如何练就阅读力》 凃梦珊著 一个阅读狂人的自白，从不爱看书到一年读完300本书 ","date":"2022-12-10","objectID":"/posts/book/how_to_read_book/:3:1","tags":["读书笔记"],"title":"[读书笔记] 如何阅读一本书","uri":"/posts/book/how_to_read_book/"},{"categories":["读书笔记"],"content":"如何提升阅读速度 舍弃完美主义 “你看电影的时侯会把人物的所有对白都记住吗？” “不会啊。” “一本书里，所有的文字都是金句吗？” “当然不是啊。” “那为什么你在阅读一本书的时候要从头到尾都读呢？” “我也不知道啊，就是不这么读，心里着实难受！” 在我被问到的问题中， “如何提升阅读速度”是出现频率最高的一个。当我观察对方是如何阅读的时候，我发现很名朋友都是从头到尾的进行读。 ","date":"2022-12-10","objectID":"/posts/book/how_to_read_book/:3:2","tags":["读书笔记"],"title":"[读书笔记] 如何阅读一本书","uri":"/posts/book/how_to_read_book/"},{"categories":["读书笔记"],"content":"没时间读书怎么办 管理你的阅读精力 在建立阅读习惯时，一定要警愓消极的条件反射，而心理暗示可以说是人类最简单的条件反射，大体上分为积极的和消极的。而消极的心理暗示又总比积极的更加强大。 比如当我对你说 “不要想粉红色的大象”时，你的脑海里出现的偏偏就是粉红色的大象。 这样的句义还会延伸出很多你不易察觉的形态，比如销售领域就经常应用这些消极的心理暗示来刺激人们的购买行为。房地产市场总宣传总量稀觖，这就属于消极的心理暗示。 这样做的结果就是，即使数据显示土地资源充足，我们也依然觉得只有买了才能消除资源不足所引起的紧张感。在紧张和压力下，人们容易做出错误的判断，降低自己的效能。我们可以让自己避免被大脑欺骗。 当你尽量用积极关键词替代消极关键词进行暗示时，剔除掉其中与否定性内容相关的词语和暗示词，你会更加高效和积极积极地行动。 比如，你常常对自己说 “我的效率很低，读的很慢”，不如改成“我有极大的空间可以提升我的阅读速度”。 日常生活中最常见的心理现象就是心理暗示了，利用好心理暗示的力量，可以让我们的阅读更有效率， 没有时间读书其实就是一种消极的心理暗示，这是伪命题。我相信任何人都有时间进行阅读，但是由于我们总是在无意识当中告诉自己：我没有时间去阅读， 这种消极的心理暗示才会不断地损耗你本来就很稀缺的注意力和精力。 我们可以把“没有时间读书怎么办？〞转换为 “我要如何去管理自己的精力，才能有更多的时间用于阅读呢？〞因为很多时候即使你有时间，你也是给了其他运动，比如打游戏或看电匙，而没有选择网读。 所以我认为这并不是时间的问题，而是不会管理时间的问题。 ","date":"2022-12-10","objectID":"/posts/book/how_to_read_book/:3:3","tags":["读书笔记"],"title":"[读书笔记] 如何阅读一本书","uri":"/posts/book/how_to_read_book/"},{"categories":["读书笔记"],"content":"高效学习 只有将自己的生活规划清楚，不同的时间段不会相互打扰，其他领域不会时常打扰你正在进行的阅读，你才能专心地去做一件事情。你要有一个规律且良好的生活方式，对于生活状况混乱的人而言，去解决这个问题的思路不能是：我要怎样才能够自律？这种思路是一种做加法的思考方式。 正确的方法是：我生活当中哪些混乱的部分是可以砍掉的？这是一种做减法的思考方式。 现在请你拿出一张白纸，列出一个清单，看看现在的生活当中哪些事情导致了你的混乱？哪些事情上你给了自己无效的选择？然后一个一个地去做减法，精简自己的选择。 ","date":"2022-12-10","objectID":"/posts/book/how_to_read_book/:3:4","tags":["读书笔记"],"title":"[读书笔记] 如何阅读一本书","uri":"/posts/book/how_to_read_book/"},{"categories":["读书笔记"],"content":"以教为师，通过知识分享完善自我思考 为什么我们会记得多年前看过的一部经典电影，却会忘记上周刚刚读过的一本书？这是因为视听语言本质上是一种非常口语化的语言，我们看到的图像与我们生活的世界十分接近。同时， 视听语言由于更加立体化而刺激了我们的记忆感官，让我们的记忆吸收率更高。如下图： 不同学习方式的吸收留存率 听讲5% 阅读10% 视听20% 演示30% 讨论50% 实践75% 教授给他人90% 不同学习方式的吸收留存率而在所有的学习方法中，能大幅提升我们阅读读理解效率的方式就是教授给他人了。 教授给他人決定了你对一个概念或知识的真正理解。也就是说，决定我们阅读效率的关键性指标并不是速度，而是理解率。很多朋友会单纯地认为，记住就是一种理解，其实，记住的东西并不代表我们真的理解了，但理解了的东西你一定深刻地记住了。 张五常先生也说过，我们在读书的时候，要追求以理解代替记忆，而想要让自己深刻理解某一个知识或概念，最高效的方法就是以要教授给他人的目标去阅读。 不同学习方式的吸收留存率，其中最高的是教授给别人，教的时候你的吸收留存率可高达90%。 教授给他人这个行为其实就是我们的阅读老师，所谓以教为师，就是让我们体会到：输出是更高效的输人。我们要善于利用去分享给他人的契机，甚至主动去寻找这样的分享，来帮助我们达到完善知识的目的。 我们可以利用去分享给他人的契机，来达到自我知识的完善。 教的方式有两种： 一种是通过口语化的表达； 一种是通过写作化的表达。 每一个人擅长的表达方式不同，但具有不同表达方式的人，可以通过自己擅长的输出;通道来重新检视自己的思考。 重新检视自己的思考之所以重要，是因为这种检视可以帮助我们用口语化的表达去代替抽象的概念和内容。 从上图中，我们可以举一反三； 比如在学校语言过程中，比如学习英语，如何提升听说读写能力，光听不够，需要背诵、多讲、交流，从整个过程中去学习； 我们也可以想想当初是怎样学习自己的母语。 ","date":"2022-12-10","objectID":"/posts/book/how_to_read_book/:3:5","tags":["读书笔记"],"title":"[读书笔记] 如何阅读一本书","uri":"/posts/book/how_to_read_book/"},{"categories":["读书笔记"],"content":"《如何成为一个会读书的人》 ","date":"2022-12-10","objectID":"/posts/book/how_to_read_book/:4:0","tags":["读书笔记"],"title":"[读书笔记] 如何阅读一本书","uri":"/posts/book/how_to_read_book/"},{"categories":["读书笔记"],"content":"关于书 -《如何成为一个会读书的人》 [日]渡边康弘 北京联合出版有限责任公司 ","date":"2022-12-10","objectID":"/posts/book/how_to_read_book/:4:1","tags":["读书笔记"],"title":"[读书笔记] 如何阅读一本书","uri":"/posts/book/how_to_read_book/"},{"categories":["读书笔记"],"content":"新阅读方法,即为自己而读 阅读，大体可以分为两种。 第一种，是理解“作者的观点、意图” 换句话说就是，从第一页的第一行开始看到最后一页的最后一行，一字不落、直线式地阅读常规的应试教育下要求学生必须正确理解文章。 所以，大家习惯于有条理地、有逻辑地理解作者在书里想表达的意见和观点。 碰到小说，就要去享受其体裁、节奏，让白己完全沉浸在故事情节中。既不能读得大快，要花费时间仔仔细细地读， 避免出现理解偏差，又必须要记住书里的内容。 提到读书，持有这种想法的人是非常多的。 另一种，是“为自己而读”； 这种阅读方法是从书里找出一些对自己的人生和日常生活有益的东西，并付诸行动。 ","date":"2022-12-10","objectID":"/posts/book/how_to_read_book/:4:2","tags":["读书笔记"],"title":"[读书笔记] 如何阅读一本书","uri":"/posts/book/how_to_read_book/"},{"categories":["读书笔记"],"content":"阅读七宗罪 如果能摆脱负罪感，肩上的负担就会轻松很多。到那时可能就会觉得当初是多么荒唐，竟然会因为阅读而心力交瘁。阅读可以更有趣，而且能够更加高效地学习各种知识。 负罪感一 要从第一页看到最后一页，不能有任何遗漏 负罪感二 要读书就必须专门腾出时间 负罪感三 看完记不住书里的内容 负罪感四 必须准确理解作者的观点和意见 负罪感五 不愿意在书上画线 负罪感六 有很严重的藏书不读问题 负罪感七 想看得快一点，可是又不愿意速读 负罪感一 要从第一页看到最后一页，不能有任何遗漏 只阅读自己所需的部分即可 负罪感二 要读书就必须专门腾出时间 短时间＋边休息边阅读的效率更高 负罪感三 看完记不住书里的内容 记不住看过的内容也无妨，进行回想练习即可 负罪感四 必须准确理解作者的观点和意见 比起作者的观点，找到对白己 “有用”的内容更重要 负罪感五 不愿意在书上画线 不用勉强自己非得在书上画线 负罪感六 有很严重的藏书不读问题 负罪感七 想看得快一点，可是又不愿意速读 用手指做辅助，既能看得快，还能有效地集中注意力 ","date":"2022-12-10","objectID":"/posts/book/how_to_read_book/:4:3","tags":["读书笔记"],"title":"[读书笔记] 如何阅读一本书","uri":"/posts/book/how_to_read_book/"},{"categories":["读书笔记"],"content":"作者的疑问 不妨遵循以下三个步骤去寻找作者的疑问。 步骤1：阅读书籍的封面和腰封 步骤2：确认作者的简历 步骤3：关注“所谓”，从“序章”和“结语”入手寻找作者的疑问 为了让书籍畅销，编辑与作者大多会将要传递的信息体现在书籍的装帧上。 ","date":"2022-12-10","objectID":"/posts/book/how_to_read_book/:4:4","tags":["读书笔记"],"title":"[读书笔记] 如何阅读一本书","uri":"/posts/book/how_to_read_book/"},{"categories":["读书笔记"],"content":"可以实现理性阅读的 PREP 法 下面介绍一下先思考纲要，边预测边阅读的输出型阅读方法。 有一种名为 PREP 法的输出式思考框架。即观点(Point)、理由 (Reason)、案例 (Example)、结论（Point）的模式。 在这个方法的指导下，阅读 “前言” “目录” “结语” 就能理解书本的大部分内容。 ","date":"2022-12-10","objectID":"/posts/book/how_to_read_book/:4:5","tags":["读书笔记"],"title":"[读书笔记] 如何阅读一本书","uri":"/posts/book/how_to_read_book/"},{"categories":["读书笔记"],"content":"概要 《金字塔原理》介绍了一种能清晰地展现思路的高效方法，是训练思考、使表达呈现逻辑性的实用宝典。金字塔原理能将零散的观点有序组织起来，化繁为简，适合所有需要精进思考、分析、表达能力的读者。 深入思考：建立金字塔思维，提取有价值的信息，找到问题的关键，将复杂的问题变得清晰简单。 解决问题：从基本事实切入直击要点，制定严谨合理的解决方案，突破瓶颈。 项目管理：明确目标，制定行动计划，根据MECE原则合理分配任务，不重叠、无遗漏。 清晰表达：陈述项目、演讲、讨论时，清晰呈现自己的观点，说服听众，与上级、同事、客户迅速建立共识，高效沟通。 轻松写作：挖掘读者的关注点、兴趣点、利益点，写出重点突出、条理鲜明的策划方案、分析报告、精彩文案和PPT，让人过目不忘。 ","date":"2022-11-13","objectID":"/posts/book/pyramidprinciple/:1:0","tags":["读书笔记"],"title":"[读书笔记] 《金字塔原理》","uri":"/posts/book/pyramidprinciple/"},{"categories":["读书笔记"],"content":"要点汇总 ","date":"2022-11-13","objectID":"/posts/book/pyramidprinciple/:2:0","tags":["读书笔记"],"title":"[读书笔记] 《金字塔原理》","uri":"/posts/book/pyramidprinciple/"},{"categories":["读书笔记"],"content":"第1章 为什么要用金字塔结构 为了交流方便，必须将思想（观点、结论、要点、论点、论据、建议、行动、步骤等）归类分组。 将分组后的思想，按照不同层次，进行抽象提炼、总结概括，搭建金字塔。 向读者介绍（传递、阐述、论证）思想最有效的途径，是结论先行，自上而下表达。 金字塔中的思想，应遵守4个基本原则（见右图）。 条理清晰的关键，是把你的思想组织成金字塔结构，并在写作前用金字塔原理检查。 关键概念 金字塔原理的 4个基本原则 结论先行： 每篇文章只有一个中心思想，并放在文章的最前面。 以上统下：每一层次上的思想必须是对下一层次思想的总结概括。 归类分组：每一组中的思想必须属于同一逻辑范畴。 逻辑递进：每一组中的思想必须按照逻辑顺序排列。 ","date":"2022-11-13","objectID":"/posts/book/pyramidprinciple/:2:1","tags":["读书笔记"],"title":"[读书笔记] 《金字塔原理》","uri":"/posts/book/pyramidprinciple/"},{"categories":["读书笔记"],"content":"第2章 金字塔内部的结构 金字塔结构的各个层级上包括各种思想；思想使受众（包括读者、听众、观众或学员）产生疑问。 在纵向方向上，各分支、各层级上的思想，与读者进行疑问/回答式对话。 在横向方向上，各种思想以演绎推理或归纳推理方式回答读者的疑问，但两种方式不可同时使用。 序言的讲故事形式是为了提醒读者，文章将回答的读者最初的疑问。 序言包括背景、冲突、读者的疑问和作者的回答。冲突因背景而产生，背景和冲突都是读者已知的事实。 冲突导致读者提出疑问，而文章将回答读者的疑问。 关键概念 金字塔结构中的逻辑关系 各种思想纵向相关（疑问／回答式对话）。 各种思想横向相关（演绎／归纳 ）。 金字塔顶端思想回答的疑问，来自读者已有的疑问。 序言引出读者最初的疑问。 ","date":"2022-11-13","objectID":"/posts/book/pyramidprinciple/:2:2","tags":["读书笔记"],"title":"[读书笔记] 《金字塔原理》","uri":"/posts/book/pyramidprinciple/"},{"categories":["读书笔记"],"content":"第3章 如何构建金字塔 自上而下法 确定作者想论述的主题 设想读者的疑问 给出答案 检查背景和冲突是否引发读者提出疑问 证实答案 填写关键句要点 自下而上法 列出所有作者想表达的要点 找出各要点之间的关系 得出结论 倒推出序言 关键概念 构建金字塔结构 确定主题 设想疑问 给出答案 检查背景和冲突是否引发读者提出疑问 证实答案 填写关键句要点 ","date":"2022-11-13","objectID":"/posts/book/pyramidprinciple/:2:3","tags":["读书笔记"],"title":"[读书笔记] 《金字塔原理》","uri":"/posts/book/pyramidprinciple/"},{"categories":["读书笔记"],"content":"第4章 序言的具体写法 序言的目的是提示读者已知的信息，而不是提供新信息。 序言通常包括背景、冲突、读者的疑问和作者的答案。 序言的长短，取决于读者的需要和主题的要求。 为每个关键句要点写一段引言。 关键概念 写序言 说明背景 指出冲突 冲突引发读者提出疑问 作者的文章给出答案 ","date":"2022-11-13","objectID":"/posts/book/pyramidprinciple/:2:4","tags":["读书笔记"],"title":"[读书笔记] 《金字塔原理》","uri":"/posts/book/pyramidprinciple/"},{"categories":["读书笔记"],"content":"第5章 演绎推理与归纳推理 演绎推理是一种论证，其中### 第二个论点对### 第一个论点加以评论，### 第三个论点说明前两个论点同时存在时的含义。 对演绎推理的概括，就是把最后一个论点作为主体，概括整个推理过程。 归纳推理是把具有相似性的思想归类分组，根据各要点具有的共同性得出结论。 在关键句层次，使用归纳推理比演绎推理更方便读者理解。 关键概念 逻辑推理 演绎推理，是一系列线性推理过程。 归纳推理，是把相似的、具有共同点的思想或相关的行动归类分组。 在关键句要点层次，使用归纳推理，比演绎推理更利于读者理解。 ","date":"2022-11-13","objectID":"/posts/book/pyramidprinciple/:2:5","tags":["读书笔记"],"title":"[读书笔记] 《金字塔原理》","uri":"/posts/book/pyramidprinciple/"},{"categories":["读书笔记"],"content":"第6章 应用逻辑顺序 应用逻辑顺序可以确保你不会： 把新闻条目当做思想列入 遗漏某一组中重要的思想 任一组思想的逻辑顺序都呈现了该组思想的分组基础。 时间顺序：通过设想某一流程，得出的思想。 结构顺序：通过评论某一结构，得出的思想 程度顺序：通过按程度或重要性不同分组，得出的思想。 如果你在某一组思想中找不到以上顺序，说明这些思想之间不存在逻辑关系，或者你的思考还不周全。 为了检查一组思想的逻辑顺序，你可以： 先把每一个句子改写成能说明其实质的短句（即只保留主语、谓语、宾语，删除定语、状语和补语，只保留动词、名词，删除形容词、副词）。 再把相匹配或具有共同点的句子合并同类项，组织在一起。 最后选择使用适当的顺序。 如果思想属于行动性思想（即说明行动、活动、行为、动作、步骤、流程等） 明确说明每一行动产生的最终结果（效果、目标）。 把能产生同样最终结果的行动（行为、步骤等）归类分组。 确定该组思想的分组基础（类别），并依此排序。 检查是否遗漏了任何步骤。 关键概念 将行动性思想（说明行动、活动、行为、步骤、流程）排序 明确说明每一行动产生的最终结果。 把能产生相同最终结果的思想合并、归类、分组。 确定该组思想的分组基础，并依此排序。检查是否遗漏了任何步骤。 如果思想属于描述性思想（即介绍观点、情况、信息等） 把说明类似事务，或具有共同点的思想归类分组。 确定该组思想的分组基础（找出相似之处、共同点）。 关键概念 归纳组合逻辑顺序共有3种 时间顺序：通过设想某一流程得出的思想。 结构顺序：通过评论某一结构得出的思想。 程度顺序：通过按程度或重要性的不同分组，得出的思想。 关键概念 将描述性思想（介绍观点、论点、论据、情况、信息）排序 把说明类似事务、或具有共同点的思想归类、合并、分组。 确定该组思想的分组基础。 把所有思想转换成完整的句子，并决定其顺序。 检查是否遗漏了任何步骤。 ","date":"2022-11-13","objectID":"/posts/book/pyramidprinciple/:2:6","tags":["读书笔记"],"title":"[读书笔记] 《金字塔原理》","uri":"/posts/book/pyramidprinciple/"},{"categories":["读书笔记"],"content":"第7章 概括各组思想 避免使用“缺乏思想”的句子（比如“存在3个问题……”等）。 分组应遵守“相互独立不重叠，完全穷尽无遗漏”（MECE）原则。 行动总是按时间顺序进行，通过说明行动产生的直接结果，概括行动性思想。 把描述性思想归类分组，是因为该组思想具有共同特性，它们都： 针对同一类主语- 针对同一类谓语（动作或对象） 包含同一类判断 关键概念 概括各组思想 通过说明行动产生的直接结果，概括行动性思想（概括一组行动）。 通过说明各思想具有的共同点、相似性，概括描述性思想（概括一组信息）。 关键概念 寻找思想的共同点 各思想是否针对同一类主题 各思想是否涉及同一类行动 各思想是否针对同一类对象 各思想是否包含同一类观点 将行动性思想分组时，要求： 发掘每一个行动的本质 区分不同的抽象层次（比如，采取一项行动，是必须在另一行动开始之前，还是为了完成另一行动？） 明确说明行动产生的最终结果 直接由行动概括出结果 关键概念 行动性思想分组 发掘每个行动的实质区分行动的不同层次明确说明行动性思想产生的最终结果（效果、目标）直接由行动概括出结果 将描述性思想分组时，要求： 找出句中结构的共同点 确定包括这些思想的最小范畴 说明共同点隐含的意义 关键概念 描述性思想分组 找出主语、谓语、宾语或含义的共同性确定包括这些思想的最小范畴说明共同性隐含的意义 ","date":"2022-11-13","objectID":"/posts/book/pyramidprinciple/:2:7","tags":["读书笔记"],"title":"[读书笔记] 《金字塔原理》","uri":"/posts/book/pyramidprinciple/"},{"categories":["读书笔记"],"content":"第8章 界定问题 展开“问题”的各要素 切入点/序幕（产生问题的具体领域、方面） 困扰／困惑（它的发生打乱了该领域的稳定） 现状R1（你不喜欢该方面正在产生的结果） 目标R2（你希望在该方面得到的结果） 答案（到目前为止，针对问题已经采取的措施，如果采取了的话）。 疑问（为了解决问题，必须做什么） 把界定的问题转换成序言 从左往右再往下 读者最后知道的事实就是冲突 关键概念 界定问题 设想问题产生的领域 说明什么事情的发生打乱了该领域的稳定（困扰／困惑） 确定非期望结果（现状，R1） 确定期望结果（目标，R2） 确定是否已经采取了解决问题的行动 确定分析所要回答的疑问 ","date":"2022-11-13","objectID":"/posts/book/pyramidprinciple/:2:8","tags":["读书笔记"],"title":"[读书笔记] 《金字塔原理》","uri":"/posts/book/pyramidprinciple/"},{"categories":["读书笔记"],"content":"第9章 结构化分析问题 使用诊断框架，呈现存在问题领域的详细结构，展示一个系统内的各个单位是如何相互影响的。 查找具有因果关系的活动 将产生问题的可能原因进行分类 收集资料，以证明或排除结构中导致问题产生的部分 使用逻辑树 产生和检验解决方案 揭示思想一览表的内在关系 ","date":"2022-11-13","objectID":"/posts/book/pyramidprinciple/:2:9","tags":["读书笔记"],"title":"[读书笔记] 《金字塔原理》","uri":"/posts/book/pyramidprinciple/"},{"categories":["读书笔记"],"content":"第10章 在书面上呈现金字塔 用多级标题、行首缩进、下划线和数字编号的方法，突出显示文章的整体结构 表现金字塔结构中主要组合之间的过渡。 表现金字塔结构中主要思想组之间的过渡。 ","date":"2022-11-13","objectID":"/posts/book/pyramidprinciple/:2:10","tags":["读书笔记"],"title":"[读书笔记] 《金字塔原理》","uri":"/posts/book/pyramidprinciple/"},{"categories":["读书笔记"],"content":"第11章 在PPT演示文稿中呈现金字塔 制作文字幻灯片，应尽量简明扼要。 制作图表幻灯片，使传达的信息更简单易懂；在幻灯片的上部说明要传达的信息。 使用故事梗概，简要说明整体结构。 排练，排练，再排练！ ","date":"2022-11-13","objectID":"/posts/book/pyramidprinciple/:2:11","tags":["读书笔记"],"title":"[读书笔记] 《金字塔原理》","uri":"/posts/book/pyramidprinciple/"},{"categories":["读书笔记"],"content":"第12章 在字里行间呈现金字塔 画脑图（在大脑中画图像，或画思维导图） 把图像复制成文字 ","date":"2022-11-13","objectID":"/posts/book/pyramidprinciple/:2:12","tags":["读书笔记"],"title":"[读书笔记] 《金字塔原理》","uri":"/posts/book/pyramidprinciple/"},{"categories":["生活"],"content":"沟通的技巧 沟通-换位思考 ","date":"2022-11-01","objectID":"/posts/life/interesting/:1:0","tags":["图片"],"title":"一些引人深思的图片","uri":"/posts/life/interesting/"},{"categories":["生活"],"content":"视角 视角 ","date":"2022-11-01","objectID":"/posts/life/interesting/:2:0","tags":["图片"],"title":"一些引人深思的图片","uri":"/posts/life/interesting/"},{"categories":["生活"],"content":"当幸福来敲门 看过N遍的电影，记忆最深刻的台词： 当人们做不到一些事情的时候，他们就会对你说你也同样不能。 不要让别人告诉你，你不能做什么。 只要有梦想，就要去追求。 那些做不到的人总要告诉你，你也不行。 想要什么就得去努力，去追求。 克里斯用尽全部积蓄买下了高科技治疗仪，到处向医院推销，可是价格高昂，接受的人不多。就算他多努力都无法提供一个良好的生活环境给妻儿，妻子最终选择离开家。从此他带着儿子相依为命。克里斯好不容易争取回来一个股票投资公司实习的机会，就算没有报酬，成功机会只有百分之五，他仍努力奋斗，儿子是他的力量。他受尽白眼，与儿子躲在地铁站里的公共厕所里，住在教堂的收容所里…… 他坚信，幸福明天就会来临 ","date":"2022-10-07","objectID":"/posts/life/movie/inspriemovies/:1:0","tags":["电影"],"title":"情绪低落时，可以看下这些电影，自我治愈","uri":"/posts/life/movie/inspriemovies/"},{"categories":["生活"],"content":"垫底辣妹 高中女孩工藤沙耶加终日和小姐妹们吃喝玩乐，学习掉到了全年级倒数第一也毫不为意。温柔勤苦的妈妈为女儿的未来焦虑万分，因此将沙耶加送到了坪田所开办的补习班。经过水平测试，沙耶加实际只有小学四年级的水平，不过开朗自信的坪田不以为意，他以特有的方式打开女孩的心防，两人很快成为好朋友。在坪田的帮助下，沙耶加对学习的态度逐渐浓厚，后来更立下了考取庆应大学的宏愿。 电影改编自真实故事，主题不算新颖，一部差生的逆袭史，却打动人心，正如电影中所说“不管周围人怎么说你不行，充满自信地继续说出你的梦想的力量，不怕嘲讽和失败，勇于挑战梦想的力量，对我来说是多么耀眼。” ","date":"2022-10-07","objectID":"/posts/life/movie/inspriemovies/:2:0","tags":["电影"],"title":"情绪低落时，可以看下这些电影，自我治愈","uri":"/posts/life/movie/inspriemovies/"},{"categories":["生活"],"content":"风雨哈佛路 《风雨哈佛路》是一部催人警醒的励志电影。 影片介绍了一位生长在纽约的女孩丽兹经历人生的艰辛和辛酸，凭借自己的努力，最终走进了最高学府的经历。 丽兹出生在美国的贫民窟里，父母酗酒吸毒，母亲患上了精神分裂症。贫穷的丽兹需要出去乞讨，流浪在城市的角落，生活的苦难似乎无穷无尽。 随着慢慢成长，丽兹知道，只有读书成才方能改变自身命运，走出泥潭般的现况。她从老师那里争取到一张试卷，漂亮的完成答卷，争取到了读书的机会。她千方百计申请哈佛的全额奖学金，面试时候连一件像样的衣服也没有。然而，贫困并没有止住丽兹前进的决心，在她的人生里面，从不退缩的奋斗是永恒主题。 ","date":"2022-10-07","objectID":"/posts/life/movie/inspriemovies/:3:0","tags":["电影"],"title":"情绪低落时，可以看下这些电影，自我治愈","uri":"/posts/life/movie/inspriemovies/"},{"categories":["生活"],"content":"追梦赤子心 这是一部改编自丹尼尔· 鲁迪真人真事的励志电影，电影讲述了身材瘦小的鲁迪通过不懈努力，进入梦想中的圣母大学橄榄球队，并最终由替补变为正选队员的故事 。 《追梦赤子心》被认为是美国励志片的典范之作，赞扬了努力奋斗与信念坚定的美好品质。男主人公鲁迪传达了“只要努力，就能获得成功”的奋进精神，经过时间的见证，使这部电影的标题已经成为了一个代名词，代表着那些战胜偏见、勇往直前的赤子之心。 ","date":"2022-10-07","objectID":"/posts/life/movie/inspriemovies/:4:0","tags":["电影"],"title":"情绪低落时，可以看下这些电影，自我治愈","uri":"/posts/life/movie/inspriemovies/"},{"categories":["生活"],"content":"叫我第一名 电影改编自根据布拉德•科恩的真实故事改编，是一部自传类励志电影，影片讲述了叙述患有妥瑞氏症的男孩努力达到成为老师的梦想，并且克服病症的故事。 布莱德患有先天性的妥瑞氏症，这种严重的痉挛疾病，导致他无法控制地扭动脖子和发出奇怪的声音。而这种怪异的行为，更是让他从小不被老师和同学理解。 大学毕业后，布莱德秉持着每个学生都值得被教导的愿望决定当老师，为了找到一个愿意接受自己的学校，他不抛弃梦想，不放弃信念，默默努力着。最后，经过了大约25所学校的面试后，终于梦想成真。 ","date":"2022-10-07","objectID":"/posts/life/movie/inspriemovies/:5:0","tags":["电影"],"title":"情绪低落时，可以看下这些电影，自我治愈","uri":"/posts/life/movie/inspriemovies/"},{"categories":["生活"],"content":"那些最伟大的比赛 故事发生在20世纪之初，高尔夫球还只是英国贵族和绅士们的游戏，底层人民没有资格染指其中，它无疑是身份和权力的象征。少年弗朗西斯·奥密特出身平民家庭，读书之余他经常担任球童贴补家用。在这一过程中，对高尔夫球的热爱悄悄在他的心中生根发芽。他勤奋努力，且天资聪颖，渐渐成长为一名出色的业余选手。1913年，弗朗西斯有幸参加绅士云集的公开赛，它不仅有机会与自己的偶像哈里·瓦顿正面对决，还将成为改写高尔夫球史的重要人物…… ","date":"2022-10-07","objectID":"/posts/life/movie/inspriemovies/:6:0","tags":["电影"],"title":"情绪低落时，可以看下这些电影，自我治愈","uri":"/posts/life/movie/inspriemovies/"},{"categories":["生活"],"content":"决战冰河 根据真人真事改编的雪地历险故事，时代背景是第一次世界大战发生期间的1917年。主人公威尔的父亲死于一次事故，留下威尔照看整个家。由于需要钱来上大学以及照料父亲在南达科他州的农场，威尔决定去温尼伯(加拿大城市)参加一次在圣保罗(美国明尼苏达州首府)举行的雪橇犬马拉松比赛。在一个叫奈德的人的帮助下，少年威尔克服了生理和心理上的挑战。比赛中，凭着他的勇气在报纸媒体上开始出名。全长五百多英哩，威尔一路历经暴风雪和冰河的恶劣地形考验，终于还是到达目标。 ","date":"2022-10-07","objectID":"/posts/life/movie/inspriemovies/:7:0","tags":["电影"],"title":"情绪低落时，可以看下这些电影，自我治愈","uri":"/posts/life/movie/inspriemovies/"},{"categories":["生活"],"content":"永不放弃 如果你是一个有脑瘫病史的人，如果你永远无法站直，走起路来一跛一跛的，一只手只能永远地反背在身后，连打领带、系鞋带、扣袖口这样的事都需要别人的帮助才行，如果你完全可以凭借救济金生活，你还会出去工作并且梦想着做一个自食其力的人吗？ 故事的主人公比尔就是这样一位残障人士，他患有先天性脑瘫，但比尔并不甘心成为一个失败者，他希望能通过自己的努力，在生命中获得成功。从1955年起，他开始尝试做上门推销员，起初他四处碰壁，并且经常遭到“正常人”的白眼。但是，他并不气馁，继续着自己的事业…… ","date":"2022-10-07","objectID":"/posts/life/movie/inspriemovies/:8:0","tags":["电影"],"title":"情绪低落时，可以看下这些电影，自我治愈","uri":"/posts/life/movie/inspriemovies/"},{"categories":["生活"],"content":"听见天堂 当上帝为你关上一扇门时，往往他会为你打开另一扇。意大利男孩米克虽然出身在穷乡僻壤，但他从小就梦想成一流的电影大师，只因他是那么的热爱电影。然而上帝跟他开了一个最残酷的玩笑，米克玩弄一支来复枪时不幸走火，从此他只能淹没在巨大的黑暗当中。这一度令米克感到沮丧万分，仿佛活着已没有了动力。然而盲校的老师的一番话让米克豁然开朗，为什么音乐家在演奏时会闭上眼睛，因为那样音符会蜕变，变的更有力量。于是，米克选择了用耳朵代替眼睛，去记录他生活的点点滴滴。 这时，我们才发现：原来，不仅可以看见天堂，还可以听见天堂。 ","date":"2022-10-07","objectID":"/posts/life/movie/inspriemovies/:9:0","tags":["电影"],"title":"情绪低落时，可以看下这些电影，自我治愈","uri":"/posts/life/movie/inspriemovies/"},{"categories":null,"content":"天行健，君子以自强不息 ","date":"2022-08-15","objectID":"/aboutme/:0:0","tags":null,"title":"关于","uri":"/aboutme/"},{"categories":null,"content":"古往 \u0026\u0026 今来 SYC在河南省的一个农村长大，在一个五线小县城的高中读书。高考那年全省考生近100万，当年本、专科总录取率不足30%， 意味着有70w左右的学生不能再继续学习深造，想想都是泪水；🙁 Syc grew up in a rural village in Henan province and studied in a high school in a small town. Almost 1 million students took college entrance examinations in Henan province at that time. The acceptance rate was less than 30 percent. It means that there was about 0.7 million students who can no longer continue their studies. That’s a sad thing. 古语云: 知识改变命运，《士兵突击》里王团长对许三多说的话：\"想要和得到中间还有两个字，那就是做到。你只有做到，才能够得到。\" Knowledge changes fate. In “Soldier Assault”, Captain Wang said to Xu Sanduo: “There are two words between wanting and getting, and that is to do. You can only get it if you do it.” 大学毕业后，先后在上海、杭州工作过，机缘巧合，经历过创业公司、中厂和互联网大厂，横跨供应链、金融、互联网电商等行业。 My major is Computer science and technology. after graduating from university, I worked in Shanghai and Hangzhou. I have experience in start-up companies and medium and large companies. I have strong experience in the Internet e-commerce industry. 18年加入AL，作为一名技术同学，在国际化电商板块搬砖，为国际化业务贡献自己的一份力量! 😀 I joined AL as a senior development engineer in 2018 and contributed to the international business. ","date":"2022-08-15","objectID":"/aboutme/:1:0","tags":null,"title":"关于","uri":"/aboutme/"},{"categories":null,"content":"技能 \u0026\u0026 爱好 户外、摄影📷、爬山、跑步🏃‍♂️、羽毛球🏸、撸铁 Outdoors, photography, mountain climbing, running, badminton, fitness. 读书📚、纪录片 Reading 刷剧（快进式） ","date":"2022-08-15","objectID":"/aboutme/:2:0","tags":null,"title":"关于","uri":"/aboutme/"},{"categories":null,"content":"友情联系 email: michael_songs@163.com ","date":"2022-08-15","objectID":"/aboutme/:3:0","tags":null,"title":"关于","uri":"/aboutme/"},{"categories":["生活"],"content":" 今年年初就计划着去新疆旅行，刚好六月份看到朋友发的帖子，大家一拍即合，开团成行；刚好借此计划给自己放一个长假， 把自己从持续多年的忙碌状态中抽离出来，利用这几天时间，来一场心灵的放松、灵魂的洗礼和体力的马拉松。来阿里四年，给自己休的第一次长假。 ","date":"2022-07-22","objectID":"/posts/travel/xinjiang/:0:0","tags":["新疆"],"title":"新疆旅行-北疆","uri":"/posts/travel/xinjiang/"},{"categories":["生活"],"content":"行程计划 2022.7.8 - 2022.7.17 7.8： 杭州出发； 7.9： 尹宁 伊力特酒厂、六星街、伊犁河；（美食） 7.10：尹宁7点发车（1.5小时车程）、紫仙镇薰衣草庄园（1小时）、（1小时车程）果子沟（1.5小时）、午餐、赛里木湖（落日）（9小时左右）、（1.5小时车程）住清水河镇（预计12点多了）； 7.11：清水河镇8点出发附近看免费薰衣草（1小时），（6.5小时车程）前往夏塔旅游风景区，进景区入住，有时间可以游玩下（星空）； 7.12：6点早起，早餐后徒步夏塔古道（20公里左右，原路往返，也许还有日出）、17点左右出景区晚饭、（3小时）驱车住特克斯、八卦城； 7.13：早起，（8点前）喀拉峻（8小时）、阔克苏大峡谷（4h）、（4小时车程）住那拉提； 7.14：（8点）那拉提风景区（一整天），住那拉提； 7.15：坐车到巴音（2.5小时），巴音天鹅湖、九曲十八弯（落日）、住巴音；（大巴车返回伊宁） 7.16：换5座或7座车，完整独库公路+s101国防公路（百里丹霞，走一段，不然吃不消），到乌鲁木齐； 7.17：返杭； ","date":"2022-07-22","objectID":"/posts/travel/xinjiang/:1:0","tags":["新疆"],"title":"新疆旅行-北疆","uri":"/posts/travel/xinjiang/"},{"categories":["生活"],"content":"DAY1 [周五] 2022.7.8, 头天晚上和同事一起吃夜宵到凌晨一点，聊得很嗨，晚上回家后又解决几个工作问题，本打算熬下夜直接去机场，谁知凌晨两点多，收到航空公司航班延迟起飞的信息， 果断睡觉； 早上起床后，收拾行李，刚好赶上早高峰，预估打车的话会堵车，测算地铁到机场的站总数后（地铁时间相对能准确预测），果断选择做地铁去机场； 最终一个半小时准时到达机场，和小伙伴汇合，完美; 11:55起飞，14:55到达兰州中川机场，机场吃了碗拉州拉面，本以为到达兰州本土，味道会有些不一样，结果证明期望过高，味道可能还不如个别面馆； 航班原计划19:35起飞，上飞机后，因为天气原因，硬生生拖到20:45才起飞（小插曲，上飞机后，有些累，就立马闭眼补觉，后来醒了看了下外面，哇塞，落地了，这么快，爽！； 然后在停顿了几秒，懵懵的看了下周围，脑袋瞬间清晰，瓦特… 这都一觉睡醒了，飞机还没起飞！！！），最终23:50左右到达伊宁。 目前还属于疫情管控时期，到新疆前需要提前申报行程，不然有可能落地后被原地劝返； 今天的时间基本全花在路途中。 凌晨两点吃晚饭； ","date":"2022-07-22","objectID":"/posts/travel/xinjiang/:2:0","tags":["新疆"],"title":"新疆旅行-北疆","uri":"/posts/travel/xinjiang/"},{"categories":["生活"],"content":"DAY2[周六] 今日安排：伊力特酒厂、六星街、伊犁河、喀赞其民宿旅游区。 早餐七点起床，吃早餐； 借助花姐独特的人脉关系，有幸拜访伊力特酒厂，了解到酒厂的历史发展轨迹，由几代人共同的心血才铸就而成，心中五味杂陈。品尝了红冰、白冰葡萄酒，酸甜可口，让人垂涎三尺。 了解到了北纬45°生命线，独特的地理气候，最终生长出优质的瓜果粮食。品尝了内部迎宾特供伊力特45°白酒，味道纯正，不辛辣，后劲也不大，超出预期；午饭吃了羊肉包、羊肉，没有疝气，味道鲜美，怒赞！ 在六星街，看到新疆本土大叔悠闲的用手风琴演奏本土轻音乐，音调轻缓优美，让人瞬间放松，忘记一切凡尘琐事，享受生活。 六星街-公路咖啡 自东向西流的伊犁河，以及晚上九点悬挂半空的大太阳. （以东部地区同学对东八区的时间理解，在这里有些颠覆认知） 伊犁河 ","date":"2022-07-22","objectID":"/posts/travel/xinjiang/:3:0","tags":["新疆"],"title":"新疆旅行-北疆","uri":"/posts/travel/xinjiang/"},{"categories":["生活"],"content":"DAY3 [周日] 今日安排：紫仙镇薰衣草庄园、果子沟、赛里木湖。 凌晨2点睡觉，早晨7点吃早餐； 7月中薰衣草已经花谢，薰衣草庄园里并没有看到成片的花海，听当地人说，最好6月中旬来。 果子沟全长4.4千米，大桥长700米。 塔里木湖【强烈推荐去！】 大西洋的最后一滴眼泪，让人沉醉； 围着赛里木湖转了一圈，感受到它的独特，海天一色的蓝，一望无际的湖面，让人内心平静； 坐在长廊中间，眺望眼前的赛里木湖，心无杂念，凡尘种种，皆为过往；远处挺拔的雪山和蓝天白云，造就出了当地人民心中的“净海”。 ","date":"2022-07-22","objectID":"/posts/travel/xinjiang/:4:0","tags":["新疆"],"title":"新疆旅行-北疆","uri":"/posts/travel/xinjiang/"},{"categories":["生活"],"content":"DAY4[周一] 今日安排：油菜花田、入住夏塔旅游风景区； 早7点起床，“温州包子\"早餐店吃早点； 8点出发，去夏塔旅游风景区途中，遇到油菜花田，犹豫天气不太好，不好出片，如果天气不错，效果会很棒； 17点到达夏塔景区，景区大门口买票后，分批坐景区的接驳车，从大门口开车40分钟，到达景区内住宿地，入住小木屋旅馆，晚上是真的冷，好在有电热毯，相对舒服的睡了半宿。 ","date":"2022-07-22","objectID":"/posts/travel/xinjiang/:5:0","tags":["新疆"],"title":"新疆旅行-北疆","uri":"/posts/travel/xinjiang/"},{"categories":["生活"],"content":"DAY5[周二] 今日安排：徒步夏塔古道（20公里左右）、特克斯、八卦城； 早上五点半起床，六点出发徒步，目的地雪山； 14:40左右坐上下山的景区接驳车，17点左右离开景区吃晚饭、驱车（3小时左右距离）到 特克斯.八卦城，入住酒店； ","date":"2022-07-22","objectID":"/posts/travel/xinjiang/:6:0","tags":["新疆"],"title":"新疆旅行-北疆","uri":"/posts/travel/xinjiang/"},{"categories":["生活"],"content":"DAY6[周三] 今日安排：喀拉峻草原、阔克苏大峡谷（4h） 喀拉峻草原\u0026\u0026阔克苏大峡谷，高山草原(7月这里的草，有些泛黄)，视野辽阔，山风吹过很冷，不过可以抱只小羊，相当暖和。 ","date":"2022-07-22","objectID":"/posts/travel/xinjiang/:7:0","tags":["新疆"],"title":"新疆旅行-北疆","uri":"/posts/travel/xinjiang/"},{"categories":["生活"],"content":"DAY7[周四] 今日安排：那拉提风景区 ","date":"2022-07-22","objectID":"/posts/travel/xinjiang/:8:0","tags":["新疆"],"title":"新疆旅行-北疆","uri":"/posts/travel/xinjiang/"},{"categories":["生活"],"content":"DAY8[周五] 今日安排：巴音天鹅湖、九曲十八弯（落日） 坐车到巴音（2.5小时），巴音天鹅湖、九曲十八弯（落日）、住巴音；（大巴车返回伊宁） 天鹅湖里有几只天鹅，但湖水味道呛人，过敏者慎入； 九曲十八弯，如果遇到落日，会更美；这里的山风吹得让人由内而外的发冷，山上有个小超市，买了包泡面，店主赠送开水，价钱合理，吃饱取暖，完美； ","date":"2022-07-22","objectID":"/posts/travel/xinjiang/:9:0","tags":["新疆"],"title":"新疆旅行-北疆","uri":"/posts/travel/xinjiang/"},{"categories":["生活"],"content":"DAY9[周六] 今日安排：乘7座车游览独库公路+s101国防公路，到乌鲁木齐 路上偶遇彩虹，有点超出预期； 一路上听说会经历春夏秋冬，途中遇到的几个小雪山，和预期中的差距蛮大，不过能近距离看到，也算不错。整条独库路是有些绕，不建议新手自驾； 独库公路-雪山 独库公路 ","date":"2022-07-22","objectID":"/posts/travel/xinjiang/:10:0","tags":["新疆"],"title":"新疆旅行-北疆","uri":"/posts/travel/xinjiang/"},{"categories":["生活"],"content":"DAY10[周日] 因为预定酒店比较找，酒店有赠送整点接送服务，所以早晨6点半起床，7点出门，7点一刻到机场，机场吃了点八宝粥，8:25乌鲁木齐起飞，中途郑州中转1小时，然后14：55到达杭州萧山。 ","date":"2022-07-22","objectID":"/posts/travel/xinjiang/:11:0","tags":["新疆"],"title":"新疆旅行-北疆","uri":"/posts/travel/xinjiang/"},{"categories":["生活"],"content":"费用 去新机票：2217 返杭机票：2225 酒店+交通：3500 部分景点门票: 132+145+132+115+150+135 其他开销另算 上述小计：8751； ","date":"2022-07-22","objectID":"/posts/travel/xinjiang/:12:0","tags":["新疆"],"title":"新疆旅行-北疆","uri":"/posts/travel/xinjiang/"},{"categories":["读书笔记"],"content":"个人履历 纳纳瓦尔 •拉维坎特经历表 1974年，出生于印度德里 1983年，9岁，从印度新德里搬到美国纽约皇后区 1988年，14岁，就读于史岱文森高中 1995年，21岁，从达特茅斯大学毕业（学习计算机科学和经济学） 1999年，25岁，成为 Epinions 创始人、首席执行官 2001年，27岁，成为风投机构 August Capital 创业合伙人 2003年，29岁，成为分类广告平台 Vast.com 创始人 2005年，31岁，在硅谷被称为“放射性泥浆” 2007年，33岁，创立小型风险投资基金 Hit Forge，最初设想是用作艀化器 2007年，33岁，创立 VentureHacks 博客 2010年，36岁，创立AngelList 2010年，36岁，投资优步 2012年，38岁，游说国会通过 《就业法案》 2018年，44岁，获评 “年度天使投资人” ","date":"2022-07-05","objectID":"/posts/book/naval/:1:0","tags":["读书笔记"],"title":"[读书笔记] 《纳瓦尔宝典》","uri":"/posts/book/naval/"},{"categories":["读书笔记"],"content":"语录 只要想做，办法总是有的。 坐而言，不如起而行； 人生中真正重要的道理不需要太多。 如果社会可以培训你，那么社会也可以培训他人来取代你。大家都能学会的东西是不可能让你致富的。凡是可以批量化培训的技能都是能够被雇佣的技能。只有你自己学到的东西，才是属于你独有的能力，才有可能让你成功。 同样是读书，有人指望书本能告诉他怎么开始怎么结束，所以总是失望（或者被骗）。而有人从书中获得启发，自己思考，自己实践，于是对书充满感激。从同一个教室里走出的学生天差地别，就是因为有人等着被打造，有人是自己在探索。 最重要的是，要在重大决定上花更多时间。人生早期有三个重大决定：在哪里生活，和谁在一起，从事什么职业。 阅读数学、科学和哲学领域的经典作品。 学会销售，学会构建，两技傍身，势不可当。 赚钱不是一件想做就能做的事情，而是一门需要学习的技能。 依靠出租时间是不可能致富的。你必须拥有股权（企业的部分所有权），才能实现财务自由。 工作时要拼尽全力，毫无保留。不过，共事的人和工作的内容比努力程度更重要。 在自己选择的职业领域里做到全球顶尖。不断重新定义自己的事业，直到理想成为现实。 ","date":"2022-07-05","objectID":"/posts/book/naval/:2:0","tags":["读书笔记"],"title":"[读书笔记] 《纳瓦尔宝典》","uri":"/posts/book/naval/"},{"categories":["Tech"],"content":"Mac ","date":"2022-05-01","objectID":"/posts/tech/setup/install-software-collection/:0:0","tags":["install"],"title":"Mac下开发工具安装","uri":"/posts/tech/setup/install-software-collection/"},{"categories":["Tech"],"content":"Tool Charles ","date":"2022-05-01","objectID":"/posts/tech/setup/install-software-collection/:1:0","tags":["install"],"title":"Mac下开发工具安装","uri":"/posts/tech/setup/install-software-collection/"},{"categories":["Tech"],"content":"DB mac-mysql安装-参考-1 mac-mysql安装-参考-2 mac-python3 安装-参考 mac-Homebrew 安装-参考 ","date":"2022-05-01","objectID":"/posts/tech/setup/install-software-collection/:2:0","tags":["install"],"title":"Mac下开发工具安装","uri":"/posts/tech/setup/install-software-collection/"},{"categories":["Tech"],"content":"如果我是一线主管 每周也要写周报，每年也要写绩效，也想晋升、加薪、诸如此类； 团队有五、六个人还好，十几个人的团队的话会希望有人可以站出来帮我; ","date":"2022-03-07","objectID":"/posts/job/management/beleader/:1:0","tags":[""],"title":"管理","uri":"/posts/job/management/beleader/"},{"categories":["Tech"],"content":"不抱怨 如果我是一线技术主管，不会喜欢团队喜欢抱怨的同学 我每天也很忙，听一个人抱怨会花时间； 一个人抱怨了，自然是有问题的，需要花一定的时间梳理出问题，需要及时给出解决方案，甚至要安抚对方情绪； 一个喜欢抱怨的人会影响整个团队的士气； 其实大部分开发抱怨的工作内容很相似，无非是自己做的业务是一堆x，xxx就是不配合我做事，PD提了无理的需求； 大促中我们的后端主管说过句很好理解的话，看到大促这么多问题很激动，这很好，问题越多机会才越大，如果都是稳定健壮的系统、完善的流程、合作良好的团队，要大促 PM 干什么呢？ ","date":"2022-03-07","objectID":"/posts/job/management/beleader/:2:0","tags":[""],"title":"管理","uri":"/posts/job/management/beleader/"},{"categories":["Tech"],"content":"向上管理 我会迫切希望团队有问题一定要说，甚至没有问题仅仅有想法可以说，保持有效沟通。 ","date":"2022-03-07","objectID":"/posts/job/management/beleader/:3:0","tags":[""],"title":"管理","uri":"/posts/job/management/beleader/"},{"categories":["Tech"],"content":"高效 我更希望团队和我交流的方式是优先让我做选择题、判断题，其次是问答题、思考题; ","date":"2022-03-07","objectID":"/posts/job/management/beleader/:3:1","tags":[""],"title":"管理","uri":"/posts/job/management/beleader/"},{"categories":["Tech"],"content":"主动 一个十几人的团队主管很难有精力面面俱到，了解所有人每天的细节，给大家找出合适方向和机会，甚至认真读完每个人的周报都要用一个下午，很难做到你有一个不错想法的时候主管恰好找你聊聊，如果我是—线主管，我更希望团队同学主动找我聊; 废话这么多，其实看看向上管理的一些理论知识就会有豁然开朗的感觉，知乎上 很接地气的总结; ","date":"2022-03-07","objectID":"/posts/job/management/beleader/:3:2","tags":[""],"title":"管理","uri":"/posts/job/management/beleader/"},{"categories":["Tech"],"content":"发现问题、解决问题 如果按照向上管理的思路，需要主管去分配任务的时候，就已经输了，甚至主管来找你问进度的时候也己经输了； 当然每个合格的主管都需要发现、解決团队人才培养的问题，不能放任问题发生。 ","date":"2022-03-07","objectID":"/posts/job/management/beleader/:4:0","tags":[""],"title":"管理","uri":"/posts/job/management/beleader/"},{"categories":["Tech"],"content":"什么样的人有积极性 能力强的人很好识别，那什么样的人才是有积极性的，看过一个牛逼的同学写的文章，他有个很好的习惯:无论大小难易，永远不满足于做出夹指定的事情，一定要给人惊喜 如果一个人可以在很多微不足道小事情上做出了惊喜，我们有理由相信这件更大的事情也可能做出惊喜。 ","date":"2022-03-07","objectID":"/posts/job/management/beleader/:4:1","tags":[""],"title":"管理","uri":"/posts/job/management/beleader/"},{"categories":["Tech"],"content":"我被分配了纯业务事情怎么办 上面也提到了简单分析只是业务需求，简单分析，在阿里将近五年见了太多事在人为的案例，每个人身边肯定也有不少这样的案例 我们以为自己在做业务，很多时候是因为两个误区 这不是技术项目 没有什么所谓的技木项目，所有的技术项目除非显而易见，否则肯定脱胎于业务，只有业务一线的同学才 可以抽象出来，做业务需求不是坏事情，拿着完成任务的心态做业务才是最要命的 没目标 所有做的事情都要契合自己的目标，而自己的目标大部分时候应该和团队目标 match，今天让我开发一个 前端组件，我要看到的是这个需求反应了我营销体系对某个分类能力的缺失，需求归纳到我营销可视化体 系完善的目标中，在阿里这种人才济济的环境中目标不清晰的人和咸鱼没什么区别 ","date":"2022-03-07","objectID":"/posts/job/management/beleader/:4:2","tags":[""],"title":"管理","uri":"/posts/job/management/beleader/"},{"categories":["Tech"],"content":"怎样才算业务负责人 我希望团队的业务负责人时刻在两个方面提醒自己 可衡量：很多时候说不出怎么衡量是因为对事情仅仅是简单直觉，没有经过逻辑推导； 体系化：当解决的问题足够复杂的时候，散点的创新不会有決定性的影响，层次的划分可以让方案更可 靠、全面，也能让人看到阶段性的成果，容易得到更多的资源的支持。 ","date":"2022-03-07","objectID":"/posts/job/management/beleader/:4:3","tags":[""],"title":"管理","uri":"/posts/job/management/beleader/"},{"categories":["生活"],"content":"攀爬 晶莹剔透 群山环绕 ","date":"2021-12-17","objectID":"/posts/life/sport/longwangshan/:1:0","tags":["龙王山","雾凇","户外"],"title":"[户外]龙王山-雾凇","uri":"/posts/life/sport/longwangshan/"},{"categories":["生活"],"content":"雾凇 对于没在山上长大的同学，能看到雾凇的机会不是太多； 近距离看雾凇 ","date":"2021-12-17","objectID":"/posts/life/sport/longwangshan/:2:0","tags":["龙王山","雾凇","户外"],"title":"[户外]龙王山-雾凇","uri":"/posts/life/sport/longwangshan/"},{"categories":["生活"],"content":"龙王山·雾凇（1587m） 到达山顶 ","date":"2021-12-17","objectID":"/posts/life/sport/longwangshan/:3:0","tags":["龙王山","雾凇","户外"],"title":"[户外]龙王山-雾凇","uri":"/posts/life/sport/longwangshan/"},{"categories":["生活"],"content":"记录 记录 ","date":"2021-12-17","objectID":"/posts/life/sport/longwangshan/:4:0","tags":["龙王山","雾凇","户外"],"title":"[户外]龙王山-雾凇","uri":"/posts/life/sport/longwangshan/"},{"categories":["读书笔记"],"content":"古语 子曰：“学而时习之，不亦说乎?有朋自远方来，不亦乐乎?人不知而不愠，不亦君子乎?”（《学而》） 曾子曰：“吾日三省吾身：为人谋而不忠乎？与朋友交而不信乎？传不习乎？”（《学而》） 子曰：“温故而知新，可以为师矣。”（《为政》） 子曰：“学而不思则罔,思而不学则殆。”（《为政》） 子曰：“由，诲女知之乎！知之为知之，不知为不知，是知也。”（《为政》） 子曰：“见贤思齐焉，见不贤而内自省也。”（《里仁》） 子曰：“三人行，必有我师焉。择其善者而从之，其不善者而改之。”（《述而》） 曾子曰：“士不可以不弘毅，任重而道远。仁以为己任，不亦重乎？死而后已，不亦远乎？”（《泰伯》） 子曰：“岁寒，然后知松柏之后凋也。”（《子罕》） 子贡问曰：“有一言而可以终身行之者乎？”子曰：“其恕乎！己所不欲，勿施于人。”（《卫灵公》） ","date":"2021-10-03","objectID":"/posts/book/famoussentence/:1:0","tags":["读书笔记"],"title":"[读书笔记] 吾日三省吾身","uri":"/posts/book/famoussentence/"},{"categories":["读书笔记"],"content":"今语 你永远都不会知道自己到底有多坚强，直到有一天你除了坚强别无选择！ ","date":"2021-10-03","objectID":"/posts/book/famoussentence/:2:0","tags":["读书笔记"],"title":"[读书笔记] 吾日三省吾身","uri":"/posts/book/famoussentence/"},{"categories":["读书笔记"],"content":"案例背景 中国正处在一个至关重要的十字路口上。制造廉价产品已使中国有了很大的发展，但上升的劳动力成本、环境问题、收入不平等以及对创新的需求都意味着重要的不是制造更廉价的产品，而是更好地进行产品营销。只有这样，中国才能赚更多的钱，才能在员工收入、环境保护和其他方面进行更大的投入。这意味着中国需要更好地掌握如何在顾客和潜在顾客的心智中建立品牌和认知，如何应对国内及国际上无处不在的竞争. 这也正是我的许多书能够发挥作用的地方。它们都是关于如何通过在众多竞争者中实现差昇化来定位自己的品牌；它们都是关于如何保持简单、如何运用常识以及如何寻求显而易见又强有力的概念。总的来讲，无论你想要销售什么，它们都会告诉你如何成为一个更好的营销者。 我的中国合伙人邓德隆先生正将其中的很多理论在中国加以运用，他甚至为企业家开设了 “定位”培训课程。但是，中国如果要建立自己的品牌，正如你们在日本、韩国和世界其他地方所看到的那些品牌，你们依然有很长的路要走。 但有一件事很明了：继续“制造更廉价的产品”只会死路一条，因为其他国家会想办法把价格压得更低。 ","date":"2021-08-21","objectID":"/posts/book/life_orientation/:1:0","tags":["规划"],"title":"[读书笔记] 《人生定位》","uri":"/posts/book/life_orientation/"},{"categories":["读书笔记"],"content":"新生产工具：定位 在此背景下，为组织准确定义成果的新生产工具一定位(positioning），在1969年被杰克•特芳特发明出来，掀起了第三次生产力革命。在谈到为何选择“定位”一词来命名这一新工具时，特劳特曾说：“《韦氏词典》对战略的定义是针对敌人（竞争对手），确立最具优势的位置 （position)。这正好是定位要做的工作。” 在顾客心智中针对竞争对手确定最具优势的位置，从而使品牌胜出竟争赢得优先选择，这就是企业需全力以赴抵达的成果，也是企业赖以存在的唯一理由。正如德鲁克在评价泰勒“四步工作法”时说：“泰勒的方法听起来没什么了不起有效的方法常常如此。其实这套方法花了泰勒整整20年的时间去试验，才整理发展出来。”这段话用来描述特劳特与定位同样适用。 ","date":"2021-08-21","objectID":"/posts/book/life_orientation/:2:0","tags":["规划"],"title":"[读书笔记] 《人生定位》","uri":"/posts/book/life_orientation/"},{"categories":["读书笔记"],"content":"定位四步工作法 第一步，分析整个外部环境，确定“我们的竞年对手是谁，竞争对手的价值是什么”（这与德鲁克在回答管理第一问“我们的业务是什么，应该是什么”时问的 “我们的顾客是谁，顾客的价值是什么”相反，因过多的选择、 有限的心智，决定了经营方式已从顾客导向转向了竞年导向）。 第二步，避开竞年对手在顾客心智中的强势，或是利用其强势中蕴含的弱点，确立品牌的优势位置-定位。 第三步，为这一定位寻求一个可靠的证明——信任状。 第四步，将这一定位整合进企业内部运营的方方面面，特别是传播上要有足够多的资源，以将这一定位植入顾客的心智 ","date":"2021-08-21","objectID":"/posts/book/life_orientation/:3:0","tags":["规划"],"title":"[读书笔记] 《人生定位》","uri":"/posts/book/life_orientation/"},{"categories":["leetcode"],"content":"一、数据结构的存储方式 数据结构的存储方式只有两种：数组（顺序存储）和链表（链式存储） 这句话怎么理解，不是还有散列表、栈、队列、堆、树、图等等各种数据结构吗？ 我们分析问题，一定要有递归的思想，自顶向下，从抽象到具体。你上来就列出这么多，那些都属于「上层建筑」，而数组和链表才是「结构基础」。因为那些多样化的数据结构，究其源头，都是在链表或者数组上的特殊操作，API 不同而已。 比如说「队列」、「栈」这两种数据结构既可以使用链表也可以使用数组实现。用数组实现，就要处理扩容缩容的问题；用链表实现，没有这个问题，但需要更多的内存空间存储节点指针。 「图」的两种表示方法，邻接表就是链表，邻接矩阵就是二维数组。邻接矩阵判断连通性迅速，并可以进行矩阵运算解决一些问题，但是如果图比较稀疏的话很耗费空间。邻接表比较节省空间，但是很多操作的效率上肯定比不过邻接矩阵。 「散列表」就是通过散列函数把键映射到一个大数组里。而且对于解决散列冲突的方法，拉链法需要链表特性，操作简单，但需要额外的空间存储指针；线性探查法就需要数组特性，以便连续寻址，不需要指针的存储空间，但操作稍微复杂些。 「树」，用数组实现就是「堆」，因为「堆」是一个完全二叉树，用数组存储不需要节点指针，操作也比较简单；用链表实现就是很常见的那种「树」，因为不一定是完全二叉树，所以不适合用数组存储。为此，在这种链表「树」结构之上，又衍生出各种巧妙的设计，比如二叉搜索树、AVL 树、红黑树、区间树、B 树等等，以应对不同的问题。 了解 Redis 数据库的朋友可能也知道，Redis 提供列表、字符串、集合等等几种常用数据结构，但是对于每种数据结构，底层的存储方式都至少有两种，以便于根据存储数据的实际情况使用合适的存储方式。 综上，数据结构种类很多，甚至你也可以发明自己的数据结构，但是底层存储无非数组或者链表，二者的优缺点如下： 数组由于是紧凑连续存储,可以随机访问，通过索引快速找到对应元素，而且相对节约存储空间。但正因为连续存储，内存空间必须一次性分配够，所以说数组如果要扩容，需要重新分配一块更大的空间，再把数据全部复制过去，时间复杂度 O(N)；而且你如果想在数组中间进行插入和删除，每次必须搬移后面的所有数据以保持连续，时间复杂度 O(N)。 链表因为元素不连续，而是靠指针指向下一个元素的位置，所以不存在数组的扩容问题；如果知道某一元素的前驱和后驱，操作指针即可删除该元素或者插入新元素，时间复杂度 O(1)。但是正因为存储空间不连续，你无法根据一个索引算出对应元素的地址，所以不能随机访问；而且由于每个元素必须存储指向前后元素位置的指针，会消耗相对更多的储存空间。 ","date":"2021-08-18","objectID":"/posts/tech/leetcode/algorithm/:1:0","tags":["算法","leetcode"],"title":"算法概述","uri":"/posts/tech/leetcode/algorithm/"},{"categories":["leetcode"],"content":"二、数据结构的基本操作 对于任何数据结构，其基本操作无非遍历 + 访问，再具体一点就是：增删查改。 数据结构种类很多，但它们存在的目的都是在不同的应用场景，尽可能高效地增删查改。话说这不就是数据结构的使命么？ 如何遍历 + 访问？我们仍然从最高层来看，各种数据结构的遍历 + 访问无非两种形式：线性的和非线性的。 线性就是 for/while 迭代为代表，非线性就是递归为代表。再具体一步，无非以下几种框架： 数组遍历框架，典型的线性迭代结构： void traverse(int[] arr) { for (int i = 0; i \u003c arr.length; i++) { // 迭代访问 arr[i] } } 链表遍历框架，兼具迭代和递归结构： /* 基本的单链表节点 */ class ListNode { int val; ListNode next; } void traverse(ListNode head) { for (ListNode p = head; p != null; p = p.next) { // 迭代访问 p.val } } void traverse(ListNode head) { // 递归访问 head.val traverse(head.next); } 二叉树遍历框架，典型的非线性递归遍历结构： /* 基本的二叉树节点 */ class TreeNode { int val; TreeNode left, right; } void traverse(TreeNode root) { traverse(root.left); traverse(root.right); } 你看二叉树的递归遍历方式和链表的递归遍历方式，相似不？再看看二叉树结构和单链表结构，相似不？如果再多几条叉，N 叉树你会不会遍历？ 二叉树框架可以扩展为 N 叉树的遍历框架： /* 基本的 N 叉树节点 */ class TreeNode { int val; TreeNode[] children; } void traverse(TreeNode root) { for (TreeNode child : root.children) traverse(child); } N 叉树的遍历又可以扩展为图的遍历，因为图就是好几 N 叉棵树的结合体。你说图是可能出现环的？这个很好办，用个布尔数组 visited 做标记就行了，这里就不写代码了。 所谓框架，就是套路。不管增删查改，这些代码都是永远无法脱离的结构，你可以把这个结构作为大纲，根据具体问题在框架上添加代码就行了，下面会具体举例。 ","date":"2021-08-18","objectID":"/posts/tech/leetcode/algorithm/:2:0","tags":["算法","leetcode"],"title":"算法概述","uri":"/posts/tech/leetcode/algorithm/"},{"categories":["leetcode"],"content":"三、算法刷题指南 首先要明确的是，数据结构是工具，算法是通过合适的工具解决特定问题的方法。也就是说，学习算法之前，最起码得了解那些常用的数据结构，了解它们的特性和缺陷。 所以我建议的刷题顺序是： 1、先学习像数组、链表这种基本数据结构的常用算法，比如单链表翻转，前缀和数组，二分搜索等。 因为这些算法属于会者不难难者不会的类型，难度不大，学习它们不会花费太多时间。而且这些小而美的算法经常让你大呼精妙，能够有效培养你对算法的兴趣。 2、学会基础算法之后，不要急着上来就刷回溯算法、动态规划这类笔试常考题，而应该先刷二叉树，先刷二叉树，先刷二叉树，重要的事情说三遍。 为什么要先刷二叉树呢，因为二叉树是最容易培养框架思维的，而且大部分算法技巧，本质上都是树的遍历问题。 刷二叉树看到题目没思路？根据很多读者的问题，其实大家不是没思路，只是没有理解我们说的「框架」是什么。 不要小看这几行破代码，几乎所有二叉树的题目都是一套这个框架就出来了： void traverse(TreeNode root) { // 前序位置 traverse(root.left); // 中序位置 traverse(root.right); // 后序位置 } 比如说我随便拿几道题的解法出来，不用管具体的代码逻辑，只要看看框架在其中是如何发挥作用的就行。 力扣第 124 题，难度困难，让你求二叉树中最大路径和，主要代码如下： 比如说我随便拿几道题的解法出来，不用管具体的代码逻辑，只要看看框架在其中是如何发挥作用的就行。 力扣第 124 题，难度困难，让你求二叉树中最大路径和，主要代码如下： int res = Integer.MIN_VALUE; int oneSideMax(TreeNode root) { if (root == null) return 0; int left = max(0, oneSideMax(root.left)); int right = max(0, oneSideMax(root.right)); // 后序位置 res = Math.max(res, left + right + root.val); return Math.max(left, right) + root.val; } 注意递归函数的位置，这就是个后序遍历嘛，无非就是把 traverse 函数名字改成 oneSideMax 了。 力扣第 105 题，难度中等，让你根据前序遍历和中序遍历的结果还原一棵二叉树，很经典的问题吧，主要代码如下： TreeNode build(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd) { // 前序位置，寻找左右子树的索引 if (preStart \u003e preEnd) { return null; } int rootVal = preorder[preStart]; int index = 0; for (int i = inStart; i \u003c= inEnd; i++) { if (inorder[i] == rootVal) { index = i; break; } } int leftSize = index - inStart; TreeNode root = new TreeNode(rootVal); // 递归构造左右子树 root.left = build(preorder, preStart + 1, preStart + leftSize, inorder, inStart, index - 1); root.right = build(preorder, preStart + leftSize + 1, preEnd, inorder, index + 1, inEnd); return root; } 不要看这个函数的参数很多，只是为了控制数组索引而已。注意找递归函数 build 的位置，本质上该算法也就是一个前序遍历，因为它在前序遍历的位置加了一坨代码逻辑。 力扣第 230 题，难度中等，寻找二叉搜索树中的第 k 小的元素，主要代码如下： int res = 0; int rank = 0; void traverse(TreeNode root, int k) { if (root == null) { return; } traverse(root.left, k); /* 中序遍历代码位置 */ rank++; if (k == rank) { res = root.val; return; } /*****************/ traverse(root.right, k); } 这不就是个中序遍历嘛，对于一棵 BST 中序遍历意味着什么，应该不需要解释了吧。 你看，二叉树的题目不过如此，只要把框架写出来，然后往相应的位置加代码就行了，这不就是思路吗。 对于一个理解二叉树的人来说，刷一道二叉树的题目花不了多长时间。那么如果你对刷题无从下手或者有畏惧心理，不妨从二叉树下手，前 10 道也许有点难受；结合框架再做 20 道，也许你就有点自己的理解了；刷完整个专题，再去做什么回溯动规分治专题，你就会发现只要涉及递归的问题，都是树的问题。 综上，对于畏惧算法的同学来说，可以先刷树的相关题目，试着从框架上看问题，而不要纠结于细节问题。 纠结细节问题，就比如纠结 i 到底应该加到 n 还是加到 n - 1，这个数组的大小到底应该开 n 还是 n + 1？ 从框架上看问题，就是像我们这样基于框架进行抽取和扩展，既可以在看别人解法时快速理解核心逻辑，也有助于找到我们自己写解法时的思路方向。 当然，如果细节出错，你得不到正确的答案，但是只要有框架，你再错也错不到哪去，因为你的方向是对的。 但是，你要是心中没有框架，那么你根本无法解题，给了你答案，你也不会发现这就是个树的遍历问题。 这种思维是很重要的， 动态规划详解 中总结的找状态转移方程的几步流程，有时候按照流程写出解法，可能自己都不知道为啥是对的，反正它就是对了。。。 这就是框架的力量，能够保证你在快睡着的时候，依然能写出正确的程序；就算你啥都不会，都能比别人高一个级别。 本文最后，总结一下吧： 数据结构的基本存储方式就是链式和顺序两种，基本操作就是增删查改，遍历方式无非迭代和递归。 学完基本算法之后，建议从「二叉树」系列问题开始刷，结合框架思维，把树结构理解到位，然后再去看回溯、动规、分治等算法专题，对思路的理解就会更加深刻。 ","date":"2021-08-18","objectID":"/posts/tech/leetcode/algorithm/:3:0","tags":["算法","leetcode"],"title":"算法概述","uri":"/posts/tech/leetcode/algorithm/"},{"categories":["leetcode"],"content":"四、算法的本质 如果要让我一句话总结，我想说算法的本质就是「穷举」。 但是，你千万不要觉得穷举这个事儿很简单，穷举有两个关键难点：无遗漏、无冗余。 遗漏，会直接导致答案出错；冗余，会拖慢算法的运行速度。所以，当你看到一道算法题，可以从这两个维度去思考： 1、如何穷举？即无遗漏地穷举所有可能解。 2、如何聪明地穷举？即避免所有冗余的计算，消耗尽可能少的资源求出答案。 不同类型的题目，难点是不同的，有的题目难在「如何穷举」，有的题目难在「如何聪明地穷举」。 什么算法的难点在「如何穷举」呢？一般是递归类问题，最典型的就是动态规划系列问题。 ","date":"2021-08-18","objectID":"/posts/tech/leetcode/algorithm/:4:0","tags":["算法","leetcode"],"title":"算法概述","uri":"/posts/tech/leetcode/algorithm/"},{"categories":["leetcode"],"content":"Refer Refer to : https://labuladong.gitee.io/algo/2/ ","date":"2021-08-18","objectID":"/posts/tech/leetcode/algorithm/:5:0","tags":["算法","leetcode"],"title":"算法概述","uri":"/posts/tech/leetcode/algorithm/"},{"categories":["生活"],"content":" 2021.07.02-2021.07.05 ","date":"2021-07-13","objectID":"/posts/travel/wanning/:0:0","tags":["海南","万宁","三亚"],"title":"万宁Outing","uri":"/posts/travel/wanning/"},{"categories":["生活"],"content":"Day1 【周五】 周五下坐飞机飞海口，原计划14点的飞机，晚点到17点起飞； 20点左右到达海口，乘坐旅游大巴赶往万宁； 23点左右入到达万宁，入住神州半岛福朋喜来登酒店； 酒店在海边一个小岛的景区中，晚上人烟稀少，在周边找吃的有些费劲； ","date":"2021-07-13","objectID":"/posts/travel/wanning/:1:0","tags":["海南","万宁","三亚"],"title":"万宁Outing","uri":"/posts/travel/wanning/"},{"categories":["生活"],"content":"Day2【周六】 早起，自助餐早点，伙食还不错的； 酒店一日躺，下午海边泳池玩水； 酒店泳池 晚上附近找了个沙滩，玩篝火、吃烧烤、海边踩水； 万宁沙滩 万宁沙滩篝火 ","date":"2021-07-13","objectID":"/posts/travel/wanning/:2:0","tags":["海南","万宁","三亚"],"title":"万宁Outing","uri":"/posts/travel/wanning/"},{"categories":["生活"],"content":"Day3【周日】 坐高铁到三亚，开启三亚一日游模式； 三亚凤凰岛 鸿洲国际游艇码头 浪里个浪，耗资几百大元，体验了把人工潜水+水下拍照，体验效果：近海区水太脏了，照片效果令人堪忧，完美踩坑； 晚上搜了家大众点评top3的海鲜店，吃海鲜，口味很棒；吃完返程回万宁； ","date":"2021-07-13","objectID":"/posts/travel/wanning/:3:0","tags":["海南","万宁","三亚"],"title":"万宁Outing","uri":"/posts/travel/wanning/"},{"categories":["生活"],"content":"Day4【周一】 早起，先坐大巴到海口，然后回杭； ","date":"2021-07-13","objectID":"/posts/travel/wanning/:4:0","tags":["海南","万宁","三亚"],"title":"万宁Outing","uri":"/posts/travel/wanning/"},{"categories":["生活"],"content":"学习的人 近期发现一部不错的韩国纪录片，关于如何学习，片名《学习的人.Homo.Academics》, 网易公开课、哔哩哔哩或外网均有完整视频。 这部片值得反复观看学习。 网易公开课 纪录片中，通过对韩国、中国、美国、英国、印度等国家进行深入采访，对比不同年龄段、不同民族、不同文化群体的学习方式； 印象最深刻的是犹太族的家庭教育和犹太族的图书馆： 犹太的家庭教育，家长会在晚餐时，问孩子\"你今天在学校都问了哪些问题？\" 犹太人的图书馆，不是静悄悄，而是大声的激烈讨论、辩论会场； 引申思考：如何做，才能成为一名会学习的人？ ","date":"2021-06-26","objectID":"/posts/life/movie/learning/:1:0","tags":["纪录片"],"title":"[纪录片] 学习的人.Homo.Academics","uri":"/posts/life/movie/learning/"},{"categories":["生活"],"content":"70-20-10学习法则 《70-20-10学习法则》源自Center for Creative Leadership（CCL，创新领导力中心）的Morgan McCall、Bob Eichinger和 Mike Lombardo在20世纪80年代提出的“历练驱动型发展”（experience-driven development） 该法则认为成人学习70%来自挑战性在职任务、20%来自与他人的合作与洞察、10%来自正式或虚拟课堂。 在当今工作中，该学习法则被证明是一种有效的全新的作为学习支持和发展的工具。即每个人的学习由以下途径\u0026\u0026占比构成： 70％来自于工作中的学习 20％来自与同事间的沟通学习 10%来自于课程教学和阅读 学习法则中20％的学习是向他人学习，这种非正式学习对于个人学习发挥着重要的作用。 首先创造一个知识共享的文化环境，就是要了解领导在想什么，如何对企业团队发挥作用。 需要让HR和员工意识到，工作中重要的知识共享可以通过维基，网络会议和非正式聊天发生。 一个企业，一个员工的学习和发展的需求若被满足，那么员工将会更具积极性，企业也将更有竞争力，从而才能够吸引和保留住最优秀的人才。积极进取的员工将充分利用70-20-10 学习法则带动自己，一旦他们意识这一学习法则的优越性，他们自身则将更加主动去为自己安排更多的学习机会。 ","date":"2021-06-26","objectID":"/posts/life/movie/learning/:2:0","tags":["纪录片"],"title":"[纪录片] 学习的人.Homo.Academics","uri":"/posts/life/movie/learning/"},{"categories":["生活"],"content":"吴越古道➕浙西天池 吴越古道 队伍 生命的力量 微视角 ","date":"2021-05-03","objectID":"/posts/life/sport/zhexidaxiagu/:1:0","tags":["户外"],"title":"[户外]吴越古道➕浙西天池","uri":"/posts/life/sport/zhexidaxiagu/"},{"categories":["生活"],"content":"刷新徒步新记录 20.76km，刷新单日徒步记录； ","date":"2021-05-03","objectID":"/posts/life/sport/zhexidaxiagu/:2:0","tags":["户外"],"title":"[户外]吴越古道➕浙西天池","uri":"/posts/life/sport/zhexidaxiagu/"},{"categories":["生活"],"content":"开跑 第一次报名参加越野跑，也就是传说中的跑山、跑土路，听上去就蛮刺激的； 起点-开跑 ","date":"2021-04-24","objectID":"/posts/life/sport/westlake2021/:1:0","tags":["马拉松","户外"],"title":"[户外]西湖群山-10km越野赛","uri":"/posts/life/sport/westlake2021/"},{"categories":["生活"],"content":"一路风景 真的跑山哈，没路的话，就硬踩出路。 山里找路 左右边都是茶田，空气蛮好； 总行程10.3km，总耗时98分钟，两步路记录比较准确。 记录 ","date":"2021-04-24","objectID":"/posts/life/sport/westlake2021/:2:0","tags":["马拉松","户外"],"title":"[户外]西湖群山-10km越野赛","uri":"/posts/life/sport/westlake2021/"},{"categories":["生活"],"content":"获奖 首次参加越野跑，在崎岖的山路上，做到团队领头羊，冲在最前面，同时鼓励team成员，咬紧牙关，向前冲😀😀！ 最终5人小组赛10km越野跑，取得团队组第一的好成绩！🏆 奖品是人手500g 西湖明前龙井茶叶，不错不错； 战绩 ","date":"2021-04-24","objectID":"/posts/life/sport/westlake2021/:3:0","tags":["马拉松","户外"],"title":"[户外]西湖群山-10km越野赛","uri":"/posts/life/sport/westlake2021/"},{"categories":["中间件","缓存"],"content":"常用三个框架 Caffeine, GuavaCache, EhCache ","date":"2020-11-01","objectID":"/posts/middleware/cache/cache/:0:0","tags":["缓存"],"title":"缓存框架小结","uri":"/posts/middleware/cache/cache/"},{"categories":["中间件","缓存"],"content":"前言 在大部分互联网架构中 Cache 己经成为了必可不少的一环- 常用的方案有大家熟知的 NoSQL数据库 (Redis、Memcached) 等,也有大量的进程内缓存 Caffeine、EhCache、Guava Cache等. ","date":"2020-11-01","objectID":"/posts/middleware/cache/cache/:1:0","tags":["缓存"],"title":"缓存框架小结","uri":"/posts/middleware/cache/cache/"},{"categories":["中间件","缓存"],"content":"缓存框架介绍 ","date":"2020-11-01","objectID":"/posts/middleware/cache/cache/:2:0","tags":["缓存"],"title":"缓存框架小结","uri":"/posts/middleware/cache/cache/"},{"categories":["中间件","缓存"],"content":"1.Caffeine Caffeine是一个基于Java8开发的提供了近乎最佳命中率的高性能的缓存库， 缓存和ConcurrentMap有点相似，但还是有所区别- 最根本的区别是ConcurrentMap将会持有所有加入到缓存当中的元素， 直到它们被从缓存当中手动移除- 但是，Caffeine的缓存Cache 通常会被配置成自动驱逐缓存中元素，以限制其内存占用- 在某些场景下，LoadingCache 和AsyncLoadingCache 因为其自动加载缓存的能力将会变得非常实用，Spring5 开始不再支持 Guava Cache, 改用Caffeine. ","date":"2020-11-01","objectID":"/posts/middleware/cache/cache/:2:1","tags":["缓存"],"title":"缓存框架小结","uri":"/posts/middleware/cache/cache/"},{"categories":["中间件","缓存"],"content":"2.EhCache EhCache 是一个用Java实现的使用简单，高速，实现线程安全的缓存管理类库，而且从12之后就支持了集群 ehcache提供 了用内存，磁盘文件存储，以及分布式存储方式等多种灵活的cache管理方案- 同时ehcache作为开放源代码项目，采用限 制比较宽松的Apache License V2.0作为授权方式，被广泛地用于Hibernate, Spring， Cocoon等其他开源系统- ","date":"2020-11-01","objectID":"/posts/middleware/cache/cache/:2:2","tags":["缓存"],"title":"缓存框架小结","uri":"/posts/middleware/cache/cache/"},{"categories":["中间件","缓存"],"content":"3.GuavaCache guava cache是google开源的一款本地缓存工具库，它的设计灵感来源于ConcurrentHashMap， 使用多个segments方式的 细粒度锁，在保证线程安全的同时，支持高并发场景需求，同时支持多种类型的緩存清理策略，包括基于容量的清理、基于 时间的清理、基于引用的清理等- ","date":"2020-11-01","objectID":"/posts/middleware/cache/cache/:2:3","tags":["缓存"],"title":"缓存框架小结","uri":"/posts/middleware/cache/cache/"},{"categories":["中间件","缓存"],"content":"缓存框架主要特性 ","date":"2020-11-01","objectID":"/posts/middleware/cache/cache/:3:0","tags":["缓存"],"title":"缓存框架小结","uri":"/posts/middleware/cache/cache/"},{"categories":["中间件","缓存"],"content":"1.Caffeine Caffeine提供了灵活的构造器去创建一个拥有下列特性的缓存： 自动加载元素到缓存当中，异步加载的方式也可供选择 当达到最大容量的时候可以使用基于就近度和频率的算法进行基于容量的驱逐 将根据缓存中的元素上一次访问或者被修改的时间进行基于过期时间的驱逐 当向缓存中一个已经过时的元素进行访问的时候将会进行异步刷新 key将自动被弱引用所封装 value将自动被弱引用或者软引用所封装 驱逐(或移除)缓存中的元素时将会进行通知 写入传播到一个外部数据源当中 持续计算缓存的访问统计指标 为了提高集成度，扩展模块提供了JSR-107 JCache 和Guava适配器- JSR-107规范了基于Java 6的API，在牺牲了功 能和性能的代价下使代码更加规范- Guava的Cache是Caffeine的原型库并且Caffeine提供了适配器以供简单的迁移策略 ","date":"2020-11-01","objectID":"/posts/middleware/cache/cache/:3:1","tags":["缓存"],"title":"缓存框架小结","uri":"/posts/middleware/cache/cache/"},{"categories":["中间件","缓存"],"content":"2.EhCache 快速，针对大型高并发系统场景，Ehcache的多线程机制有相应的优化改善 简单，很小的jar包，简单配置就可直接使用，单机场景下无需过多的其他服务依赖 支持多种的缓存策略，灵活 缓存数据有两级：内存和磁盘，与一般的本地内存缓存相比，有了磁盘的存储空间，将可以支持更大量的数据缓存需求 具有缓存和缓存管理器的监听接口，能更简单方便的进行缓存实例的监控管理 支持多缓存管理器实例，以及一个实例的多个缓存区域 Ehcache的超时设置主要是针对整个cache实例设置整体的超时策略，而没有较好的处理针对单独的key的个性的超时设置 因此，在使用中要注意过期失效的缓存元素无法被GC回收，时间越长缓存越多，内存占用也就越大，内存泄露的概率也越大 ","date":"2020-11-01","objectID":"/posts/middleware/cache/cache/:3:2","tags":["缓存"],"title":"缓存框架小结","uri":"/posts/middleware/cache/cache/"},{"categories":["中间件","缓存"],"content":"3.GuavaCache Guava Cache的架构设计灵感ConcurrentHashMap，在简单场景中可以通过HashMap实现简单数据缓存，但如果要 实现缓存随时间改变、存储的数据空间可控则缓存工具还是很有必要的- cache存储的是键值对的集合，不同时是还 需要处理缓存过期、动态加载等算法逻辑，需要额外信息实现这些操作，对此根据面向对象的思想，还需要做方法与 数据的关联性封装，主要实现的缓存功能有：自动将节点加载至缓存结构中，当緩存的数据超过最大值时，使用LRU 算法替换；它具备根据节点上一次被访问或写入时间计算缓存过期机制，缓存的key被封装在WeakReference引用 中，缓存的value被封装在 WeakReference 或 SoftReference 引用中; 还可以统计缓存使用过程中的命中率、异常率和命中率等统计数据. ","date":"2020-11-01","objectID":"/posts/middleware/cache/cache/:3:3","tags":["缓存"],"title":"缓存框架小结","uri":"/posts/middleware/cache/cache/"},{"categories":["中间件","缓存"],"content":"缓存框架原理 ","date":"2020-11-01","objectID":"/posts/middleware/cache/cache/:4:0","tags":["缓存"],"title":"缓存框架小结","uri":"/posts/middleware/cache/cache/"},{"categories":["中间件","缓存"],"content":"1.Caffeine 主要原理 1.1淘汰算法 1.1.1常见算法 对于 Java 进程内缓存我们可以通过 HashMap 来实现。不过，Java 进程内存是有限的，不可能无限地往里面放缓存对象。 这就需要有合适的算法辅助我们淘汰掉使用价值相对不高的对象，为新进的对象留有空间。常见的缓存淘汰算法有 FIFO、LRU、LFU. FIFO(First In First Out): 先进先出 它是优先淘汰掉最先缓存的数据、是最简单的淘汰算法。缺点是如果先缓存的数据使用频率比较高的话，那么该数据就不停 地进进出出，因此它的缓存命中率比较低。 LRU(Least Recently Used): RRA. 它是优先淘汰掉最久未访问到的数据。缺点是不能很好地应对偶然的突发流量。比如一个数据在一分钟内的前59秒访问很多 次，而在最后1秒没有访问，但是有一批冷门数据在最后一秒进入缓存，那么热点数据就会被冲刷掉。 LFU(Least Frequently Used) : 最近最少频率使用。它是优先淘汰掉最不经常使用的数据，需要维护一个表示使用频率的字段。 主要有两个缺点： 如果访问频率比较高的话，频率宇段会占据一定的空间； 无法合理更新新上的热点数据，比如某个歌手的老歌播放历史较三，新出的歌如果和老歌一起排序的话，就永无出头之日; 1.1.2 W-TinyLFU 算法 Caffeine 使用了 W-TinyLFU 算法，解决了 LRU 和 LFU 上述的缺点，它主要干了两件事： 采用 Count-Min Sketch 算法降低频率信息带来的内存消耗； 维护一个PK机制保障新上的热点数据能够缓存。 如下图所示，Count-Min Sketch 算法类似布隆过滤器(Bloom fiter)思想，对子频率统计我们其实不需要一个精确值。存储 数据时，对key进行多次 hash 函数运算后，二维数组不同位置存储频率（Caffeine 实际实现的时候是用一维long 型数组， 每个long 型数字切分成16份，每份4bit，默认15次为最高访问频率，每个key实际 hash 了四次，落在不同 long 型数宇的16 份中某个位置）。读取某个key的访问次数时，会比较所有位置上的频率值，取最小值返口。对于所有key的访问频率之和有 个最大值，当达到最大值时，会进行reset即对各个缓存key的场率除以2。 Count-Min Sketch 如下图缓存访问频率存储主要分为两大部分，即 LRU 和 Segmented LRU。 新访问的数据会进入第一个 LRU，在 Caffeine 里叫 WindowDeque. 当WindowDeque满时, 会进入Segmented LRU 中的 ProbationDeque, 在后续被访问到时，它会 被提升到 ProtectedDeque。当 ProtectedDeque 满时，会有数据降级到 ProbationDeque。数据需要淘汰的时候，对 probationDeque 中的数据进行淘汰。具体淘汰机制：取ProbationDeque 中的队首和队尾进行 PK，队首数据是最先进入队 列的，称为受害者，队尾的数据称为攻击者，比较两者 频率大小，大胜小汰 ","date":"2020-11-01","objectID":"/posts/middleware/cache/cache/:4:1","tags":["缓存"],"title":"缓存框架小结","uri":"/posts/middleware/cache/cache/"},{"categories":["中间件","缓存"],"content":"2.EnCache 主要原理 略 ","date":"2020-11-01","objectID":"/posts/middleware/cache/cache/:4:2","tags":["缓存"],"title":"缓存框架小结","uri":"/posts/middleware/cache/cache/"},{"categories":["中间件","缓存"],"content":"3.GuavaCache主要原理 Guava Cache实质是一个在本地缓存KV数据的LocalCache。而LocalCache的数据结构和ConcurrentHashMap一样， 都采用分 segment 来细化管理HashMap中的节点Entry。不同的是LocalCache 中的 ReferenceEntry节点更为复杂。 数据结构简图大致如下： 图? 另外视缓存是否需要使用特别的引用策略(非Strong引用).以及设置的超时过期策路不同 (expireAfterAccess, expire AfterWrite）每个Segment中会维护最多以下5个队列： keyReferenceQueue： 存储了即将被GC回收的缓存数据K引1用列表 （当缓存设置了非强引用策略时该队列生效) valueReferenceQueue：存储了即将被GC回收的缓存数据Value弓1用列表（当缓存设置了非强引用策略时该队列生效） recencyQueue ： 存储最近访问的Entry列表，为了提升访问性能使用的辅助队列。 accessQueue：存储了基于最近访问时间排序的segment中所有ReferenceEntry的一个双向链表(当选择基于访问时间失效策略的时候用到该队列) WriteQueve： 存储了基于最近写入时间排序的segment中所有Entry的一个双向链表(当选择基于写入时问失效策略的时候用到该队列） 此外segment中还维护了2个变量count(记录当前segment中节点数量)，modcount (记录当 前segment变更次数） ","date":"2020-11-01","objectID":"/posts/middleware/cache/cache/:4:3","tags":["缓存"],"title":"缓存框架小结","uri":"/posts/middleware/cache/cache/"},{"categories":["中间件","缓存"],"content":"缓存基本用法 code 某他高级用法用法汇总: 通过异步自动加载实体到缓存中 基于大小的回收策略 基于时间的回收策略 自动刷新 key自动封装虚引用 value自动封装弱引用或软引1用 实体过期或被删除的通知 写入外部资源 统计累计访问缓存 加载策略 手动加载 同步加载 异步加载 回收策略 Caffeine提供了 3种回收策略：基于大小回收，基于时间回收，基手号用回收 统计缓存使用情况 通过使用Caffeine.recordStats… ","date":"2020-11-01","objectID":"/posts/middleware/cache/cache/:5:0","tags":["缓存"],"title":"缓存框架小结","uri":"/posts/middleware/cache/cache/"},{"categories":["中间件","缓存"],"content":"总结 个人推荐使用 Caffeine 算法W-TinyLFU算法它的命中率非常高，内存小，异步化，不阻塞。 无论是读写,Caffeine性能都比 Guava要好。 Caffeine基于java8的高性能，接近最优的缓存库。 Caffeine提供的内存缓存使用参考 Google guava的API。 Caffeine 是基于 Google guava 和 ConcurrentLinkedHashMap的设计经验上改进的成果。 • Caffeine 是Spring 5 默认支持的cache，可见Spring对它的看中，Spring抛弃Guava 转向了 Caffeine. ","date":"2020-11-01","objectID":"/posts/middleware/cache/cache/:6:0","tags":["缓存"],"title":"缓存框架小结","uri":"/posts/middleware/cache/cache/"},{"categories":["中间件","消息"],"content":"什么是消息中间件 消息队列 (MQ全称: Message Queue) 是应用程序和应用程序之间的通信方法。 MQ关注于数据的发送和接收，利用高效、可靠的异步消息传递机制集成分布式系统。通过提供消息传递和消息排队模型，它可以在分布式环境下扩展进程间的通信。 ","date":"2020-09-12","objectID":"/posts/middleware/mq/mq/:1:0","tags":["消息"],"title":"消息(MQ)小结","uri":"/posts/middleware/mq/mq/"},{"categories":["中间件","消息"],"content":"为什么需要消息中间件 在项目中，可将一些无需即时返回且耗时的操作提取出来，进行异步处理，这种异步处理的方式大大的节省了服务器的请求响应时间，最终提高了系统的吞吐量。 ","date":"2020-09-12","objectID":"/posts/middleware/mq/mq/:2:0","tags":["消息"],"title":"消息(MQ)小结","uri":"/posts/middleware/mq/mq/"},{"categories":["中间件","消息"],"content":"系统解耦 MQ相当于一个中介，生产方通过MQ与消费方交互，它将应用程序进行解耦合。 使用MQ后，系统就把自己的一份核心数据发到MQ里，下游哪个系统需要就自己去消费，不需要的话，不用消费即可。 ","date":"2020-09-12","objectID":"/posts/middleware/mq/mq/:2:1","tags":["消息"],"title":"消息(MQ)小结","uri":"/posts/middleware/mq/mq/"},{"categories":["中间件","消息"],"content":"异步调用 将不需要同步处理的并且耗时长的操作由消息队列通知消息接收方进行异步处理。提高了应用程序的响应时间。 ","date":"2020-09-12","objectID":"/posts/middleware/mq/mq/:2:2","tags":["消息"],"title":"消息(MQ)小结","uri":"/posts/middleware/mq/mq/"},{"categories":["中间件","消息"],"content":"流量削峰 假设你有一个系统，平时正常的时候每秒可能就几十个请求，系统正常处理都是OK的，每秒几百请求是可以轻松抗住的； 但假设在高峰期每秒钟有上万个请求，瞬间出现了流量高峰，此时你的选择是要搞扩容机器，能否抗住这个瞬时高峰吗？ 此时我们就可以用MQ中间件来进行流量削峰。所有机器前面部署一层MQ，平时每秒几百请求大家都可以轻松接收消息。 一旦到了瞬时高峰期，一下涌入每秒几万的请求，就可以积压在MQ里面，然后用机器慢慢的消费和处理。 这个就是很典型的一个MQ的用法，用有限的机器资源承载高并发请求，如果业务场景允许异步削峰，高峰期积压一些请求在MQ里，然后高峰期过了，后台系统在一定时间内消费完毕不再积压的话，那就很适合用这种技术方案。 ","date":"2020-09-12","objectID":"/posts/middleware/mq/mq/:2:3","tags":["消息"],"title":"消息(MQ)小结","uri":"/posts/middleware/mq/mq/"},{"categories":["中间件","消息"],"content":"常见的消息中间件有哪些 ","date":"2020-09-12","objectID":"/posts/middleware/mq/mq/:3:0","tags":["消息"],"title":"消息(MQ)小结","uri":"/posts/middleware/mq/mq/"},{"categories":["中间件","消息"],"content":"RocketMQ 阿里系下开源的一款分布式、队列模型的消息中间件，原名Metaq，后来3.0版本改为RocketMQ，是阿里参照kafka设计思想使用java实现的一套mq。同时将阿里系内部多款mq产品（Notify、metaq）进行整合，只维护核心功能，去除了所有其他运行时依赖，保证核心功能最简化，在此基础上配合阿里上述其他开源产品实现不同场景下mq的架构，目前主要多用于订单交易系统。 具有以下特点： 能够保证严格的消息顺序 提供针对消息的过滤功能 提供丰富的消息拉取模式 高效的订阅者水平扩展能力 实时的消息订阅机制 亿级消息堆积能力 ","date":"2020-09-12","objectID":"/posts/middleware/mq/mq/:3:1","tags":["消息"],"title":"消息(MQ)小结","uri":"/posts/middleware/mq/mq/"},{"categories":["中间件","消息"],"content":"ActiveMQ Apache下的一个子项目。 使用Java完全支持JMS1.1和J2EE 1.4规范的 JMS Provider实现，少量代码就可以高效地实现高级应用场景。 可插拔的传输协议支持，比如TCP, SSL, NIO, UDP等。 RabbitMQ、ZeroMQ、ActiveMQ均支持常用的多种语言客户端 C++、Java、.Net,、Python、 Php、 Ruby等。 ","date":"2020-09-12","objectID":"/posts/middleware/mq/mq/:3:2","tags":["消息"],"title":"消息(MQ)小结","uri":"/posts/middleware/mq/mq/"},{"categories":["中间件","消息"],"content":"RabbitMQ 使用Erlang编写的一个开源的消息队列，本身支持很多的协议：AMQP、XMPP、SMTP、STOMP，也正是如此，使的它变的非常重量级，更适合于企业级的开发。 实现了Broker架构，核心思想是生产者不会将消息直接发送给队列，消息在发送给客户端时先在中心队列排队。 对路由(Routing)，负载均衡(Load balance)、数据持久化都有很好的支持。 ","date":"2020-09-12","objectID":"/posts/middleware/mq/mq/:3:3","tags":["消息"],"title":"消息(MQ)小结","uri":"/posts/middleware/mq/mq/"},{"categories":["中间件","消息"],"content":"Kafka Apache下的一个子项目，使用scala实现的一个高性能分布式Publish/Subscribe消息队列系统，具有以下特性： 快速持久化：通过磁盘顺序读写与零拷贝机制，可以在O(1)的系统开销下进行消息持久化； 高吞吐：在一台普通的服务器上既可以达到10W/s的吞吐速率； 高堆积：支持topic下消费者较长时间离线，消息堆积量大； 完全的分布式系统：Broker、Producer、Consumer都原生自动支持分布式，依赖zookeeper自动实现负载均衡； 支持Hadoop数据并行加载：对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。 ","date":"2020-09-12","objectID":"/posts/middleware/mq/mq/:3:4","tags":["消息"],"title":"消息(MQ)小结","uri":"/posts/middleware/mq/mq/"},{"categories":["中间件","消息"],"content":"各种MQ之间的比较 ","date":"2020-09-12","objectID":"/posts/middleware/mq/mq/:4:0","tags":["消息"],"title":"消息(MQ)小结","uri":"/posts/middleware/mq/mq/"},{"categories":["Tech"],"content":"思维导图 ","date":"2020-05-29","objectID":"/posts/tech/tools/tools-paint/:0:0","tags":["作图（paint）"],"title":"常用作图工具(工作\u0026\u0026生活)","uri":"/posts/tech/tools/tools-paint/"},{"categories":["Tech"],"content":"xmind UML ","date":"2020-05-29","objectID":"/posts/tech/tools/tools-paint/:1:0","tags":["作图（paint）"],"title":"常用作图工具(工作\u0026\u0026生活)","uri":"/posts/tech/tools/tools-paint/"},{"categories":["Tech"],"content":"plantUML Official website demo ","date":"2020-05-29","objectID":"/posts/tech/tools/tools-paint/:2:0","tags":["作图（paint）"],"title":"常用作图工具(工作\u0026\u0026生活)","uri":"/posts/tech/tools/tools-paint/"},{"categories":["Tech"],"content":"IDEA plant plugins idea plugin 流程图 ","date":"2020-05-29","objectID":"/posts/tech/tools/tools-paint/:3:0","tags":["作图（paint）"],"title":"常用作图工具(工作\u0026\u0026生活)","uri":"/posts/tech/tools/tools-paint/"},{"categories":["Tech"],"content":"Omni全家桶 OmniGraffle Mac平台的流程图绘制软件，相当于windows平台的visio OmniPlan 工期规划甘特图的工具 ","date":"2020-05-29","objectID":"/posts/tech/tools/tools-paint/:4:0","tags":["作图（paint）"],"title":"常用作图工具(工作\u0026\u0026生活)","uri":"/posts/tech/tools/tools-paint/"},{"categories":["Tech"],"content":"Gliffy diagrams ","date":"2020-05-29","objectID":"/posts/tech/tools/tools-paint/:5:0","tags":["作图（paint）"],"title":"常用作图工具(工作\u0026\u0026生活)","uri":"/posts/tech/tools/tools-paint/"},{"categories":["读书笔记"],"content":"整本书用口语在和读者交流，没有太多理论抽象，案例非常多，读起来相对轻松，如果有丰富的管理经验，甚至看目录即可。 ","date":"2020-05-02","objectID":"/posts/book/duplicateleader/:0:0","tags":["读书笔记"],"title":"[读书笔记]可复制的领导力：樊登的9堂上商业课程","uri":"/posts/book/duplicateleader/"},{"categories":["读书笔记"],"content":"第1章 80%的管理者能达到 80分 作者通过孔子和柏拉因教学方式的差异，总结了一个很有意思的观点：西方更强调逻得思维，讨论事物给出的答案非常的具象，而且习惯标准化；东方更强调综合思维，关注宏观问题，讨论内容非常抽象，很难标准化 在解决问题思维上，东方人依赖个人能力，而西方注重标准化，按照标准操作，一切任务都可 以完成。在管理学习上也应该标准化，普通人通过训练可以轻松拥有领导力 建立信任 建立团队 建工体系 建立文化 四个步骤很通俗易懂，在建立体系环节作者用麦当劳举例，麦当劳最核心 竞争力是其标准化，全世界麦当劳都可以高效、口味一致的提供服务给客户 ","date":"2020-05-02","objectID":"/posts/book/duplicateleader/:1:0","tags":["读书笔记"],"title":"[读书笔记]可复制的领导力：樊登的9堂上商业课程","uri":"/posts/book/duplicateleader/"},{"categories":["读书笔记"],"content":"第2章 明确角色定位，避免亲力亲为 这个道理很简单，但却是大部分新管理者角色未转换前最容易出现的问题 用球队来打个比方：就好比你是前锋，觉得后防不力，就老帮后卫防守，觉得中场组织很差．就老帮中场组织拿 球。当球队需要破门得分、往前传球的时候，却找不到你这个正印前锋的影子，那球队还能赢得了球吗？ 想要让团队获得持续健康的发展，必须激发团队各成员的潜能。在这个过程中不可避免会犯错，不犯错就不会发现自己各方面存在的缺陷。如果无法获得成长的空间和机会，也就没有意愿去承担厲开自己的责任、独当一面 团队管理者在培养人才的过程中，最大的挑战就是要眼睁睁地看着员工去犯错，要给员工试错的空间，培养属于员工的责任感，让他感觉这件事跟他自己是有关的，是需要他自己想办法解决的。 ","date":"2020-05-02","objectID":"/posts/book/duplicateleader/:2:0","tags":["读书笔记"],"title":"[读书笔记]可复制的领导力：樊登的9堂上商业课程","uri":"/posts/book/duplicateleader/"},{"categories":["读书笔记"],"content":"第3章 构建游戏化组织，让工作变的更有趣 这章的标题其实有些容易让人误解，作者想表达的是团队愿景的重要性，书中拿游戏举了例子：超级玛丽最终是为了营救公主、魔兽世界是为了带领阵营成长，甚至在线下欢呼庆祝全球同时在线人数突破4000万，共杀死20亿外星人- 团队所有同学要明白这个团队的终极目标是什么，我们为什么而努力 《硅谷钢铁侠 埃隆•马斯克的冒险人生》也提到过类似的观点，Spacex Tesla. solarCity 的所有员工都清楚公司的终极梦想是让人类变成跨行星物种，而且大概率在这一代人手中无法实现。但这不影响所有员工务实的在新能源、宇宙探索领域积极进取，更不影响公司盈利，顺便让马斯克做了 首富 ","date":"2020-05-02","objectID":"/posts/book/duplicateleader/:3:0","tags":["读书笔记"],"title":"[读书笔记]可复制的领导力：樊登的9堂上商业课程","uri":"/posts/book/duplicateleader/"},{"categories":["读书笔记"],"content":"第4章 理清关系，打造团队一致性 不要把团队比喻成家，因为家庭成员永远不会互相放弃，团队做不到这一点 团队就是球队，目标是赢球 通过建立共同目标、适当授权，让团队的事情成为员工自己想做的事情 ","date":"2020-05-02","objectID":"/posts/book/duplicateleader/:4:0","tags":["读书笔记"],"title":"[读书笔记]可复制的领导力：樊登的9堂上商业课程","uri":"/posts/book/duplicateleader/"},{"categories":["读书笔记"],"content":"第5章 用目标管人，而不是人管人 目标管理有四大难题，作者没有很理论性的给出答案，但识别到问题后，去找方案总归是个相对简单的事情 成员参与度不够，执行积极性不高：让每个成员都参与进来 资源匮乏：我们身边到处都有资源，只要有足够的创意，就可以收获意想不到的惊喜 目标拆分不合理：管理者需要根据实际情况进行具体评估，再做出合理的规划 目标总在变化：理解企业决定、提前准备预案 目标管理领域有一个非常著名的SMART法则 S Specific（明确具体） M Measurable（可量化） A Attainable（可接受、可实现） R Realistic（相关性、符合实际） T Time-limited（有时间限制） 为团队成员设置了合理的目标，并不意味着目标管理的完成，作者给了—个工具 利用目标书写公式、写出目标 列出阻碍目标实现的因素 列出可以帮助目标实现的条件 写下个人特征 列出要做的事情 ","date":"2020-05-02","objectID":"/posts/book/duplicateleader/:5:0","tags":["读书笔记"],"title":"[读书笔记]可复制的领导力：樊登的9堂上商业课程","uri":"/posts/book/duplicateleader/"},{"categories":["读书笔记"],"content":"第6章 利用沟通视窗，改善人际沟通 沟通视窗，也称乔哈里视窗，是一种关于沟通的技巧和理论，也被称为“自我意识的发现一反馈模型”。有效沟通就是这四个象限的有机融合。 隐私象限：正面沟通，避免误解 盲点象限：利用反馈看到自身局限 潜能象限：不要轻视每一名员工的潜能 公开象限：让员工尊重你，而不是怕你 ","date":"2020-05-02","objectID":"/posts/book/duplicateleader/:6:0","tags":["读书笔记"],"title":"[读书笔记]可复制的领导力：樊登的9堂上商业课程","uri":"/posts/book/duplicateleader/"},{"categories":["读书笔记"],"content":"第7章 学会倾听，创建良性的交流通道 倾听并不是不打断别人说话就可以，要点是吸收对方的信息，通过三个步骤可以做到 深呼吸：保证自己情绪稳定 提问：通过实时反馈，让对方感受到你的投入度 复述：确保信息有效性 书里面关于提问讲了两种问题模式：封闭性问题、开放性问题 开放性问题需要对方针对有关事情做进一步的描述，并把回答者的注意力转向所描述事情中比较具体的某个方面，开放性问题没有标准答案。管理者在团队沟通是应该尽量使用这种方式提问 封闭性问题是指那些只能用“是”或“不是”等具体答案来进行解答的问题，这种提问方式在销售层面有着较为广泛的应用，为的是不给客户考虑的空间，只要回答“是”或“不是”就好，造成一种心理催眠效果，“， YES成交法”是其典型代表。在和团队交流时候如果这么搞，出的问题就可想而知了 很有意思的是传销很爱用这种套路，比如一个标价3000元的洗脸盆，正常人大多不会购买，但这在传销组织中很 容易成交，话术大概这样进行 传销者：“朋友们，在外打拼这么多年，大家觉不觉得健康是一件非常重要的事情？是不是？” 观众：“是” 传销者：“那父母的健康是不是很重要？” 观众：“是” 传销者：“大家是不是感觉我们每天忙子事业，对父母的关心不够？” 观众：“是.” 传销者：“如果我们可以花一顿饭的钱，给父母带来健康和快乐．是不是一籍很划算的投资？” 观众：“是” 传销者：“如果我们可以花一顿饭的钱，给父母带来健康和快乐，是不是一笔很划算的投资？” 观众： “是” 传销者：“人老脚先老，洗脚可以使父母身体更加健康，更加长寿，是不是只要一顿饭的钱就可以实现，帮你完成孝心？” 观众 “是” 接下来，传销者还会设置很多需要观众回答“是”的问题，不光要回答“是”，还要观众点头表示认同。这是一种群体性的催眠方式，只要周围有两千人不断地点头说是，在连着说6次yes 后，传销者的第7个问题将会是“你是否 愿意购买？“此时肯定有人习惯性地说“yes”，3000元一个的脸盆就这样成交了。 〝7YES成交法”带来的销售额非常惊人。量然这种做法有违社会道德，但其中蕴含的原理却耐人寻味。 管理者在倾听时，经常会碰到对方情绪失控的情况，这时候简单安慰作用甚微，要学会用认同化解对方的失控情绪 如果我们面对对方的失控，只是重复地说“令静点”“理智点〞，而根本不照顾对方的情绪，那么对方的情绪就会越来越坏。更有效的处理方式应该是“反映情绪”，反映情绪是指在对方情绪出现波动的时候，通过一系列的询问让对方认识到自身的情绪状态 比如，管理者可以问员工“这件事让你很心烦，对吗？，这件事让你很难过，对吗？”“这件事让你很悲伤，对吗？“等类似的问题，实际上就是前文所说的封闭性问题，只需要让对方回答“是”或者“否”。管理者在面对情绪失 控的人时，最好的办法就是千方百计让对方说“是”。只要他说了“是”，情绪就会缓和，因为他从这个回答中找到了认同。 所以.一切所谓“艰难”的谈话，最难过的往往是第一关，即认同对方的情绪。过不了这一关，其他的沟通技巧都没办法起作用。核心是处理好情绪问题。 ","date":"2020-05-02","objectID":"/posts/book/duplicateleader/:7:0","tags":["读书笔记"],"title":"[读书笔记]可复制的领导力：樊登的9堂上商业课程","uri":"/posts/book/duplicateleader/"},{"categories":["读书笔记"],"content":"第8章 及时反馈，让员工敬重你、信任你 别用绩效考核代替反馈 警惕“推理阶梯”（想当然），避免误解和伤害 正面反馈要及时、准确 负面反馈对事不对人 觉得负面反馈很棘手时候，可以用三明治反馈 表扬员工平时、工作做得不错 指出员工现阶段、工作中存在的问题 告诉员工改进之、后会达到的成就 但也要警惕三明治反馈的陷阱，员工会有选择地接受那些表扬性的词汇，而将真正需要反思的问题拋诸脑后。更有甚者，由于管理者批评的语言婉转晦涩，员工甚至都不知道这是负面反馈。 当然更要避免另类的三明治反馈，前段时间看脱口秀，李雪琴也提到了领导拙劣的技巧 老板： 雪琴你今天挺好看的； 你看你那稿子写的什么破玩意，一天天寻思啥呢，带没带脑子来； 你这衣服也挺好看的 李雪琴：也说不上来老板这个三明治有什么不同，但就感觉薄皮大馅的呢？ 人在自信时才会勇于承担属于自己的责任，不自信时，就会觉得周围的人都在针对他，从而不愿意承认自己的过失，拒绝承担相关责任。 在大量工作中优先看到别人的缺点，是很多管理者的通病。这是我们的本能。优秀的企业管理者，必须尽力压制这 种本能，善于发现员工身上闪光的地方，表扬和强化它，员工会在不断的积极反馈中，明确自己的工作方向，更有勇气和力量承担责任。 ","date":"2020-05-02","objectID":"/posts/book/duplicateleader/:8:0","tags":["读书笔记"],"title":"[读书笔记]可复制的领导力：樊登的9堂上商业课程","uri":"/posts/book/duplicateleader/"},{"categories":["读书笔记"],"content":"第9章 有效利用时间，拒绝无效努力 这章作者主要介绍了如何做好一次头脑风暴和六顶思考帽的使用 头脑风暴最重要的就是对于意见不批评、不否定、不深入讨论 团队中有人提出了一个意见，另一个人开始针锋相对，探讨这个意见为什么不合适，然后这两人就开始顺着这个 意见的方向走下去了。这样整个会议的方向就开始出现偏差，整个会场只能听见二人的声音，火药味越来越浓。 其他的与会者心里会想，在这种场合提出白己的意见要冒着被批评、被指责的风险，不如将意见埋在心里。如果 反驳的人是管理者，其他人则更不敢发表不同意见，生怕被管理者当场驳斥。如此一来，自然无法收集到足够的 意见和信息，也会极大地降低团队的会议效率。 白帽 （中立、客观） 绿帽 （创意、巧思） 黄帽 （积极、正面) 红帽 （直觉、情感） 黑帽 （谨慎、负面） 蓝帽 （中立、客观） 六顶思考帽在很多场合听说过，作者举了个很贴切的例子，开高端牛肉拉面馆的几个合伙人，想出了一个营销创意：在一个月内，每天送出100份牛肉面给那些吃不起面的人。这种方案为拉面馆增添了慈善的噱头，通过微信转 发、媒体报道，很快就会吸引很多顾客。 我戴上蓝色思考帽，然后让他们依次戴上了红色思考帽和白色思考帽。一些事实．数据以及直觉思维都在友好的气氛中交流着。 会议很快就进入了黑色思考帽的环节，在戴上黑色思考帽之后，大家一开始都不发言。 于是我就规定所有与会成员每个人一定要想到至少一条负面因素。 过了一会儿，有个人说：“100碗面对后厨的压力可不小，如果赶上高峰期，很有可能影响其他顾客的就餐时间。 有一自然有二，第二个人很快也站了起来，说;“要是来了一群乞丐怎么办？这会严重影响门店的形象。 \"第三个声音响起：“如果每天来的都是同样的100个人该如何是好？这样根本起不到宣传的效果。 还有一个人说：“不要小看100碗面，这个成本也不少，店铺前期送面肯定是赔本赚吆喝，不知道能坚持多久。 如果我们每天给大家发面，突然有一天不发了，会不会引起大家的不满？这对店铺的名誉也不利。 听到大家提出的种种问题，出主意的人说自己确实没有思考周全，打算放弃。我笑着对他摇摇手，让所有人都带 上绿色思考帽，想一下这些问题的解决办法。 第一个人说：“我们可以在早上10点到11点之间发放这100碗面，这样就不会跟中午的高峰期冲突。 第二个人说：“我们可以不在店里宣传，改在互联网和微信上宣传，这样乞丐就不会来了。 第三个人说：“我们还可以学习国外的“墙上咖啡，做墙上拉面”。” （“墙上咖啡*的流程是： 一个人可以买两杯咖啡，其中一杯自己喝，另一杯挂在墙上。如果店里进来一个想喝咖啡却没带钱的人，就可以喝到别人买的咖啡 了。“墙上拉面”的方式与之类似，就是将其他人买好的拉面挂在墙上，供没钱的人享用，减少店里的经营成本。） 在群策群力下，团队拿出了最终的决策方案：慈善拉面的发放时间定为上午10点到11点，发放渠道是互联网和微 信，发送方式为“墙上拉面” ","date":"2020-05-02","objectID":"/posts/book/duplicateleader/:9:0","tags":["读书笔记"],"title":"[读书笔记]可复制的领导力：樊登的9堂上商业课程","uri":"/posts/book/duplicateleader/"},{"categories":["Tech"],"content":"Chart github: Python3 pyecharts ","date":"2019-11-16","objectID":"/posts/tech/python/python3/:1:0","tags":["python"],"title":"python3","uri":"/posts/tech/python/python3/"},{"categories":["tech"],"content":"概要 Arthas 是一款线上(运行时)监控诊断产品，通过全局视角实时查看应用 load、内存、gc、线程的状态信息，并能在不修改应用代码的情况下，对业务问题进行诊断，包括查看方法调用的出入参、异常，监测方法执行耗时，类加载信息等，大大提升线上问题排查效率。 arthas官网 ","date":"2019-10-05","objectID":"/posts/tech/tools/arthas/:1:0","tags":["arthas"],"title":"Arthas(阿尔萨斯)","uri":"/posts/tech/tools/arthas/"},{"categories":["tech"],"content":"Arthas（阿尔萨斯）能为你做什么？ Arthas 是 Alibaba 开源的 Java 诊断工具，深受开发者喜爱。 当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决： 这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？ 我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？ 遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？ 线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！ 是否有一个全局视角来查看系统的运行状况？ 有什么办法可以监控到 JVM 的实时运行状态？ 怎么快速定位应用的热点，生成火焰图？ 怎样直接从 JVM 内查找某个类的实例？ Arthas 支持 JDK 6+，支持 Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 Tab 自动补全功能，进一步方便进行问题的定位和诊断。 ","date":"2019-10-05","objectID":"/posts/tech/tools/arthas/:1:1","tags":["arthas"],"title":"Arthas(阿尔萨斯)","uri":"/posts/tech/tools/arthas/"},{"categories":["tech"],"content":"一键安装 curl -L https://arthas.aliyun.com/install.sh | sh ","date":"2019-10-05","objectID":"/posts/tech/tools/arthas/:1:2","tags":["arthas"],"title":"Arthas(阿尔萨斯)","uri":"/posts/tech/tools/arthas/"},{"categories":["tech"],"content":"Arthas原理 如此强大的工具，究竟是如何做到的呢? 它通过 Instrument 机制和ASM字节码框架，干涉类的加载过程，动态注入字节码，搜集接口调用信息并反馈。 在JDK5之后提供的新特性JavaAgent(Java代理）, java.lang.instrument包支持以Java代理的形式监控或重新定义运行中的服务．可以让我们在不修改程序代码的前提下通过 Instrumentation API改变运行中的java程序. Instrumentation 是一个JVM接口，该接口提供了一组查看和操作Java类的方法，如修改类的字节码、向 classLoader 的classpath下加入jar文件等。开发者可以通过Java语言来操作和监控JVM内部的状态，进而实现Java程序的监控分析。 如Arthas的watch命令就是使用了 java.lang.instrument.Instrumentation#addTransformer(java.lang.instrument.ClassFileTransformer)来 动态增加字节码文件。 public interface Instrumentation{ } 在动态修改字节码文件中，用到了ASM框架，ASM是一个通用的Java字节码操作和分析框架。一般用来动态生成类或者增强既有类的功能。也就是既可以创建class文件，也可以修改class文件。 Arthas增强功能的核心是Enhancer和AdviceWeaver这两个类，对方法进行AOP织入，达到watch，trace等效果。 ","date":"2019-10-05","objectID":"/posts/tech/tools/arthas/:2:0","tags":["arthas"],"title":"Arthas(阿尔萨斯)","uri":"/posts/tech/tools/arthas/"},{"categories":["tech"],"content":"特性 ","date":"2019-10-05","objectID":"/posts/tech/tools/arthas/:3:0","tags":["arthas"],"title":"Arthas(阿尔萨斯)","uri":"/posts/tech/tools/arthas/"},{"categories":["tech"],"content":"后台异步任务，任务输出重定向 可通过 \u003e 或者 \u003e\u003e 将任务输出结果输出到指定的文件中，可以和\u0026一起使用，实现 arthas 命令的后台异步任务。 trace Test t » /Users/michael/tmp_del/test.out \u0026 ","date":"2019-10-05","objectID":"/posts/tech/tools/arthas/:3:1","tags":["arthas"],"title":"Arthas(阿尔萨斯)","uri":"/posts/tech/tools/arthas/"},{"categories":["tech"],"content":"批处理功能 通过批处理功能，arthas 支持一次性批量运行多个命令，并取得命令执行的结果。 ","date":"2019-10-05","objectID":"/posts/tech/tools/arthas/:3:2","tags":["arthas"],"title":"Arthas(阿尔萨斯)","uri":"/posts/tech/tools/arthas/"},{"categories":["tech"],"content":"常用命令 命令列表 ","date":"2019-10-05","objectID":"/posts/tech/tools/arthas/:4:0","tags":["arthas"],"title":"Arthas(阿尔萨斯)","uri":"/posts/tech/tools/arthas/"},{"categories":["tech"],"content":"线程查看 当没有参数时，显示第一页线程的信息 thread 支持一键展示当前最忙的前 N 个线程并打印堆栈： thread -n 3 thread id，显示指定线程的运行堆栈 thread 1 找出当前阻塞其他线程的线程 有时候我们发现应用卡住了，通常是由于某个线程拿佳了某个锁， 并且其他线程都在等待这把锁造成的。 为了排查这类问题，arthas 提供 thread -b 一键找出那个 罪魁祸首。 thread -b 查看指定状态的线程 thread –state WAITING ","date":"2019-10-05","objectID":"/posts/tech/tools/arthas/:4:1","tags":["arthas"],"title":"Arthas(阿尔萨斯)","uri":"/posts/tech/tools/arthas/"},{"categories":["tech"],"content":"watch（函数执行数据观测） 查看日志 $ watch demo.MathGame primeFactors -x 2 Press Q or Ctrl+C to abort. Affect(class count: 1 , method count: 1) cost in 32 ms, listenerId: 5 method=demo.MathGame.primeFactors location=AtExceptionExit ts=2021-08-31 15:22:57; [cost=0.220625ms] result=@ArrayList[ @Object[][ @Integer[-179173], ], @MathGame[ random=@Random[java.util.Random@31cefde0], illegalArgumentCount=@Integer[44], ], null, ] ","date":"2019-10-05","objectID":"/posts/tech/tools/arthas/:4:2","tags":["arthas"],"title":"Arthas(阿尔萨斯)","uri":"/posts/tech/tools/arthas/"},{"categories":["tech"],"content":"monitor（监控） monitor 方法执行监控 monitor com.xx.global.campaign.facade.impl.MerchantsSellerQueryFacadeImpl queryActivityListData -n 10 –cycle 10 $ monitor -c 5 demo.MathGame primeFactors Press Ctrl+C to abort. Affect(class-cnt:1 , method-cnt:1) cost in 94 ms. timestamp class method total success fail avg-rt(ms) fail-rate ----------------------------------------------------------------------------------------------- 2018-12-03 19:06:38 demo.MathGame primeFactors 5 1 4 1.15 80.00% timestamp class method total success fail avg-rt(ms) fail-rate ----------------------------------------------------------------------------------------------- 2018-12-03 19:06:43 demo.MathGame primeFactors 5 3 2 42.29 40.00% ","date":"2019-10-05","objectID":"/posts/tech/tools/arthas/:4:3","tags":["arthas"],"title":"Arthas(阿尔萨斯)","uri":"/posts/tech/tools/arthas/"},{"categories":["tech"],"content":"trace（耗时） trace 方法内部调用路径，并输出方法路径上的每个节点上耗时 trace com.xx.global.campaign.service.business.service.core.impl.ActivitySearchService queryAllCampaignList -n 5 –skipJDKMethod false $ trace demo.MathGame run -n 1 Press Q or Ctrl+C to abort. Affect(class-cnt:1 , method-cnt:1) cost in 20 ms. `---ts=2019-12-04 00:45:53;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69 `---[0.549379ms] demo.MathGame:run() +---[0.059839ms] demo.MathGame:primeFactors() #24 `---[0.232887ms] demo.MathGame:print() #25 ","date":"2019-10-05","objectID":"/posts/tech/tools/arthas/:4:4","tags":["arthas"],"title":"Arthas(阿尔萨斯)","uri":"/posts/tech/tools/arthas/"},{"categories":["tech"],"content":"指定 classloader 更新 logger level logger logger -c 2a139a55 –name ROOT –level debug ","date":"2019-10-05","objectID":"/posts/tech/tools/arthas/:4:5","tags":["arthas"],"title":"Arthas(阿尔萨斯)","uri":"/posts/tech/tools/arthas/"},{"categories":["tech"],"content":"查看所有的 option vmoption ","date":"2019-10-05","objectID":"/posts/tech/tools/arthas/:4:6","tags":["arthas"],"title":"Arthas(阿尔萨斯)","uri":"/posts/tech/tools/arthas/"},{"categories":["tech"],"content":"其他 Arthas Tunnel?? ","date":"2019-10-05","objectID":"/posts/tech/tools/arthas/:5:0","tags":["arthas"],"title":"Arthas(阿尔萨斯)","uri":"/posts/tech/tools/arthas/"},{"categories":["tech"],"content":"案例 实际案例 ","date":"2019-10-05","objectID":"/posts/tech/tools/arthas/:6:0","tags":["arthas"],"title":"Arthas(阿尔萨斯)","uri":"/posts/tech/tools/arthas/"},{"categories":["tech"],"content":"FAO ","date":"2019-10-05","objectID":"/posts/tech/tools/arthas/:7:0","tags":["arthas"],"title":"Arthas(阿尔萨斯)","uri":"/posts/tech/tools/arthas/"},{"categories":["tech"],"content":"怎么以json格式查看结果？ options json-format true ","date":"2019-10-05","objectID":"/posts/tech/tools/arthas/:7:1","tags":["arthas"],"title":"Arthas(阿尔萨斯)","uri":"/posts/tech/tools/arthas/"},{"categories":["Java","多线程"],"content":"Callable 和 Runnable的区别 ","date":"2019-09-18","objectID":"/posts/tech/java/callable/:1:0","tags":["多线程","并行处理"],"title":"Java 多线程并行处理","uri":"/posts/tech/java/callable/"},{"categories":["Java","多线程"],"content":"相同点 都是接口 都可以编写多线程程序 都采用Thread.start()启动线程 ","date":"2019-09-18","objectID":"/posts/tech/java/callable/:1:1","tags":["多线程","并行处理"],"title":"Java 多线程并行处理","uri":"/posts/tech/java/callable/"},{"categories":["Java","多线程"],"content":"不同点 Runnable没有返回值；Callable可以返回执行结果，是个泛型，和Future、FutureTask配合可以用来获取异步执行的结果; callable接口实现类中的run方法允许异常向上抛出，可以在内部处理，try catch，但是runnable接口实现类中run方法的异常必须在内部处理，不能抛出; 注：Callalble接口支持返回执行结果，需要调用FutureTask.get()得到，此方法会阻塞主进程的继续往下执行，如果不调用不会阻塞。 ","date":"2019-09-18","objectID":"/posts/tech/java/callable/:1:2","tags":["多线程","并行处理"],"title":"Java 多线程并行处理","uri":"/posts/tech/java/callable/"},{"categories":["Java","多线程"],"content":"Callable 样例 声明线程池； 创建任务； 任务执行； 等待任务执行完成； 解析任务执行结构； 关闭线程池； public class ExecutorPool { /*声明线程池*/ public static final ExecutorService EXECUTOR = new ThreadPoolExecutor( 4, 100, 0L, TimeUnit.SECONDS, new LinkedBlockingQueue\u003c\u003e(100), new ThreadFactoryBuilder().setNameFormat(\"customize-pool-%d\").build(), new ThreadPoolExecutor.CallerRunsPolicy()); } @Data @Builder public class ResultDTO { Integer id; boolean processResult; } @Data @Slf4j public class CampaignDemoTask implements Callable\u003cResultDTO\u003e { private Integer id; private CountDownLatch countDownLatch; public CampaignDemoTask(Integer id, CountDownLatch countDownLatch) { this.id = id; this.countDownLatch = countDownLatch; } @Override public ResultDTO call() throws Exception { try { log.info(\"CampaignTaskDemoThread process id={}\", this.id); //process... if (NumberUtils.INTEGER_ONE.equals(this.id)) { TimeUnit.SECONDS.sleep(5L); } else { TimeUnit.SECONDS.sleep(2L); } log.info(\"CampaignTaskDemoThread finish id={}\", this.id); } catch (InterruptedException e) { e.printStackTrace(); } finally { this.countDownLatch.countDown(); } return ResultDTO.builder().id(this.id).processResult(Boolean.TRUE).build(); } } @Slf4j public class CallableTest { public static void main(String[] args) { CallableTest callTest = new CallableTest(); callTest.run(); } public void run() { //总任务数 int total = 3; //线程任务结果集 List\u003cFuture\u003cResultDTO\u003e\u003e futureList = Lists.newArrayList(); //1. 组装线程任务 CountDownLatch countDownLatch = new CountDownLatch(total); for (int i = 0; i \u003c total; i++) { CampaignDemoTask campaignTaskDemoThread = new CampaignDemoTask(i, countDownLatch); //2. 线程池执行 Future\u003cResultDTO\u003e result = ExecutorPool.EXECUTOR.submit(campaignTaskDemoThread); futureList.add(result); } log.info(\"futureList={}\", JSON.toJSONString(futureList)); //3. 等待线程池任务执行完成 try { countDownLatch.await(); // 个别线程执行时间会很长，如果线程执行时间超过某段时间，自动结束该线程; 可使用下面方式 // countDownLatch.await(3L, TimeUnit.SECONDS); } catch (InterruptedException e) { e.printStackTrace(); } log.info(\"futureList={}\", JSON.toJSONString(futureList)); //3. 解析处理结果 futureList.forEach(t -\u003e { try { ResultDTO result = t.get(); log.info(\"result={}\", JSON.toJSONString(result)); } catch (InterruptedException e) { e.printStackTrace(); } catch (ExecutionException e) { e.printStackTrace(); } }); //4.线程池关闭 ExecutorPool.EXECUTOR.shutdown(); log.info(\"done!\"); } } ","date":"2019-09-18","objectID":"/posts/tech/java/callable/:1:3","tags":["多线程","并行处理"],"title":"Java 多线程并行处理","uri":"/posts/tech/java/callable/"},{"categories":["读书笔记"],"content":"语录 查理就是如此独特的人，他的独特性既表现在他的思想上，也表现在他的人格上。 比如说，查理思考问题总是从逆向开始。如果要明白人生如何得到幸福，查理首先是研究人生如何才能变得痛苦；要研究企业如何做强做大，查理首先研究企业是如何衰败的；大部分人更关心如何在股市投资上成功，查理最关心的是为什么在股市投资上大部分人都失败了。 他的这种思考方法来源于下面这句农夫谚语中所蕴含的哲理：我只想知道将来我会死在什么地方，这样我就就=不去那儿了。”这也是逆向思维的典型例子。 查理对理性有更苛刻的定义。正是这样的“理性”，让查理具有敏說独到的眼光和洞察力，即使对于完全陌生的领域，他也能一眼看到事物的本质。巴菲特就把查理的这个特点称作“两分钟效应”- 他说查理比世界上任何人更能在最短时间之内把一个复杂商业的本质说清楚。 芒格推崇的几个重要的投资原则： ● 逆向思维，凡事总是反过来想； ● 拥有良好的性格，毫不焦躁地持有看好的股票，并保持浓厚的兴趣去提高自己的能力； ● 在自己的“能力圈”中做投资，并不断拓展自己的能力圈； ● 等待好的投资机会出现，一旦出现，倾全力集中投资。 〝我这辈子遇到的聪明人（来自各行各业的聪明人）没有不每天阅读的没有，一个都没有。沃伦读书之多，我读书之多，可能会让你感到吃惊。我的孩子们都笑话我。他们觉得我是一本长了两条腿的书。” 查理论吸引客户：“关健是把手头的事情做好……把手头的事情做好。把已经拥有的客户照顾好，其他的自然会来找你。 查理有把事情彻底弄清楚的欲望。他遇事喜欢穷根究底，无论该事跟他有密切关系与否。任何引起他注意的事情，他都想对其有更多的认识，更多的了解，弄清楚那到底是怎么回事。 “多元思维模型” – “你必须知道重要学科的重要理论，并经常使用它们—-要全部都用上，而不是只用几种。大多数人都只使用学过的一个学科的思维模型，比如说经济学，试图用一种方法来解决所有问题。你知道谚语是怎么说的：“在手里拿着铁锤的人看来，世界就像一颗钉子。”这是处理问题的一种笨办法。 我们看很多书。我认识的聪明人没有不看很多书的。但光看书还不够：你必须拥有一种能够掌握思想和做合理事情的性格。大多数人无法掌握正确的思想，或者不知道该怎么应用它们。 求学之道无坦途，问艺之路无捷径。 -安东尼•特罗洛普 “五何”原则一一你必须说明何人因何故在何时何地做了何事。如果你在布劳恩公司里面写一封信或指示某人去做某事，但没有告诉他原因，那么你可能会被解雇。实际上，你只要犯两次这种错误，就会被解雇。 你们也许会问，这有那么重要吗？嗯，这也跟心理学的原理有关。如果你能够将一堆模式的知识组合起来，回答一个又一个为什么，你就能够更好地思考：同样道理，如果你告诉人们事情的时候，总是告诉他们原因，他们就能更深刻地理解你说的话，就会要加重视你说的话，也会更倾向于听从你说的话。就算他们不理解你的理由，他们也会更倾向于听你的语。 正如你想要从问一个又一个的“为什么”开始获得普世的智慧一样，你在跟别人交流沟通时，也应该把原因讲清楚。就算答案很浅显，你把“为什么”讲清仍是一种明智的做法。 我什么都读：企业年报、10-K报表、10-Q报表、传记、历史书，每天还要读五份报纸。在飞机上，我会阅读座椅后背的安全指南。阅读是很重要的。这么多年来，是阅读让我致富。 遇到好机会，就全力出击。就是这么简单。 你必须有浓厚的兴趣去弄明白正在发生的事情背后的原因。如果你能够长期保持这种心态，你关注现实的能力将会逐渐得到提高。如果你没有这种心态，那么即使你有很高的智商，也注定会失败。 你若想在任何领域拥有竞争力，就必须熟练地掌握该领域的方方面面，不管你是否喜欢这么做，这是人类大脑的深层结构决定的。 我发现，如果一个人的全部信息都局限于他的工作领域，那么他的工作不会做得很好。一个人必须有眼光，他可以从书籍上或者人们身上--最好是两者兼有--培养眼光。 如果你在生活中惟一的成功就是通过买股票发财，那么这是一种失败的生活。生活不仅仅是精明地积累财富。 生活和生意上的大多数成功来自你知道应该避免哪些事情：过早死亡、糟糕的婚姻等等， 避免染上艾滋病、在路口和火车抢道以及吸毒培养良好的心理习惯。避免邪悉之人，尤其是那些性感诱人的异性。如果因为你的特立油行而在周围人中不受欢迎……那你就随他们去吧。 如何致富 许多年轻的生意人都问我们这个问题。这是一个聪明的问题：你看见某个有钱的老头，然后问他：“我要怎样才能变得像你一样呢？” 每天起床的时候，争取变得比你从前更聪明一点。认真地、出色地完成你的任务。慢慢地，做会有所进步，但这种进步不一定很快。但你这样能够为快速进步打好基础………每天慢慢向前挪一点。到最后（如果你足够长寿的话）大老数人得到了他们应得的东西。 ","date":"2019-07-29","objectID":"/posts/book/poor_charlie_book/:1:0","tags":["理财"],"title":"[读书笔记] 《穷查理宝典》","uri":"/posts/book/poor_charlie_book/"},{"categories":["读书笔记"],"content":"格言 一切重要的图书都应该立即重读。-叔本华 求学之道无坦途，问艺之路无捷径。 -安东尼•特罗洛普 ","date":"2019-07-29","objectID":"/posts/book/poor_charlie_book/:2:0","tags":["理财"],"title":"[读书笔记] 《穷查理宝典》","uri":"/posts/book/poor_charlie_book/"},{"categories":["读书笔记"],"content":"小结 人类误判心理学 聪明人为什么会犯错？答案是：人们倾向于积累大量僵化的结论和态度，而且不去经常检讨，更不愿做改变。芒格亲笔阐述 25 种人类误判的心理倾向。 画定你的能力圈 你必须弄清楚自己有什么本领。如果玩那些别人玩得很好自己却一窍不通的游戏，那么你注定一败涂地。要认清自己的优势，只在能力圈里竞争。 如何让自己生活幸福 只要懂得妒忌、怨恨、反覆无常、意志消沉、不屑客观、不从其他人的经验学习，保证可以轻松拥有悲惨的一生。想要幸福？反其道而行之就可以了。 掌握多学科视角成为赢家 在手里拿着一把锤子的人眼中，世界就像一根钉子。大多数人试图以一种思维模型来解决所有问题，而其思维往往只来自某一专业学科。但你必须要知道各种重要学科的重要理论，才能洞察问题本质。 没有必定赚钱公式 在98% 的时问里，我们对股市的态度是：保持不可知状态。赚钱，靠的是记住浅显的，而不是掌握深奥的。伯克希尔只寻找那些不用动脑筋也能赚钱的机会。 耐心等待一记好球 只要以耐心、纪律和客观为指导原则，你可以将90% 的财富都投到一家伟大的公司。不需要频繁的买卖，只要几次决定便能造就投资财富。芒格的这一特点，彻底改变了巴菲特的投资策略。 ","date":"2019-07-29","objectID":"/posts/book/poor_charlie_book/:3:0","tags":["理财"],"title":"[读书笔记] 《穷查理宝典》","uri":"/posts/book/poor_charlie_book/"},{"categories":["Tech"],"content":"具体的解决方案如下： 苹果-\u003e系统偏好设置-\u003e最下边点mysql 在弹出页面中 关闭mysql服务（点击stop mysql server） 进入终端输入：cd /usr/local/mysql/bin/ 回车后 登录管理员权限 sudo su 输入mac的管理员密码 回车后输入以下命令来禁止mysql验证功能 ./mysqld_safe –skip-grant-tables \u0026 回车后mysql会自动重启（偏好设置中mysql的状态会变成running） 输入命令 ./mysql 输入命令 FLUSH PRIVILEGES; 输入命令 SET PASSWORD FOR ‘root’@’localhost’ = PASSWORD(‘你的新密码’); 至此，密码已经修改成功，可以登录啦！ ","date":"2019-06-16","objectID":"/posts/tech/setup/mac-reset-mysql-pwd/:0:0","tags":["install","mysql"],"title":"Mac下Mysql重置密码","uri":"/posts/tech/setup/mac-reset-mysql-pwd/"},{"categories":["Java","多线程"],"content":" 并发: 一个处理器同时处理多个任务。有效解决了单CPU下的多任务问题； 并行: 多个处理器或者是多核的处理器同时处理多个不同的任务.[ 能够并行执行任务的基础就是多核CPU ] 前者是逻辑上的同时发生（simultaneous），而后者是物理上的同时发生． 并发性(concurrency)，又称共行性，是指能处理多个同时性活动的能力，并发事件之间不一定要同一时刻发生。 并行(parallelism)是指同时发生的两个并发事件，具有并发的含义，而并发则不一定并行。 来个比喻： 并发：1个人1张嘴同时吃3个馒头 并行：3个人3张口，每人各吃n个馒头 并发与并行的区别 下图反映了一个包含8个操作的任务在一个有两核心的CPU中创建四个线程运行的情况。 假设每个核心有两个线程，那么每个CPU中两个线程会交替并发，两个CPU之间的操作会并行运算。 单就一个CPU而言两个线程可以解决线程阻塞造成的不流畅问题，其本身运行效率并没有提高； 多CPU的并行运算才真正解决了运行效率问题，这也正是并发和并行的区别。 双核四线程运行示意图 ","date":"2019-05-25","objectID":"/posts/tech/java/concurrencyparall/:0:0","tags":["并行\u0026\u0026并发"],"title":"并行\u0026\u0026并发","uri":"/posts/tech/java/concurrencyparall/"},{"categories":["Java","多线程"],"content":"Refer 参考 ","date":"2019-05-25","objectID":"/posts/tech/java/concurrencyparall/:1:0","tags":["并行\u0026\u0026并发"],"title":"并行\u0026\u0026并发","uri":"/posts/tech/java/concurrencyparall/"},{"categories":["Java"],"content":"Java基础概括 ","date":"2019-03-19","objectID":"/posts/tech/java/java-learning/:1:0","tags":["Java"],"title":"Java随笔","uri":"/posts/tech/java/java-learning/"},{"categories":["Java"],"content":"大图 ","date":"2019-03-19","objectID":"/posts/tech/java/java-learning/:1:1","tags":["Java"],"title":"Java随笔","uri":"/posts/tech/java/java-learning/"},{"categories":["Java"],"content":"Java ","date":"2019-03-19","objectID":"/posts/tech/java/java-learning/:1:2","tags":["Java"],"title":"Java随笔","uri":"/posts/tech/java/java-learning/"},{"categories":["Java"],"content":"设计模式 \u0026\u0026 算法 ","date":"2019-03-19","objectID":"/posts/tech/java/java-learning/:1:3","tags":["Java"],"title":"Java随笔","uri":"/posts/tech/java/java-learning/"},{"categories":["Java"],"content":"框架 \u0026\u0026 spring ","date":"2019-03-19","objectID":"/posts/tech/java/java-learning/:1:4","tags":["Java"],"title":"Java随笔","uri":"/posts/tech/java/java-learning/"},{"categories":["Java"],"content":"中间件 \u0026\u0026 其他 ","date":"2019-03-19","objectID":"/posts/tech/java/java-learning/:1:5","tags":["Java"],"title":"Java随笔","uri":"/posts/tech/java/java-learning/"},{"categories":["Java"],"content":"Java ","date":"2019-03-19","objectID":"/posts/tech/java/java-learning/:2:0","tags":["Java"],"title":"Java随笔","uri":"/posts/tech/java/java-learning/"},{"categories":["Java"],"content":"Document Oracle Java tutorial ","date":"2019-03-19","objectID":"/posts/tech/java/java-learning/:2:1","tags":["Java"],"title":"Java随笔","uri":"/posts/tech/java/java-learning/"},{"categories":["Java"],"content":"List public class ArrayList\u003cE\u003e extends AbstractList\u003cE\u003e implements List\u003cE\u003e, RandomAccess, Cloneable, java.io.Serializable{} public class LinkedList\u003cE\u003e extends AbstractSequentialList\u003cE\u003e implements List\u003cE\u003e, Deque\u003cE\u003e, Cloneable, java.io.Serializable{} public class CopyOnWriteArrayList\u003cE\u003e implements List\u003cE\u003e, RandomAccess, Cloneable, java.io.Serializable {} List list = Collections.synchronizedList(new ArrayList(...)); ","date":"2019-03-19","objectID":"/posts/tech/java/java-learning/:2:2","tags":["Java"],"title":"Java随笔","uri":"/posts/tech/java/java-learning/"},{"categories":["Java"],"content":"Java equals() and hashCode() refer Java HashMap equals() Object class defined equals() method like this: public boolean equals(Object obj) { return (this == obj); } According to java documentation of equals() method, any implementation should adhere to following principles. For any object x, x.equals(x) should return true. For any two object x and y, x.equals(y) should return true if and only if y.equals(x) returns true. For multiple objects x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. Multiple invocations of x.equals(y) should return same result, unless any of the object properties is modified that is being used in the equals() method implementation. Object class equals() method implementation returns true only when both the references are pointing to same object. hashCode() Java Object hashCode() is a native method and returns the integer hash code value of the object. The general contract of hashCode() method is: Multiple invocations of hashCode() should return the same integer value, unless the object property is modified that is being used in the equals() method. An object hash code value can change in multiple executions of the same application. If two objects are equal according to equals() method, then their hash code must be same. If two objects are unequal according to equals() method, their hash code are not required to be different. Their hash code value may or may-not be equal. Importance of equals() and hashCode() method Java hashCode() and equals() method are used in Hash table based implementations in java for storing and retrieving data. I have explained it in detail at How HashMap works in java? The implementation of equals() and hashCode() should follow these rules. If o1.equals(o2), then o1.hashCode() == o2.hashCode() should always be true. If o1.hashCode() == o2.hashCode is true, it doesn’t mean that o1.equals(o2) will be true. When to override equals() and hashCode() methods? When we override equals() method, it’s almost necessary to override the hashCode() method too so that their contract is not violated by our implementation. Note that your program will not throw any exceptions if the equals() and hashCode() contract is violated, if you are not planning to use the class as Hash table key, then it will not create any problem. If you are planning to use a class as Hash table key, then it’s must to override both equals() and hashCode() methods. Let’s see what happens when we rely on default implementation of equals() and hashCode() methods and use a custom class as HashMap key. public class DataKey { private String name; private int id; // getter and setter methods @Override public String toString() { return \"DataKey [name=\" + name + \", id=\" + id + \"]\"; } } public class HashingTest { public static void main(String[] args) { Map\u003cDataKey, Integer\u003e hm = getAllData(); DataKey dk = new DataKey(); dk.setId(1); dk.setName(\"Pankaj\"); log.info(\"{}\", dk.hashCode()); Integer value = hm.get(dk); log.info(\"{}\", value); } private static Map\u003cDataKey, Integer\u003e getAllData() { Map\u003cDataKey, Integer\u003e hm = new HashMap\u003c\u003e(); DataKey dk = new DataKey(); dk.setId(1); dk.setName(\"Pankaj\"); log.info(\"{}\", dk.hashCode()); hm.put(dk, 10); return hm; } } When we run above program, it will print null. It’s because Object hashCode() method is used to find the bucket to look for the key. Since we don’t have access to the HashMap keys and we are creating the key again to retrieve the data, you will notice that hash code values of both the objects are different and hence value is not found. We can also use Project Lombok to auto generate equals and hashCode method implementations. import lombok.Data; @Data public class DataKey { private String name; private int id; @Override public String toString() { return \"DataKey [name=\" + name + \", id=\" + id + \"]\"; } } What is Hash Collision ?? In very simple terms, Java Hash table implementations uses following logic for get and put opera","date":"2019-03-19","objectID":"/posts/tech/java/java-learning/:2:3","tags":["Java"],"title":"Java随笔","uri":"/posts/tech/java/java-learning/"},{"categories":["Java"],"content":"Project Lombok refer ","date":"2019-03-19","objectID":"/posts/tech/java/java-learning/:2:4","tags":["Java"],"title":"Java随笔","uri":"/posts/tech/java/java-learning/"},{"categories":["Java"],"content":"Serialization and Deserialization Serialization is the conversion of the state of an object into a byte stream;deserialization does the opposite. Stated differently, serialization is the conversion of a Java object into a static stream (sequence) of bytes, which we can then save to a database or transfer over a network. When should I implement Serializable interface? implement the Serializable interface when you need to store a copy of the object, send them to another process which runs on the same system or over the network. Why do we do that? Because you want to store or send an object. Does it give any advantages or security? It makes storing and sending objects easy. It has nothing to do with security. What to do instead Instead, use a serialization scheme that you can explicitly control. Such as Protocol Buffers, JSON, XML, or your own custom scheme. refer refer2 ","date":"2019-03-19","objectID":"/posts/tech/java/java-learning/:2:5","tags":["Java"],"title":"Java随笔","uri":"/posts/tech/java/java-learning/"},{"categories":["Java"],"content":"Java 泛型（generics） Java Genrics is one of the most important features introduced in Java 5. What does the syntax mean in Java? Here \u003cE\u003e denotes the type parameter of Node class .The type parameter defines that it can refer to any type (like String, Integer, Employee etc.). Java generics have type parameter naming conventions like following: Java Generic Type Naming convention helps us understanding code easily and having a naming convention is one of the best practices of Java programming language. So generics also comes with its own naming conventions. Usually, type parameter names are single, uppercase letters to make it easily distinguishable from java variables. The most commonly used type parameter names are: E - Element (used extensively by the Java Collections Framework, for example ArrayList, Set etc.) K - Key (Used in Map) N - Number T - Type V - Value (Used in Map) S,U,V etc. - 2nd, 3rd, 4th types ？- 通配符泛型 For example take the following scenerio public class Node\u003cE\u003e{ E elem; Node\u003cE\u003e next, previous; } class Test{ Node\u003cString\u003e obj = new Node\u003c\u003e(); } You can use generics with Interface,method and constructor too. For more about generics visit these: https://www.javatpoint.com/generics-in-java Generics in Java Generics was added in Java 5 to provide compile-time type checking and removing risk of ClassCastException that was common while working with collection classes. The whole collection framework was re-written to use generics for type-safety. Let’s see how generics help us using collection classes safely. List list = new ArrayList(); list.add(\"abc\"); list.add(new Integer(5)); //OK for(Object obj : list){ //type casting leading to ClassCastException at runtime String str=(String) obj; } Above code compiles fine but throws ClassCastException at runtime because we are trying to cast Object in the list to String whereas one of the element is of type Integer. After Java 5, we use collection classes like below. List\u003cString\u003e list1 = new ArrayList\u003cString\u003e(); // java 7 ? List\u003cString\u003e list1 = new ArrayList\u003c\u003e(); list1.add(\"abc\"); //list1.add(new Integer(5)); //compiler error for(String str : list1){ //no type casting needed, avoids ClassCastException } Notice that at the time of list creation, we have specified that the type of elements in the list will be String. So if we try to add any other type of object in the list, the program will throw compile-time error. Also notice that in for loop, we don’t need typecasting of the element in the list, hence removing the ClassCastException at runtime. https://www.journaldev.com/1663/java-generics-example-method-class-interface Why do we use Generics in Java? Generics provide strong compile-time type checking and reduces risk of ClassCastException and explicit casting of objects. What is T in Generics? We use to create a generic class, interface, and method. The T is replaced with the actual type when we use it. How does Generics work in Java? Generic code ensures type safety. The compiler uses type-erasure to remove all type parameters at the compile time to reduce the overload at runtime. refer reter 2 泛型通配符 ","date":"2019-03-19","objectID":"/posts/tech/java/java-learning/:2:6","tags":["Java"],"title":"Java随笔","uri":"/posts/tech/java/java-learning/"},{"categories":["Java"],"content":"Java Reflection refer Reflection in Java is a very powerful concept and it’s of little use in normal programming but it’s the backbone for most of the Java, J2EE frameworks. Some of the frameworks that use java reflection are: JUnit - uses reflection to parse @Test annotation to get the test methods and then invoke it. Spring - dependency injection, read more at Spring Dependency Injection Tomcat web container to forward the request to correct module by parsing their web.xml files and request URI. The list is endless and they all use java reflection because all these frameworks have no knowledge and access of user defined classes, interfaces, their methods etc. We should not use reflection in normal programming where we already have access to the classes and interfaces because of following drawbacks. Poor Performance - Since java reflection resolve the types dynamically, it involves processing like scanning the classpath to find the class to load, causing slow performance. Security Restrictions - Reflection requires runtime permissions that might not be available for system running under security manager. This can cause you application to fail at runtime because of security manager. Security Issues - Using reflection we can access part of code that we are not supposed to access, for example we can access private fields of a class and change it’s value. This can be a serious security threat and cause your application to behave abnormally. High Maintenance - Reflection code is hard to understand and debug, also any issues with the code can’t be found at compile time because the classes might not be available, making it less flexible and hard to maintain. ","date":"2019-03-19","objectID":"/posts/tech/java/java-learning/:2:7","tags":["Java"],"title":"Java随笔","uri":"/posts/tech/java/java-learning/"},{"categories":["Java"],"content":"Java Annotations refer Java 1.5 introduced annotations and now it’s heavily used in Java EE frameworks like Hibernate, Jersey, and Spring. Java Annotation is metadata about the program embedded in the program itself. It can be parsed by the annotation parsing tool or by the compiler. We can also specify annotation availability to either compile time only or till runtime. import java.lang.annotation.Documented; import java.lang.annotation.ElementType; import java.lang.annotation.Inherited; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Documented @Target(ElementType.METHOD) @Inherited @Retention(RetentionPolicy.RUNTIME) public @interface MethodInfo{ String author() default \"Pankaj\"; String date(); int revision() default 1; String comments(); } Meta annotations in java There are five types of meta annotations: @Documented indicates that elements using this annotation should be documented by javadoc and similar tools. This type should be used to annotate the declarations of types whose annotations affect the use of annotated elements by their clients. If a type declaration is annotated with Documented, its annotations become part of the public API of the annotated elements. @Target indicates the kinds of program element to which an annotation type is applicable. Some possible values are TYPE, METHOD, CONSTRUCTOR, FIELD etc. If Target meta-annotation is not present, then annotation can be used on any program element. @Inherited indicates that an annotation type is automatically inherited. If user queries the annotation type on a class declaration, and the class declaration has no annotation for this type, then the class’s superclass will automatically be queried for the annotation type. This process will be repeated until an annotation for this type is found, or the top of the class hierarchy (Object) is reached. @Retention indicates how long annotations with the annotated type are to be retained. It takes RetentionPolicy argument whose Possible values are SOURCE, CLASS and RUNTIME @Repeatable used to indicate that the annotation type whose declaration it annotates is repeatable. Java Annotations Example Let’s see a java example showing the use of built-in annotations in java as well as the use of custom annotation created by us in the above example. import java.io.FileNotFoundException; import java.util.ArrayList; import java.util.List; public class AnnotationExample { public static void main(String[] args) { } @Override @MethodInfo(author = \"Pankaj\", comments = \"Main method\", date = \"Nov 17 2012\", revision = 1) public String toString() { return \"Overriden toString method\"; } @Deprecated @MethodInfo(comments = \"deprecated method\", date = \"Nov 17 2012\") public static void oldMethod() { System.out.println(\"old method, don't use it.\"); } @SuppressWarnings({ \"unchecked\", \"deprecation\" }) @MethodInfo(author = \"Pankaj\", comments = \"Main method\", date = \"Nov 17 2012\", revision = 10) public static void genericsTest() throws FileNotFoundException { List l = new ArrayList(); l.add(\"abc\"); oldMethod(); } } I believe above java annotation example is self-explanatory and showing the use of annotations in different cases. Java Annotations Parsing We will use Reflection to parse java annotations from a class. Please note that Annotation Retention Policy should be RUNTIME otherwise its information will not be available at runtime and we won’t be able to fetch any data from it. import java.lang.annotation.Annotation; import java.lang.reflect.Method; public class AnnotationParsing { public static void main(String[] args) { try { for (Method method : AnnotationParsing.class.getClassLoader() .loadClass((\"com.michael.annotations.AnnotationExample\")).getMethods()) { // checks if MethodInfo annotation is present for the method if (method.isAnnotationPresent(com.michael.annotations.MethodInfo.class)) { try { // iterates all the annotations available in the method for (Annotation a","date":"2019-03-19","objectID":"/posts/tech/java/java-learning/:2:8","tags":["Java"],"title":"Java随笔","uri":"/posts/tech/java/java-learning/"},{"categories":["Java"],"content":"Map ","date":"2019-03-19","objectID":"/posts/tech/java/java-learning/:2:9","tags":["Java"],"title":"Java随笔","uri":"/posts/tech/java/java-learning/"},{"categories":["Java"],"content":"HashMap refer Java HashMap is one of the most popular Collection classes in java. Java HashMap is Hash table based implementation. HashMap in java extends AbstractMap class that implements Map interface. public class HashMap\u003cK,V\u003e extends AbstractMap\u003cK,V\u003e implements Map\u003cK,V\u003e, Cloneable, Serializable {} Some of the important points about HashMap in Java are; Java HashMap allows null key and null values. HashMap is not an ordered collection. You can iterate over HashMap entries through keys set but they are not guaranteed to be in the order of their addition to the HashMap. HashMap is almost similar to Hashtable except that it’s unsynchronized and allows null key and values. HashMap uses it’s inner class Node\u003cK,V\u003e for storing map entries. HashMap stores entries into multiple singly linked lists, called buckets or bins. Default number of bins is 16 and it’s always power of 2. HashMap uses hashCode() and equals() methods on keys for get and put operations. So HashMap key object should provide good implementation of these methods. This is the reason immutable classes are better suitable for keys, for example String and Interger. Java HashMap is not thread safe, for multithreaded environment you should use ConcurrentHashMap class or get synchronized map using Collections.synchronizedMap() method. Java HashMap Constructors Java HashMap provides four constructors. public HashMap(): Most commonly used HashMap constructor. This constructor will create an empty HashMap with default initial capacity 16 and load factor 0.75 public HashMap(int initialCapacity): This HashMap constructor is used to specify the initial capacity and 0.75 load factor. This is useful in avoiding rehashing if you know the number of mappings to be stored in the HashMap. public HashMap(int initialCapacity, float loadFactor): This HashMap constructor will create an empty HashMap with specified initial capacity and load factor. You can use this if you know the maximum number of mappings to be stored in HashMap. In common scenarios you should avoid this because load factor 0.75 offers a good tradeoff between space and time cost. public HashMap(Map\u003c? extends K, ? extends V\u003e m): Creates a Map having same mappings as the specified map and with load factor 0.75 How HashMap works in java? HashMap in java use it’s inner class Node\u003cK,V\u003e for storing mappings. HashMap works on hashing algorithm and uses hashCode() and equals() method on key for get and put operations. HashMap use singly linked list to store elements, these are called bins or buckets. When we call put method, hashCode of key is used to determine the bucket that will be used to store the mapping. Once bucket is identified, hashCode is used to check if there is already a key with same hashCode or not. If there is an existing key with same hashCode, then equals() method is used on key. If equals returns true, then value is overwritten, otherwise a new mapping is made to this singly linked list bucket. If there is no key with same hashCode then mapping is inserted into the bucket. For HashMap get operation, again key hashCode is used to determine the bucket to look for the value. After bucket is identified, entries are traversed to find out the Entry using hashCode and equals method. If match is found, value is returned otherwise null is returned. There are much more things involved such as hashing algorithm to get the bucket for the key, rehashing of mappings etc. But for our working, just remember that HashMap operations work on Key and good implementation of hashCode and equals method is required to avoid unwanted behaviour. Below image shows the explanation of get and put operations. ","date":"2019-03-19","objectID":"/posts/tech/java/java-learning/:2:10","tags":["Java"],"title":"Java随笔","uri":"/posts/tech/java/java-learning/"},{"categories":["Java"],"content":"java移位运算 左乘、右除 左移1位相当于乘以2的1次方，左移n位就相当于乘以 2的n次方。 右移1位相当于除以2的1次方，右移n位就相当于除以 2的n次方。 demo 10 \u003c\u003c 1 = 10 * 2 = 20 10 \u003c\u003c 3 = 10 * (2 * 2 * 2) = 80 6 \u003e\u003e 1 = 6/2 = 3 6 \u003e\u003e 2 = 6/(2 * 2) = 1 6 \u003e\u003e 3 = 6/(2 * 2 * 2) = 0 ","date":"2019-03-19","objectID":"/posts/tech/java/java-learning/:2:11","tags":["Java"],"title":"Java随笔","uri":"/posts/tech/java/java-learning/"},{"categories":["Java"],"content":"JVM ","date":"2019-03-19","objectID":"/posts/tech/java/java-learning/:3:0","tags":["Java"],"title":"Java随笔","uri":"/posts/tech/java/java-learning/"},{"categories":["Java"],"content":"图例 JVM ","date":"2019-03-19","objectID":"/posts/tech/java/java-learning/:3:1","tags":["Java"],"title":"Java随笔","uri":"/posts/tech/java/java-learning/"},{"categories":["Java"],"content":"todo ","date":"2019-03-19","objectID":"/posts/tech/java/java-learning/:4:0","tags":["Java"],"title":"Java随笔","uri":"/posts/tech/java/java-learning/"},{"categories":["Java"],"content":"java 链表 java ListNode 链表 ","date":"2019-03-19","objectID":"/posts/tech/java/java-learning/:4:1","tags":["Java"],"title":"Java随笔","uri":"/posts/tech/java/java-learning/"},{"categories":["Tech"],"content":"版本控制 : 集中式 vs 分布式 ","date":"2018-10-11","objectID":"/posts/tech/tools/git/:1:0","tags":["git"],"title":"Git小结","uri":"/posts/tech/tools/git/"},{"categories":["Tech"],"content":"集中式版本控制（csv、svn） 集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。 缺点 集中式版本控制系统最大的毛病就是必须联网才能工作； 集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。 ","date":"2018-10-11","objectID":"/posts/tech/tools/git/:1:1","tags":["git"],"title":"Git小结","uri":"/posts/tech/tools/git/"},{"categories":["Tech"],"content":"分布式版本控制（git） 分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上. 优点 不需要联网，也可以工作； 安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。 ","date":"2018-10-11","objectID":"/posts/tech/tools/git/:1:2","tags":["git"],"title":"Git小结","uri":"/posts/tech/tools/git/"},{"categories":["Tech"],"content":"Git安装\u0026\u0026配置 ","date":"2018-10-11","objectID":"/posts/tech/tools/git/:2:0","tags":["git"],"title":"Git小结","uri":"/posts/tech/tools/git/"},{"categories":["Tech"],"content":"yum安装(Linux) 在Linux上是有yum安装Git，非常简单，只需要一行命令 yum -y install git 输入 git version 查看Git是否安装完成以及查看其版本号 备注： yum安装git被安装在 /usr/libexec/git-core 目录下 ","date":"2018-10-11","objectID":"/posts/tech/tools/git/:2:1","tags":["git"],"title":"Git小结","uri":"/posts/tech/tools/git/"},{"categories":["Tech"],"content":"Git初始化配置 a、设置用户名： git config --global user.name \"\u003c用户名\u003e\" b、设置用户邮箱： git config --global user.email \"\u003c电子邮件\u003e\" 注意：该配置会在github主页上显示谁提交了该文件 c、配置ok之后，我们用如下命令来看看是否配置成功 git config --list 注意：git config --global 参数，有了这个参数表示你这台机器上所有的git仓库都会使用这个配置，当然你也可以对某个仓库指定不同的用户名和邮箱 ","date":"2018-10-11","objectID":"/posts/tech/tools/git/:2:2","tags":["git"],"title":"Git小结","uri":"/posts/tech/tools/git/"},{"categories":["Tech"],"content":"Git使用 ","date":"2018-10-11","objectID":"/posts/tech/tools/git/:3:0","tags":["git"],"title":"Git小结","uri":"/posts/tech/tools/git/"},{"categories":["Tech"],"content":"命令流程图 远程仓库-本地仓库-工作区 本地仓库-工作区 ","date":"2018-10-11","objectID":"/posts/tech/tools/git/:3:1","tags":["git"],"title":"Git小结","uri":"/posts/tech/tools/git/"},{"categories":["Tech"],"content":"git help 要想获得 git config 命令的手册，执行 git help add 如果你不需要全面的手册，只需要可用选项的快速参考，那么可以用 -h 选项获得更简明的 “help” 输出： git add -h ","date":"2018-10-11","objectID":"/posts/tech/tools/git/:3:2","tags":["git"],"title":"Git小结","uri":"/posts/tech/tools/git/"},{"categories":["Tech"],"content":"常规git操作Demo 你应该能够置并初始化一个仓库（repository）、开始或停止跟踪（track）文件、暂存（stage）或提交（commit）更改. 1.进入目标文件夹 cd demo 2.初始化仓库 git init 3.仓库中创建 readme.txt文件，文本内容：test 4.查看仓库状态 git status 请记住，你工作目录下的每一个文件都不外乎这两种状态：已跟踪 或 未跟踪。 5.添加文件到暂存区中 git add readme.txt 6.提交文件到仓库 git commit -m \"readme.txt提交\" 7.查看仓库状态 git status 8.提交到远程库 git push 9.本地修改 readme.txt 文件后可以使用diff查看文件修改前后对比 git diff readme.txt 10.查看最近到最远的历史提交日志 git log [不传入任何参数的默认情况下，git log 会按时间先后顺序列出所有的提交，最近的更新排在最上面。 正如你所看到的，这个命令会列出每个提交的 SHA-1 校验和、作者的名字和电子邮件地址、提交时间以及提交说明。] 11.回退版本 git reset --hard 版本号 ","date":"2018-10-11","objectID":"/posts/tech/tools/git/:3:3","tags":["git"],"title":"Git小结","uri":"/posts/tech/tools/git/"},{"categories":["Tech"],"content":"Git常用基本命令 mkdir XX (创建一个空目录 XX指目录名) git init 把当前的目录变成可以管理的git仓库，生成隐藏.git文件 pwd 显示当前目录的路径 cat XX 查看XX文件内容 git add XX 把xx文件添加到暂存区去 git commit –m “XX” 提交文件到本地仓库 –m 后面的是注释 git push –u(第一次要用-u 以后不需要) origin master 把当前master分支推送到远程库 git push origin master Git会把master分支推送到远程库对应的远程分支上 git push origin --delete serverfix 删除远程分支 git status 查看仓库状态 git diff XX 查看XX文件修改了那些内容 git log 查看历史记录 git reflog 查看历史记录的版本号id git reset --hard HEAD^ 回退到上一个版本 git reset --hard HEAD~ 回退到上一个版本 git reset –-hard HEAD~100 (回退到100个版本) git checkout -- XX 把XX文件在工作区的修改全部撤销 git rm XX 删除XX文件 git remote 查看远程库的信息 git remote –v 查看远程库的详细信息 git remote add origin https://github.com/tugenhua0707/testgit 关联一个远程库 git fetch 从远程仓库中抓取与拉取 git clone https://github.com/tugenhua0707/testgit 从远程库中克隆 git checkout –b dev 创建dev分支 并切换到dev分支上； 等同于两条命令的: git branch dev; git checkout dev; git checkout master 切换到master分支 git branch 查看当前所有的分支[查看当前所有分支的一个列表] git branch -v 查看每一个分支的最后一次提交 git branch –d bug_fix 删除bug_fix分支 git branch \u003cname\u003e 创建新分支 git branch --no-merged master 尚未合并到 master 分支列表 git merge dev 在当前的分支上合并dev分支 git stash 把当前的工作隐藏起来 等以后恢复现场后继续工作 git stash list 查看所有被隐藏的文件列表 git stash apply 恢复被隐藏的文件，但是内容不删除 git stash drop 删除文件 git stash pop 恢复文件的同时 也删除文件 ","date":"2018-10-11","objectID":"/posts/tech/tools/git/:4:0","tags":["git"],"title":"Git小结","uri":"/posts/tech/tools/git/"},{"categories":["Tech"],"content":"tmp 初始化一个Git仓库，使用: git init 添加文件到Git仓库，分两步： 使用命令: git add \u003cfile\u003e 注意，可反复多次使用，添加多个文件； 使用命令: git commit -m \u003cmessage\u003e 要随时掌握工作区的状态，使用命令: git status 请记住，你工作目录下的每一个文件都不外乎这两种状态：已跟踪 或 未跟踪。 如果git status告诉你有文件被修改过, 则用 git diff可以查看修改内容: git diff readme.txt HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令： git reset --hard commit_id。 穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。 要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。 如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数： git log --pretty=oneline 如果用git log可以按s向下翻log git log --oneline 可以一行展现 场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令: git checkout -- file。 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令 git reset HEAD \u003cfile\u003e，就回到了场景1，第二步按场景1操作。 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。 远程库已经准备好了，下一步是用命令git clone克隆一个本地库： git clone git@github.com:xxx/xxx.git 每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改； 命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。 git remote -v 查看远程库信息. $ git remote -v origin git@github.com:michaelliao/learn-git.git (fetch) origin git@github.com:michaelliao/learn-git.git (push) 然后，根据名字删除，比如删除origin： $ git remote rm origin 我们创建dev分支，然后切换到dev分支: $ git checkout -b dev git checkout命令加上-b参数表示创建并切换，相当于以下两条命令： or 创建并切换dev分支： $ git switch -c dev 用git branch命令查看当前分支： git branch命令会列出所有分支，当前分支前面会标一个*号。 我们把dev分支的工作成果合并到master分支上： $ git merge dev 合并完成后，就可以放心地删除dev分支了： $ git branch -d dev Git鼓励大量使用分支： 查看分支：git branch 创建分支：git branch \u003cname\u003e 切换分支：git checkout \u003cname\u003e或者git switch \u003cname\u003e 创建+切换分支：git checkout -b \u003cname\u003e或者git switch -c \u003cname\u003e 合并某分支到当前分支：git merge \u003cname\u003e 删除分支：git branch -d \u003cname\u003e 推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上： $ git push origin master 如果要推送其他分支，比如dev，就改成： $ git push origin dev 因此，多人协作的工作模式通常是这样： 首先，可以试图用git push origin \u003cbranch-name\u003e推送自己的修 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并； 如果合并有冲突，则解决冲突，并在本地提交； 没有冲突或者解决掉冲突后，再用git push origin \u003cbranch-name\u003e推送就能成功！ 如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to \u003cbranch-name\u003e origin/\u003cbranch-name\u003e。 这就是多人协作的工作模式，一旦熟悉了，就非常简单。 小结 查看远程库信息，使用git remote -v； 本地新建的分支如果不推送到远程，对其他人就是不可见的； 从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交； 在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致； 建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name； 从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。 ","date":"2018-10-11","objectID":"/posts/tech/tools/git/:5:0","tags":["git"],"title":"Git小结","uri":"/posts/tech/tools/git/"},{"categories":["Tech"],"content":"Refer to https://git-scm.com/book/zh/v2 https://www.liaoxuefeng.com/wiki/896043488029600 https://www.cnblogs.com/upstudy/p/15868898.html https://www.cnblogs.com/upstudy/p/15870787.html ","date":"2018-10-11","objectID":"/posts/tech/tools/git/:6:0","tags":["git"],"title":"Git小结","uri":"/posts/tech/tools/git/"},{"categories":["Tech"],"content":"Linux 单机最大进程数、线程数、连接数 ","date":"2018-06-05","objectID":"/posts/tech/os/linux/:1:0","tags":["Linux"],"title":"Linux相关","uri":"/posts/tech/os/linux/"},{"categories":["Tech"],"content":"1、查看Linux系统开启的最大进程数 cat /proc/sys/kernel/pid_max ","date":"2018-06-05","objectID":"/posts/tech/os/linux/:1:1","tags":["Linux"],"title":"Linux相关","uri":"/posts/tech/os/linux/"},{"categories":["Tech"],"content":"2、查看Lixu系统开启的最大线程数 ulimit -u ulimit -a ➜ ~ ulimit -u 2784 ➜ ~ ulimit -a -t: cpu time (seconds) unlimited -f: file size (blocks) unlimited -d: data seg size (kbytes) unlimited -s: stack size (kbytes) 8192 -c: core file size (blocks) 0 -v: address space (kbytes) unlimited -l: locked-in-memory size (kbytes) unlimited -u: processes 2784 -n: file descriptors 256 ","date":"2018-06-05","objectID":"/posts/tech/os/linux/:1:2","tags":["Linux"],"title":"Linux相关","uri":"/posts/tech/os/linux/"},{"categories":["Tech"],"content":"3、 一个进程允许启动的最大线程数 Linux环境，一个进程分配的虚拟内存空间是4G,可用2G，每个线程Stack空间为10M，2048/10 = 200，所以一般的单进程能开通的线程数也就可以确定了。约为200个。 ","date":"2018-06-05","objectID":"/posts/tech/os/linux/:1:3","tags":["Linux"],"title":"Linux相关","uri":"/posts/tech/os/linux/"},{"categories":["Tech"],"content":"4、最大连接数 最大连接数限制就是系统所能打开的最大文件数（文件描述符）的限制，分全局和进程两种，相应的命令如下： sysctl kern.maxfiles 说明：全局限制，也就是系统默认的最大连接数限制是122880 ➜ ~ sysctl kern.maxfiles kern.maxfiles: 122880 sysctl kern.maxfilesperproc 说明：单个进程默认最大连接数限制是61440 ➜ ~ sysctl kern.maxfilesperproc kern.maxfilesperproc: 61440 ulimit －n 说明：“ulimit －n”命令显示当前shell能打开的最大文件数，默认值：256，该值总是小于kern.maxfilesperproc的值，因为一个shell就是一个进程。 ➜ ~ ulimit -n 256 ","date":"2018-06-05","objectID":"/posts/tech/os/linux/:1:4","tags":["Linux"],"title":"Linux相关","uri":"/posts/tech/os/linux/"},{"categories":["Tech"],"content":"Linux base64 编码与解码命令 1、 base64 编码 (1) base64 file 功能：从指定的文件file中读取数据，编码为base64的字符串然后输出； (2) echo \"string\" | base64 功能：将宇符串stringt换行编码为base64的字符串然后输出; (3) echo -n \"string\" I base64 功能：将字符串string编码为base64的字符串然后输出； 2、base64 解码 (1) base64 -d file 功能：从指定的文件file中读取已经过base64编码的数据，然后进行解码，并输出解码后的字符串; (2) echo \"str\" I base64 -d 功能：对base64编码的字符串str和空行进行解码，然后将解码后的字符串输出； (3) echo -n \"str\" | base64 -d 功能：对base64编码的字符串str进行解码，然后将解码后的字符串输出； ","date":"2018-06-05","objectID":"/posts/tech/os/linux/:2:0","tags":["Linux"],"title":"Linux相关","uri":"/posts/tech/os/linux/"},{"categories":["Tech"],"content":"常用命令 ","date":"2018-06-05","objectID":"/posts/tech/os/linux/:3:0","tags":["Linux"],"title":"Linux相关","uri":"/posts/tech/os/linux/"},{"categories":["Tech"],"content":"压缩命令 unrar x *.rar ","date":"2018-06-05","objectID":"/posts/tech/os/linux/:3:1","tags":["Linux"],"title":"Linux相关","uri":"/posts/tech/os/linux/"},{"categories":["Tech"],"content":"1.保持学习 一个非常重要的观点是：如果你停留在一个地方不前，并不代表你能一直呆在那里，而是代表你正在落后（不进则退）。往前进并不意味着你是就能进步 - 这至少你不会沦落到最后（付出就会有收获） 。程序员为了保持向前发展，就需要不断学习 ，我们需要的不是慢慢的往前走，而是我们要奔跑起来！下面列出这方面的几个观点： 1）读书 2）订阅RSS和阅读一些杂志（我觉得msdn的杂志不错） 3）参加一些研讨会，自己准备一些简报(社区精英、博客园每月的活动等都不错) 4）学习一切可以帮助你的东西 5）教其他人其实也是教自己 ","date":"2018-06-03","objectID":"/posts/book/bettercoder/:1:0","tags":["学习"],"title":"如何成为一名优秀的码农","uri":"/posts/book/bettercoder/"},{"categories":["Tech"],"content":"2.给自己确定目标 如果不知道向什么方向发展，是很难有成就的。这一点关键是自己要有一个清晰地目标。这个应该是个长期的目标，然后要有一个目标的愿景。首先要把这个目标分成一些小的任务，建立实现这些目标的路线图。你可以创建每月或每年你必须完成的一个任务列表，然后根据这个任务列表去实现。 ","date":"2018-06-03","objectID":"/posts/book/bettercoder/:2:0","tags":["学习"],"title":"如何成为一名优秀的码农","uri":"/posts/book/bettercoder/"},{"categories":["Tech"],"content":"3.生活中的每一个挑战都是一个机遇 在日常工作时，总是会遇到各种各样的问题。你可能会遇到一些程序的bug；项目经理分配的新任务；你同事请你帮助；你请别人帮助。这些都是一个一个的挑战。问题是：你如何去解决这些挑战？我的一个答案是：你必要调动你所有的激情去应对这些挑战，因为每个挑战就是一个机遇。 ","date":"2018-06-03","objectID":"/posts/book/bettercoder/:3:0","tags":["学习"],"title":"如何成为一名优秀的码农","uri":"/posts/book/bettercoder/"},{"categories":["Tech"],"content":"4.抱有积极态度 对待每一件事情都应抱着积极的态度。如果发现你犯了一个错误，请不要在意，因为没有人是不会犯错误的。你可以想象一下，有谁喜欢那种一遇到问题就抱怨的人呢？如果你说“好吧,伙计们,我能做到的,请给我一分钟,我就会解决这个问题。”,然后笑着转过身就修改自己的错误，这样在别人眼里又是如何看待你呢？当您解决这个问题之后，你会感觉到异常的高兴。 相信自己的方法是正确的，自己正在快速进步。千万不要老是认为自己无法达到自己的目标。 ","date":"2018-06-03","objectID":"/posts/book/bettercoder/:4:0","tags":["学习"],"title":"如何成为一名优秀的码农","uri":"/posts/book/bettercoder/"},{"categories":["Tech"],"content":"5.给自己寻找一个导师 这并不是说你需要一个人来帮助你来完成你的工作。导师可能就是比你职别高的职员。而且他的职位是你想要去争取的。如果他的职位你争取到了，你可以再选择另外一个更高的。但是你必要一直都需要有这么一个人。也可以能督促你和支持你的朋友、亲人、恋人等等。 ","date":"2018-06-03","objectID":"/posts/book/bettercoder/:5:0","tags":["学习"],"title":"如何成为一名优秀的码农","uri":"/posts/book/bettercoder/"},{"categories":["Tech"],"content":"6.让自己公众化 如何让别人知道你呢？一个最简单的办法是写博客、提问题、帮别人解决问题。起码要google知道你吧。学会在团队和项目中分享自己的知识。如果你学了新的知识，就把它分享出来！如果你没有分享，下次再用的时候，你可能就忘记了。 ","date":"2018-06-03","objectID":"/posts/book/bettercoder/:6:0","tags":["学习"],"title":"如何成为一名优秀的码农","uri":"/posts/book/bettercoder/"},{"categories":["Tech"],"content":"7.时不时的审查一下自己，确保自己的方式正确 时不时的，你需要检查你做的方法是否全正确。检查一下是否完成即将完成的目标。如果没有，赶快找原因，加紧去完成。寻找你的薄弱环节，加强它们。这听起来很滑稽：我认识一个技术很强的开发人员，但他的打字速度却是很慢。为什么？因为他对键盘不熟悉，又不想花10-20小时进行键盘训练。兄弟，如果你会读到此，请务必要求自己克服此类的问题。 ","date":"2018-06-03","objectID":"/posts/book/bettercoder/:7:0","tags":["学习"],"title":"如何成为一名优秀的码农","uri":"/posts/book/bettercoder/"},{"categories":["Tech"],"content":"8.保持健康身体 我写这篇文章之前，算是“集思广益”的。我是一个年轻男子，跟我的笔记本电脑和另一台计算机工作了太长时间，我不能强迫自己做健身运动了。这个有点像磨刀不误砍柴工。有一个故事，两个樵夫打赌砍树，一个比较强壮，另外一个比较瘦弱。强壮的人相信他会赢得，因为他没有休息，持续砍了8小时。瘦小的那位，每隔一个小时就休息15分钟。最后瘦小的那位樵夫却赢了。他赢的秘密在于休息的时候将刀磨锋利了。你的健康就像是斧头，如果斧头钝了，你将无法为自己人生道路披荆斩刺…… ","date":"2018-06-03","objectID":"/posts/book/bettercoder/:8:0","tags":["学习"],"title":"如何成为一名优秀的码农","uri":"/posts/book/bettercoder/"},{"categories":["Tech"],"content":"9.其他 事繁勿慌，事闲勿荒。 每件事情或者项目完成之后，要告之需求者或者领导，让他们做个check，不管大事小事，免后顾之忧。 下班回家前收下邮件，确认没有剩下今天一定要完成的工作，下了班就忘了所有工作。 不要以项目急，作为写糟糕代码的借口，糟糕的代码在以后的维护中会给你带来更大的麻烦。 多请示，多汇报。 不要以工资低，做为不上心工作的借口，既然你接受了这个工资就好好的把事情做好。做一天就要做好一天，不想做就直接走人，别拖着。要做就做好，要么就不做。 动手写程序前，思路一定要清晰，逻辑一定要顺畅，不然写的累，以后维护更累。 碰到问题，就把他研究清楚，弄透彻，这样以后效率会越来越高。不要只知其然，而不知其所以然，下次这个问题还玩你。 要有自己的思想和主见，千万不要只会复制粘贴。 多做事情，不见得是坏事，公司会越来越需要你，多数公司是能看见的。如果你做N多事情，公司视而不见，你可以考虑走人了。 尽量培养自己的一技之长，不管是技术方面的或者业务方面的，提高自己的不可替代性。 学习，技术更新换代很快，不停的学习才是让自己的升值，最起码不贬值的唯一途径。 心态，什么行业，什么工作都会有压力，都会有烦乱的事情。保持良好心态才是王道。 ","date":"2018-06-03","objectID":"/posts/book/bettercoder/:9:0","tags":["学习"],"title":"如何成为一名优秀的码农","uri":"/posts/book/bettercoder/"},{"categories":["Tech"],"content":"Windows下通过bat调用jar时，传参，网上有很多例子，这里就不做阐述。 今儿讲下如何在bat调用jar后，bat可以获取jar的返回值： 思路如下： jar内部执行相应的逻辑，输出不同的内容； 通过常规bat调用jar，同时将jar的输出内容定向到某一个文件a.txt中。（jar中若有时间轮询或等待，bat则会等jar完全结束后，才回处理后续作业） bat后续通过读取文件a.txt内容，进行后续逻辑操作； 以上思路，曲线救国~ demo code如下：inovke.bat @echo off java -jar test.jar \u003e a.txt setlocal enabledelayedexpansion for /f \"tokens=1-3\" %%i in (a.txt) do echo 第一列：%%i 第二列：%%j 第三列：%%k echo %a% pause test.jar的主类文件： public class Config { public static void main(String[] args) { Random random = new Random(); int result = random.nextInt(10); try { TimeUnit.SECONDS.sleep(result);// 随机等待秒速 } catch (InterruptedException e) { e.printStackTrace(); } } } 以上，完成bat同jar的交互 ； 今儿发现另一个思路，可以使用python胶水，来曲线救国~ 记录一下~ ","date":"2018-05-12","objectID":"/posts/tech/tools/windowsbat/:0:0","tags":["bat"],"title":"bat同jar交互","uri":"/posts/tech/tools/windowsbat/"},{"categories":["Tech"],"content":" markdown-it-demo Refer markdown grammar Markdown，写博客当然要用这个。在线编辑器，所见即所得地编写。 ","date":"2018-05-06","objectID":"/posts/tech/tools/markdown/:0:0","tags":["markdown"],"title":"Markdown 基本语法","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"标题 markdown总支持1~6六级标题，通过在一行之前加上不同数量的井号来表示。 # 这是 H1 # ## 这是 H2 ## ### 这是 H3 ### … ","date":"2018-05-06","objectID":"/posts/tech/tools/markdown/:1:0","tags":["markdown"],"title":"Markdown 基本语法","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"段落 非常自然，一行文字就是一个段落。 段落开头的一个空格\u0026emsp;\u0026emsp; ","date":"2018-05-06","objectID":"/posts/tech/tools/markdown/:2:0","tags":["markdown"],"title":"Markdown 基本语法","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"文本样式 字体样式常用的有粗体、斜体、删除线等。 *斜体字* 对应 斜体字 **粗体字** 对应 粗体字 ~~删除线~~ 对应 删除线 行内代码 对应 行内代码 还有一些样式原生不支持，但是可以通过html间接支持。 可以使用星号*或下划线_指定粗体或者斜体。 这是斜体 这也是斜体 这是粗体 这是粗体+斜体 *这是斜体* _这也是斜体_ **这是粗体** ***这是粗体+斜体*** ` 行内代码 ` ","date":"2018-05-06","objectID":"/posts/tech/tools/markdown/:3:0","tags":["markdown"],"title":"Markdown 基本语法","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"引用 通过在行首加上大于号\u003e来添加引用格式。 DD DD 引用可以嵌套： w 引用可以嵌套： \u003ew \u003e \u003e引用可以嵌套： 也可以嵌套其他格式： ","date":"2018-05-06","objectID":"/posts/tech/tools/markdown/:4:0","tags":["markdown"],"title":"Markdown 基本语法","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"task list ( checkbox ) - [ ] todo: task one not finish `- + SPACE +[ ]` - [x] finish: task twp finish `- + SPACE +[x]` todo: task one not finish - + SPACE +[ ] finish: task twp finish - + SPACE +[x] ","date":"2018-05-06","objectID":"/posts/tech/tools/markdown/:5:0","tags":["markdown"],"title":"Markdown 基本语法","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"列表 无序列表使用星号、加号或是减号作为列表标记： Red Green Blue 等同于 Red Green Blue 和 Red Green Blue - Red - Green - Blue 有序列表则使用数字接着一个英文句点： Bird McHale Parish 数字并不会影响输出的 HTML 结果，也就是说上面的例子等同于： Bird McHale Parish ","date":"2018-05-06","objectID":"/posts/tech/tools/markdown/:6:0","tags":["markdown"],"title":"Markdown 基本语法","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"内联代码 用反引号` 来标记内联代码，它们会解释成标签 \u003ccode\u003e标签\u003c/code\u003e 如果代码的内容中有反引号，请用两个反引号包裹。 代码中的\u0026、\u003c、\u003e符号都会自动转义，请放心使用。 ` eee ` eee 还有一种是github的风格，代码段的前后用三个反引号 ``` 独占一行来标记。 ww ","date":"2018-05-06","objectID":"/posts/tech/tools/markdown/:7:0","tags":["markdown"],"title":"Markdown 基本语法","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"分隔线 你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： * * * *** ***** - - - --------------------------------------- ","date":"2018-05-06","objectID":"/posts/tech/tools/markdown/:8:0","tags":["markdown"],"title":"Markdown 基本语法","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"超链接 an example an example [an example](http://example.com/) [an example](http://example.com/ \"Optional Title\") 会被解释为 \u003ca href='https://www.google.com/'\u003egoogle\u003c/a\u003e \u003ca href='https://www.google.com/' title=\"Optional Title\"\u003egoogle\u003c/a\u003e ","date":"2018-05-06","objectID":"/posts/tech/tools/markdown/:9:0","tags":["markdown"],"title":"Markdown 基本语法","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"转义 markdown支持在以下字符前面插入反斜杠，插入之后，将不再解析这些字符，而是原样输出。 \\ 反斜线 ` 反引号 * 星号 _ 底线 {} 花括号 [] 方括号 () 括弧 # 井字号 + 加号 - 减号 . 英文句点 ! 惊叹号 ","date":"2018-05-06","objectID":"/posts/tech/tools/markdown/:10:0","tags":["markdown"],"title":"Markdown 基本语法","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"表格(table) Item Value Qty Computer $1600 5 Phone $12 12 Pipe $1 234 | Item | Value | Qty | | :------- | ----: | :---: | | Computer | $1600 | 5 | | Phone | $12 | 12 | | Pipe | $1 | 234 | title1 title2 v1 v2 要注意第二行的冒号决定了居左居右还是居中，如果你不加冒号，默认是居左的。 另外可以把第一行去掉，做成没有表头的表格，但第二行始终是要有的。 ","date":"2018-05-06","objectID":"/posts/tech/tools/markdown/:11:0","tags":["markdown"],"title":"Markdown 基本语法","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"TOC TOC = Table of content ， 将内容制作成导航 hexo toc 快速生成markdown目录TOC 快速生成markdown目录TOC，页内跳转 图片 ","date":"2018-05-06","objectID":"/posts/tech/tools/markdown/:12:0","tags":["markdown"],"title":"Markdown 基本语法","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"内联 ![Alt text](/path/img.jpg) 会被解释为 \u003cimg src='/path/to/img.jpg'/\u003e 这种格式显示图片不能控制对齐和大小，需要的话可以采取raw html的方法： \u003cp align=\"center\"\u003e \u003cimg src=\"https://i.loli.net/2021/01/31/4ZHoWduI59fiqJY.png\" width=\"100\" /\u003e \u003c/p\u003e 自适配图片 引用方式如下： 独库公路-雪山 ","date":"2018-05-06","objectID":"/posts/tech/tools/markdown/:13:0","tags":["markdown"],"title":"Markdown 基本语法","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"外联 ![图片](https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png) ","date":"2018-05-06","objectID":"/posts/tech/tools/markdown/:14:0","tags":["markdown"],"title":"Markdown 基本语法","uri":"/posts/tech/tools/markdown/"},{"categories":["Tech"],"content":"refer Refer ","date":"2018-05-06","objectID":"/posts/tech/tools/markdown/:15:0","tags":["markdown"],"title":"Markdown 基本语法","uri":"/posts/tech/tools/markdown/"}]